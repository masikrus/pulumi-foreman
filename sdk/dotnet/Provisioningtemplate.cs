// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/provisioningtemplate:Provisioningtemplate")]
    public partial class Provisioningtemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
        /// host.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// Notes and comments for auditing purposes.
        /// </summary>
        [Output("auditComment")]
        public Output<string?> AuditComment { get; private set; } = null!;

        /// <summary>
        /// A description of the provisioning template.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Whether or not the template is locked for editing.
        /// </summary>
        [Output("locked")]
        public Output<bool?> Locked { get; private set; } = null!;

        /// <summary>
        /// Name of the provisioning template. @EXAMPLE "AutoYaST default"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// IDs of the operating systems associated with this provisioning template.
        /// </summary>
        [Output("operatingsystemIds")]
        public Output<ImmutableArray<int>> OperatingsystemIds { get; private set; } = null!;

        /// <summary>
        /// Whether or not the provisioning template is a snippet be used by other templates.
        /// </summary>
        [Output("snippet")]
        public Output<bool?> Snippet { get; private set; } = null!;

        /// <summary>
        /// The markup and code of the provisioning template. @EXAMPLE "void"
        /// </summary>
        [Output("template")]
        public Output<string> Template { get; private set; } = null!;

        /// <summary>
        /// How templates are determined: When editing a template, you must assign a list of operating systems which this template
        /// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
        /// requests a template, Foreman will select the best match from the available templates of that type in the following
        /// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
        /// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
        /// provisioning template selection described above.
        /// </summary>
        [Output("templateCombinationsAttributes")]
        public Output<ImmutableArray<Outputs.ProvisioningtemplateTemplateCombinationsAttribute>> TemplateCombinationsAttributes { get; private set; } = null!;

        /// <summary>
        /// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        /// </summary>
        [Output("templateKindId")]
        public Output<int?> TemplateKindId { get; private set; } = null!;


        /// <summary>
        /// Create a Provisioningtemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provisioningtemplate(string name, ProvisioningtemplateArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/provisioningtemplate:Provisioningtemplate", name, args ?? new ProvisioningtemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Provisioningtemplate(string name, Input<string> id, ProvisioningtemplateState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/provisioningtemplate:Provisioningtemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Provisioningtemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Provisioningtemplate Get(string name, Input<string> id, ProvisioningtemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new Provisioningtemplate(name, id, state, options);
        }
    }

    public sealed class ProvisioningtemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Notes and comments for auditing purposes.
        /// </summary>
        [Input("auditComment")]
        public Input<string>? AuditComment { get; set; }

        /// <summary>
        /// A description of the provisioning template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether or not the template is locked for editing.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Name of the provisioning template. @EXAMPLE "AutoYaST default"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingsystemIds")]
        private InputList<int>? _operatingsystemIds;

        /// <summary>
        /// IDs of the operating systems associated with this provisioning template.
        /// </summary>
        public InputList<int> OperatingsystemIds
        {
            get => _operatingsystemIds ?? (_operatingsystemIds = new InputList<int>());
            set => _operatingsystemIds = value;
        }

        /// <summary>
        /// Whether or not the provisioning template is a snippet be used by other templates.
        /// </summary>
        [Input("snippet")]
        public Input<bool>? Snippet { get; set; }

        /// <summary>
        /// The markup and code of the provisioning template. @EXAMPLE "void"
        /// </summary>
        [Input("template", required: true)]
        public Input<string> Template { get; set; } = null!;

        [Input("templateCombinationsAttributes")]
        private InputList<Inputs.ProvisioningtemplateTemplateCombinationsAttributeArgs>? _templateCombinationsAttributes;

        /// <summary>
        /// How templates are determined: When editing a template, you must assign a list of operating systems which this template
        /// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
        /// requests a template, Foreman will select the best match from the available templates of that type in the following
        /// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
        /// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
        /// provisioning template selection described above.
        /// </summary>
        public InputList<Inputs.ProvisioningtemplateTemplateCombinationsAttributeArgs> TemplateCombinationsAttributes
        {
            get => _templateCombinationsAttributes ?? (_templateCombinationsAttributes = new InputList<Inputs.ProvisioningtemplateTemplateCombinationsAttributeArgs>());
            set => _templateCombinationsAttributes = value;
        }

        /// <summary>
        /// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        /// </summary>
        [Input("templateKindId")]
        public Input<int>? TemplateKindId { get; set; }

        public ProvisioningtemplateArgs()
        {
        }
        public static new ProvisioningtemplateArgs Empty => new ProvisioningtemplateArgs();
    }

    public sealed class ProvisioningtemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
        /// host.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// Notes and comments for auditing purposes.
        /// </summary>
        [Input("auditComment")]
        public Input<string>? AuditComment { get; set; }

        /// <summary>
        /// A description of the provisioning template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether or not the template is locked for editing.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// Name of the provisioning template. @EXAMPLE "AutoYaST default"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingsystemIds")]
        private InputList<int>? _operatingsystemIds;

        /// <summary>
        /// IDs of the operating systems associated with this provisioning template.
        /// </summary>
        public InputList<int> OperatingsystemIds
        {
            get => _operatingsystemIds ?? (_operatingsystemIds = new InputList<int>());
            set => _operatingsystemIds = value;
        }

        /// <summary>
        /// Whether or not the provisioning template is a snippet be used by other templates.
        /// </summary>
        [Input("snippet")]
        public Input<bool>? Snippet { get; set; }

        /// <summary>
        /// The markup and code of the provisioning template. @EXAMPLE "void"
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        [Input("templateCombinationsAttributes")]
        private InputList<Inputs.ProvisioningtemplateTemplateCombinationsAttributeGetArgs>? _templateCombinationsAttributes;

        /// <summary>
        /// How templates are determined: When editing a template, you must assign a list of operating systems which this template
        /// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
        /// requests a template, Foreman will select the best match from the available templates of that type in the following
        /// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
        /// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
        /// provisioning template selection described above.
        /// </summary>
        public InputList<Inputs.ProvisioningtemplateTemplateCombinationsAttributeGetArgs> TemplateCombinationsAttributes
        {
            get => _templateCombinationsAttributes ?? (_templateCombinationsAttributes = new InputList<Inputs.ProvisioningtemplateTemplateCombinationsAttributeGetArgs>());
            set => _templateCombinationsAttributes = value;
        }

        /// <summary>
        /// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
        /// </summary>
        [Input("templateKindId")]
        public Input<int>? TemplateKindId { get; set; }

        public ProvisioningtemplateState()
        {
        }
        public static new ProvisioningtemplateState Empty => new ProvisioningtemplateState();
    }
}
