// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman.Inputs
{

    public sealed class HostInterfacesAttributeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifiers of attached interfaces, e.g. 'eth1', 'eth2' as comma-separated list
        /// </summary>
        [Input("attachedDevices")]
        public Input<string>? AttachedDevices { get; set; }

        /// <summary>
        /// Identifier of the interface to which this interface belongs.
        /// </summary>
        [Input("attachedTo")]
        public Input<string>? AttachedTo { get; set; }

        /// <summary>
        /// Provider used for BMC/IMPI functionality. Values include: `"IPMI"`
        /// </summary>
        [Input("bmcProvider")]
        public Input<string>? BmcProvider { get; set; }

        [Input("computeAttributes")]
        private InputMap<string>? _computeAttributes;

        /// <summary>
        /// Hypervisor specific interface options
        /// </summary>
        public InputMap<string> ComputeAttributes
        {
            get => _computeAttributes ?? (_computeAttributes = new InputMap<string>());
            set => _computeAttributes = value;
        }

        /// <summary>
        /// Unique identifier for the interface.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Identifier of this interface local to the host.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// IP address associated with the interface.
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// MAC address associated with the interface.
        /// </summary>
        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// Whether or not this interface is managed by Foreman.
        /// </summary>
        [Input("managed")]
        public Input<bool>? Managed { get; set; }

        /// <summary>
        /// Name of the interface
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Associated password used for BMC/IPMI functionality.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether or not this is the primary interface.
        /// </summary>
        [Input("primary")]
        public Input<bool>? Primary { get; set; }

        /// <summary>
        /// Whether or not this interface is used to provision the host.
        /// </summary>
        [Input("provision")]
        public Input<bool>? Provision { get; set; }

        /// <summary>
        /// ID of the subnet to associate with this interface.
        /// </summary>
        [Input("subnetId")]
        public Input<int>? SubnetId { get; set; }

        /// <summary>
        /// The type of interface. Values include: `"interface"`, `"bmc"`, `"bond"`, `"bridge"`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Username used for BMC/IPMI functionality.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Whether or not this is a virtual interface.
        /// </summary>
        [Input("virtual")]
        public Input<bool>? Virtual { get; set; }

        public HostInterfacesAttributeArgs()
        {
        }
        public static new HostInterfacesAttributeArgs Empty => new HostInterfacesAttributeArgs();
    }
}
