// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/computeresource:Computeresource")]
    public partial class Computeresource : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY Foreman representation of computeresource. ComputeResources serve as an identification string that defines
        /// autonomy, authority, or control for a portion of a network.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// For VMware only
        /// </summary>
        [Output("cachingenabled")]
        public Output<bool?> Cachingenabled { get; private set; } = null!;

        /// <summary>
        /// For oVirt, VMware Datacenter
        /// </summary>
        [Output("datacenter")]
        public Output<string?> Datacenter { get; private set; } = null!;

        /// <summary>
        /// Description of the compute resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// For Libvirt: "VNC" or "SPICE". For VMWare: "VNC" or "VMRC"
        /// </summary>
        [Output("displaytype")]
        public Output<string?> Displaytype { get; private set; } = null!;

        /// <summary>
        /// The HyperVisor/Cloud Provider for this Compute Resource:supported providers include "Libvirt", "Ovirt", "EC2","Vmware",
        /// "Openstack", "Rackspace", "GCE"
        /// </summary>
        [Output("hypervisor")]
        public Output<string> Hypervisor { get; private set; } = null!;

        /// <summary>
        /// Name of the compute resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Password for oVirt, EC2, VMware, OpenStack. Secret key for EC2
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// For VMware
        /// </summary>
        [Output("server")]
        public Output<string?> Server { get; private set; } = null!;

        /// <summary>
        /// For Libvirt and VMware only
        /// </summary>
        [Output("setconsolepassword")]
        public Output<bool?> Setconsolepassword { get; private set; } = null!;

        /// <summary>
        /// URL for Libvirt, oVirt, OpenStack and Rackspace
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Username for oVirt, EC2, VMware, OpenStack. Access Key for EC2.
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;


        /// <summary>
        /// Create a Computeresource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Computeresource(string name, ComputeresourceArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/computeresource:Computeresource", name, args ?? new ComputeresourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Computeresource(string name, Input<string> id, ComputeresourceState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/computeresource:Computeresource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Computeresource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Computeresource Get(string name, Input<string> id, ComputeresourceState? state = null, CustomResourceOptions? options = null)
        {
            return new Computeresource(name, id, state, options);
        }
    }

    public sealed class ComputeresourceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// For VMware only
        /// </summary>
        [Input("cachingenabled")]
        public Input<bool>? Cachingenabled { get; set; }

        /// <summary>
        /// For oVirt, VMware Datacenter
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Description of the compute resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// For Libvirt: "VNC" or "SPICE". For VMWare: "VNC" or "VMRC"
        /// </summary>
        [Input("displaytype")]
        public Input<string>? Displaytype { get; set; }

        /// <summary>
        /// The HyperVisor/Cloud Provider for this Compute Resource:supported providers include "Libvirt", "Ovirt", "EC2","Vmware",
        /// "Openstack", "Rackspace", "GCE"
        /// </summary>
        [Input("hypervisor", required: true)]
        public Input<string> Hypervisor { get; set; } = null!;

        /// <summary>
        /// Name of the compute resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for oVirt, EC2, VMware, OpenStack. Secret key for EC2
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// For VMware
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// For Libvirt and VMware only
        /// </summary>
        [Input("setconsolepassword")]
        public Input<bool>? Setconsolepassword { get; set; }

        /// <summary>
        /// URL for Libvirt, oVirt, OpenStack and Rackspace
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Username for oVirt, EC2, VMware, OpenStack. Access Key for EC2.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ComputeresourceArgs()
        {
        }
        public static new ComputeresourceArgs Empty => new ComputeresourceArgs();
    }

    public sealed class ComputeresourceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY Foreman representation of computeresource. ComputeResources serve as an identification string that defines
        /// autonomy, authority, or control for a portion of a network.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// For VMware only
        /// </summary>
        [Input("cachingenabled")]
        public Input<bool>? Cachingenabled { get; set; }

        /// <summary>
        /// For oVirt, VMware Datacenter
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// Description of the compute resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// For Libvirt: "VNC" or "SPICE". For VMWare: "VNC" or "VMRC"
        /// </summary>
        [Input("displaytype")]
        public Input<string>? Displaytype { get; set; }

        /// <summary>
        /// The HyperVisor/Cloud Provider for this Compute Resource:supported providers include "Libvirt", "Ovirt", "EC2","Vmware",
        /// "Openstack", "Rackspace", "GCE"
        /// </summary>
        [Input("hypervisor")]
        public Input<string>? Hypervisor { get; set; }

        /// <summary>
        /// Name of the compute resource
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password for oVirt, EC2, VMware, OpenStack. Secret key for EC2
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// For VMware
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// For Libvirt and VMware only
        /// </summary>
        [Input("setconsolepassword")]
        public Input<bool>? Setconsolepassword { get; set; }

        /// <summary>
        /// URL for Libvirt, oVirt, OpenStack and Rackspace
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username for oVirt, EC2, VMware, OpenStack. Access Key for EC2.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ComputeresourceState()
        {
        }
        public static new ComputeresourceState Empty => new ComputeresourceState();
    }
}
