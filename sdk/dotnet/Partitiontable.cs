// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/partitiontable:Partitiontable")]
    public partial class Partitiontable : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY The disk partition layout of the host.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
        /// document the template changes.
        /// </summary>
        [Output("auditComment")]
        public Output<string?> AuditComment { get; private set; } = null!;

        /// <summary>
        /// Description of the partition table
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// IDs of the hosts associated with this partition table.
        /// </summary>
        [Output("hostIds")]
        public Output<ImmutableArray<int>> HostIds { get; private set; } = null!;

        /// <summary>
        /// IDs of the hostgroups associated with this partition table.
        /// </summary>
        [Output("hostgroupIds")]
        public Output<ImmutableArray<int>> HostgroupIds { get; private set; } = null!;

        /// <summary>
        /// The script that defines the partition table layout. @EXAMPLE "void"
        /// </summary>
        [Output("layout")]
        public Output<string> Layout { get; private set; } = null!;

        /// <summary>
        /// Whether or not this partition table is locked for editing.
        /// </summary>
        [Output("locked")]
        public Output<bool?> Locked { get; private set; } = null!;

        /// <summary>
        /// The name of the partition table. @EXAMPLE "AutoYaST LVM"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// IDs of the operating system associated with this partition table.
        /// </summary>
        [Output("operatingsystemIds")]
        public Output<ImmutableArray<int>> OperatingsystemIds { get; private set; } = null!;

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Output("osFamily")]
        public Output<string?> OsFamily { get; private set; } = null!;

        /// <summary>
        /// Whether or not this partition table is a snippet to be embedded in other partition tables.
        /// </summary>
        [Output("snippet")]
        public Output<bool?> Snippet { get; private set; } = null!;


        /// <summary>
        /// Create a Partitiontable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Partitiontable(string name, PartitiontableArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/partitiontable:Partitiontable", name, args ?? new PartitiontableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Partitiontable(string name, Input<string> id, PartitiontableState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/partitiontable:Partitiontable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Partitiontable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Partitiontable Get(string name, Input<string> id, PartitiontableState? state = null, CustomResourceOptions? options = null)
        {
            return new Partitiontable(name, id, state, options);
        }
    }

    public sealed class PartitiontableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
        /// document the template changes.
        /// </summary>
        [Input("auditComment")]
        public Input<string>? AuditComment { get; set; }

        /// <summary>
        /// Description of the partition table
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hostIds")]
        private InputList<int>? _hostIds;

        /// <summary>
        /// IDs of the hosts associated with this partition table.
        /// </summary>
        public InputList<int> HostIds
        {
            get => _hostIds ?? (_hostIds = new InputList<int>());
            set => _hostIds = value;
        }

        [Input("hostgroupIds")]
        private InputList<int>? _hostgroupIds;

        /// <summary>
        /// IDs of the hostgroups associated with this partition table.
        /// </summary>
        public InputList<int> HostgroupIds
        {
            get => _hostgroupIds ?? (_hostgroupIds = new InputList<int>());
            set => _hostgroupIds = value;
        }

        /// <summary>
        /// The script that defines the partition table layout. @EXAMPLE "void"
        /// </summary>
        [Input("layout", required: true)]
        public Input<string> Layout { get; set; } = null!;

        /// <summary>
        /// Whether or not this partition table is locked for editing.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// The name of the partition table. @EXAMPLE "AutoYaST LVM"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingsystemIds")]
        private InputList<int>? _operatingsystemIds;

        /// <summary>
        /// IDs of the operating system associated with this partition table.
        /// </summary>
        public InputList<int> OperatingsystemIds
        {
            get => _operatingsystemIds ?? (_operatingsystemIds = new InputList<int>());
            set => _operatingsystemIds = value;
        }

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// Whether or not this partition table is a snippet to be embedded in other partition tables.
        /// </summary>
        [Input("snippet")]
        public Input<bool>? Snippet { get; set; }

        public PartitiontableArgs()
        {
        }
        public static new PartitiontableArgs Empty => new PartitiontableArgs();
    }

    public sealed class PartitiontableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY The disk partition layout of the host.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
        /// document the template changes.
        /// </summary>
        [Input("auditComment")]
        public Input<string>? AuditComment { get; set; }

        /// <summary>
        /// Description of the partition table
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hostIds")]
        private InputList<int>? _hostIds;

        /// <summary>
        /// IDs of the hosts associated with this partition table.
        /// </summary>
        public InputList<int> HostIds
        {
            get => _hostIds ?? (_hostIds = new InputList<int>());
            set => _hostIds = value;
        }

        [Input("hostgroupIds")]
        private InputList<int>? _hostgroupIds;

        /// <summary>
        /// IDs of the hostgroups associated with this partition table.
        /// </summary>
        public InputList<int> HostgroupIds
        {
            get => _hostgroupIds ?? (_hostgroupIds = new InputList<int>());
            set => _hostgroupIds = value;
        }

        /// <summary>
        /// The script that defines the partition table layout. @EXAMPLE "void"
        /// </summary>
        [Input("layout")]
        public Input<string>? Layout { get; set; }

        /// <summary>
        /// Whether or not this partition table is locked for editing.
        /// </summary>
        [Input("locked")]
        public Input<bool>? Locked { get; set; }

        /// <summary>
        /// The name of the partition table. @EXAMPLE "AutoYaST LVM"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingsystemIds")]
        private InputList<int>? _operatingsystemIds;

        /// <summary>
        /// IDs of the operating system associated with this partition table.
        /// </summary>
        public InputList<int> OperatingsystemIds
        {
            get => _operatingsystemIds ?? (_operatingsystemIds = new InputList<int>());
            set => _operatingsystemIds = value;
        }

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// Whether or not this partition table is a snippet to be embedded in other partition tables.
        /// </summary>
        [Input("snippet")]
        public Input<bool>? Snippet { get; set; }

        public PartitiontableState()
        {
        }
        public static new PartitiontableState Empty => new PartitiontableState();
    }
}
