// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    public static class GetSubnet
    {
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("foreman:index/getSubnet:getSubnet", args ?? new GetSubnetArgs(), options.WithDefaults());

        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("foreman:index/getSubnet:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());

        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("foreman:index/getSubnet:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("network")]
        public string? Network { get; set; }

        public GetSubnetArgs()
        {
        }
        public static new GetSubnetArgs Empty => new GetSubnetArgs();
    }

    public sealed class GetSubnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("network")]
        public Input<string>? Network { get; set; }

        public GetSubnetInvokeArgs()
        {
        }
        public static new GetSubnetInvokeArgs Empty => new GetSubnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        public readonly bool __meta_;
        public readonly int BmcId;
        public readonly string BootMode;
        public readonly string Description;
        public readonly int DhcpId;
        public readonly string DnsPrimary;
        public readonly string DnsSecondary;
        public readonly ImmutableArray<int> DomainIds;
        public readonly string From;
        public readonly string Gateway;
        public readonly int HttpbootId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Ipam;
        public readonly string Mask;
        public readonly int Mtu;
        public readonly string? Name;
        public readonly string? Network;
        public readonly string NetworkAddress;
        public readonly string NetworkType;
        public readonly int TemplateId;
        public readonly int TftpId;
        public readonly string To;
        public readonly int Vlanid;

        [OutputConstructor]
        private GetSubnetResult(
            bool __meta_,

            int bmcId,

            string bootMode,

            string description,

            int dhcpId,

            string dnsPrimary,

            string dnsSecondary,

            ImmutableArray<int> domainIds,

            string from,

            string gateway,

            int httpbootId,

            string id,

            string ipam,

            string mask,

            int mtu,

            string? name,

            string? network,

            string networkAddress,

            string networkType,

            int templateId,

            int tftpId,

            string to,

            int vlanid)
        {
            this.__meta_ = __meta_;
            BmcId = bmcId;
            BootMode = bootMode;
            Description = description;
            DhcpId = dhcpId;
            DnsPrimary = dnsPrimary;
            DnsSecondary = dnsSecondary;
            DomainIds = domainIds;
            From = from;
            Gateway = gateway;
            HttpbootId = httpbootId;
            Id = id;
            Ipam = ipam;
            Mask = mask;
            Mtu = mtu;
            Name = name;
            Network = network;
            NetworkAddress = networkAddress;
            NetworkType = networkType;
            TemplateId = templateId;
            TftpId = tftpId;
            To = to;
            Vlanid = vlanid;
        }
    }
}
