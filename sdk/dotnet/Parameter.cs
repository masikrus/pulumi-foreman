// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/parameter:Parameter")]
    public partial class Parameter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY Foreman representation of parameter. Parameters serve as an identification string that defines autonomy,
        /// authority, or control for a portion of a network.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// ID of the domain to assign this parameter to
        /// </summary>
        [Output("domainId")]
        public Output<int?> DomainId { get; private set; } = null!;

        /// <summary>
        /// ID of the host to assign this parameter to
        /// </summary>
        [Output("hostId")]
        public Output<int?> HostId { get; private set; } = null!;

        /// <summary>
        /// ID of the host group to assign this parameter to
        /// </summary>
        [Output("hostgroupId")]
        public Output<int?> HostgroupId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the operating system to assign this parameter to
        /// </summary>
        [Output("operatingsystemId")]
        public Output<int?> OperatingsystemId { get; private set; } = null!;

        /// <summary>
        /// ID of the subnet to assign this parameter to
        /// </summary>
        [Output("subnetId")]
        public Output<int?> SubnetId { get; private set; } = null!;

        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a Parameter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Parameter(string name, ParameterArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/parameter:Parameter", name, args ?? new ParameterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Parameter(string name, Input<string> id, ParameterState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/parameter:Parameter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Parameter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Parameter Get(string name, Input<string> id, ParameterState? state = null, CustomResourceOptions? options = null)
        {
            return new Parameter(name, id, state, options);
        }
    }

    public sealed class ParameterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the domain to assign this parameter to
        /// </summary>
        [Input("domainId")]
        public Input<int>? DomainId { get; set; }

        /// <summary>
        /// ID of the host to assign this parameter to
        /// </summary>
        [Input("hostId")]
        public Input<int>? HostId { get; set; }

        /// <summary>
        /// ID of the host group to assign this parameter to
        /// </summary>
        [Input("hostgroupId")]
        public Input<int>? HostgroupId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the operating system to assign this parameter to
        /// </summary>
        [Input("operatingsystemId")]
        public Input<int>? OperatingsystemId { get; set; }

        /// <summary>
        /// ID of the subnet to assign this parameter to
        /// </summary>
        [Input("subnetId")]
        public Input<int>? SubnetId { get; set; }

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ParameterArgs()
        {
        }
        public static new ParameterArgs Empty => new ParameterArgs();
    }

    public sealed class ParameterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY Foreman representation of parameter. Parameters serve as an identification string that defines autonomy,
        /// authority, or control for a portion of a network.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// ID of the domain to assign this parameter to
        /// </summary>
        [Input("domainId")]
        public Input<int>? DomainId { get; set; }

        /// <summary>
        /// ID of the host to assign this parameter to
        /// </summary>
        [Input("hostId")]
        public Input<int>? HostId { get; set; }

        /// <summary>
        /// ID of the host group to assign this parameter to
        /// </summary>
        [Input("hostgroupId")]
        public Input<int>? HostgroupId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the operating system to assign this parameter to
        /// </summary>
        [Input("operatingsystemId")]
        public Input<int>? OperatingsystemId { get; set; }

        /// <summary>
        /// ID of the subnet to assign this parameter to
        /// </summary>
        [Input("subnetId")]
        public Input<int>? SubnetId { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        public ParameterState()
        {
        }
        public static new ParameterState Empty => new ParameterState();
    }
}
