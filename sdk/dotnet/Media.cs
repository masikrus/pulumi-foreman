// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/media:Media")]
    public partial class Media : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY Remote installation media.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// Name of the media. @EXAMPLE "CentOS mirror"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// IDs of the operating systems associated with this media.
        /// </summary>
        [Output("operatingsystemIds")]
        public Output<ImmutableArray<int>> OperatingsystemIds { get; private set; } = null!;

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Output("osFamily")]
        public Output<string?> OsFamily { get; private set; } = null!;

        /// <summary>
        /// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
        /// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
        /// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
        /// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;


        /// <summary>
        /// Create a Media resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Media(string name, MediaArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/media:Media", name, args ?? new MediaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Media(string name, Input<string> id, MediaState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/media:Media", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Media resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Media Get(string name, Input<string> id, MediaState? state = null, CustomResourceOptions? options = null)
        {
            return new Media(name, id, state, options);
        }
    }

    public sealed class MediaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the media. @EXAMPLE "CentOS mirror"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingsystemIds")]
        private InputList<int>? _operatingsystemIds;

        /// <summary>
        /// IDs of the operating systems associated with this media.
        /// </summary>
        public InputList<int> OperatingsystemIds
        {
            get => _operatingsystemIds ?? (_operatingsystemIds = new InputList<int>());
            set => _operatingsystemIds = value;
        }

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
        /// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
        /// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
        /// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public MediaArgs()
        {
        }
        public static new MediaArgs Empty => new MediaArgs();
    }

    public sealed class MediaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY Remote installation media.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// Name of the media. @EXAMPLE "CentOS mirror"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingsystemIds")]
        private InputList<int>? _operatingsystemIds;

        /// <summary>
        /// IDs of the operating systems associated with this media.
        /// </summary>
        public InputList<int> OperatingsystemIds
        {
            get => _operatingsystemIds ?? (_operatingsystemIds = new InputList<int>());
            set => _operatingsystemIds = value;
        }

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Input("osFamily")]
        public Input<string>? OsFamily { get; set; }

        /// <summary>
        /// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
        /// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
        /// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
        /// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        public MediaState()
        {
        }
        public static new MediaState Empty => new MediaState();
    }
}
