// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Foreman
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("foreman");

        private static readonly __Value<bool?> _clientAuthNegotiate = new __Value<bool?>(() => __config.GetBoolean("clientAuthNegotiate"));
        /// <summary>
        /// Whether or not the client should try to authenticate through the HTTP negotiate mechanism. Defaults to `false`.
        /// </summary>
        public static bool? ClientAuthNegotiate
        {
            get => _clientAuthNegotiate.Get();
            set => _clientAuthNegotiate.Set(value);
        }

        private static readonly __Value<string?> _clientPassword = new __Value<string?>(() => __config.Get("clientPassword") ?? Utilities.GetEnv("FOREMAN_CLIENT_PASSWORD"));
        /// <summary>
        /// The username to authenticate against Foreman. This can also be set through the environment variable
        /// `FOREMAN_CLIENT_PASSWORD`. Defaults to `""`.
        /// </summary>
        public static string? ClientPassword
        {
            get => _clientPassword.Get();
            set => _clientPassword.Set(value);
        }

        private static readonly __Value<bool?> _clientTlsInsecure = new __Value<bool?>(() => __config.GetBoolean("clientTlsInsecure"));
        /// <summary>
        /// Whether or not to verify the server's certificate. Defaults to `false`.
        /// </summary>
        public static bool? ClientTlsInsecure
        {
            get => _clientTlsInsecure.Get();
            set => _clientTlsInsecure.Set(value);
        }

        private static readonly __Value<string?> _clientUsername = new __Value<string?>(() => __config.Get("clientUsername") ?? Utilities.GetEnv("FOREMAN_CLIENT_USERNAME"));
        /// <summary>
        /// The username to authenticate against Foreman. This can also be set through the environment variable
        /// `FOREMAN_CLIENT_USERNAME`. Defaults to `""`.
        /// </summary>
        public static string? ClientUsername
        {
            get => _clientUsername.Get();
            set => _clientUsername.Set(value);
        }

        private static readonly __Value<int?> _locationId = new __Value<int?>(() => __config.GetInt32("locationId") ?? Utilities.GetEnvInt32("FOREMAN_LOCATION_ID"));
        /// <summary>
        /// The location for all resources requested and created by the providerDefaults to "0". Set organization_id and location_id
        /// to a value &lt; 0 if you need to disable Locations and Organizations on Foreman older than 1.21
        /// </summary>
        public static int? LocationId
        {
            get => _locationId.Get();
            set => _locationId.Set(value);
        }

        private static readonly __Value<int?> _organizationId = new __Value<int?>(() => __config.GetInt32("organizationId") ?? Utilities.GetEnvInt32("FOREMAN_ORGANIZATION_ID"));
        /// <summary>
        /// The organization for all resource requested and created by the Provider Defaults to "0". Set organization_id and
        /// location_id to a value &lt; 0 if you need to disable Locations and Organizations on Foreman older than 1.21
        /// </summary>
        public static int? OrganizationId
        {
            get => _organizationId.Get();
            set => _organizationId.Set(value);
        }

        private static readonly __Value<string?> _providerLogfile = new __Value<string?>(() => __config.Get("providerLogfile"));
        public static string? ProviderLogfile
        {
            get => _providerLogfile.Get();
            set => _providerLogfile.Set(value);
        }

        private static readonly __Value<string?> _providerLoglevel = new __Value<string?>(() => __config.Get("providerLoglevel"));
        /// <summary>
        /// The level of verbosity for the provider's log file. This setting determines which types of log messages are written and
        /// which are ignored. Possible values (from most verbose to least verbose) include 'DEBUG', 'TRACE', 'INFO', 'WARNING',
        /// 'ERROR', and 'NONE'. The provider's logs will be written to the location specified by `provider_logfile`. This can also
        /// be set through the environment variable `FOREMAN_PROVIDER_LOGLEVEL`. Defaults to `'INFO'`.
        /// </summary>
        public static string? ProviderLoglevel
        {
            get => _providerLoglevel.Get();
            set => _providerLoglevel.Set(value);
        }

        private static readonly __Value<string?> _serverHostname = new __Value<string?>(() => __config.Get("serverHostname") ?? Utilities.GetEnv("FOREMAN_SERVER_HOSTNAME"));
        /// <summary>
        /// The hostname / IP address of the Foreman REST API server
        /// </summary>
        public static string? ServerHostname
        {
            get => _serverHostname.Get();
            set => _serverHostname.Set(value);
        }

        private static readonly __Value<string?> _serverProtocol = new __Value<string?>(() => __config.Get("serverProtocol") ?? Utilities.GetEnv("FOREMAN_PROTOCOL"));
        /// <summary>
        /// The protocol the Foreman REST API server is using for communication. Defaults to `"https"`.
        /// </summary>
        public static string? ServerProtocol
        {
            get => _serverProtocol.Get();
            set => _serverProtocol.Set(value);
        }

    }
}
