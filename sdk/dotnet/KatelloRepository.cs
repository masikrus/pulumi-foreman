// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/katelloRepository:KatelloRepository")]
    public partial class KatelloRepository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY Repository
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// Contents of requirement yaml file to sync from URL.@EXAMPLE
        /// </summary>
        [Output("ansibleCollectionRequirements")]
        public Output<string?> AnsibleCollectionRequirements { get; private set; } = null!;

        /// <summary>
        /// Checksum of the repository, currently 'sha1' &amp; 'sha256' are supported@EXAMPLE "sha256"
        /// </summary>
        [Output("checksumType")]
        public Output<string?> ChecksumType { get; private set; } = null!;

        /// <summary>
        /// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
        /// `"ansible_collection"`.@EXAMPLE "yum"
        /// </summary>
        [Output("contentType")]
        public Output<string> ContentType { get; private set; } = null!;

        /// <summary>
        /// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Output("debArchitectures")]
        public Output<string?> DebArchitectures { get; private set; } = null!;

        /// <summary>
        /// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Output("debComponents")]
        public Output<string?> DebComponents { get; private set; } = null!;

        /// <summary>
        /// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Output("debReleases")]
        public Output<string?> DebReleases { get; private set; } = null!;

        /// <summary>
        /// Repository description.@EXAMPLE "A repository description"
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        /// </summary>
        [Output("dockerTagsWhitelist")]
        public Output<string?> DockerTagsWhitelist { get; private set; } = null!;

        /// <summary>
        /// Name of the upstream docker repository@EXAMPLE
        /// </summary>
        [Output("dockerUpstreamName")]
        public Output<string?> DockerUpstreamName { get; private set; } = null!;

        /// <summary>
        /// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
        /// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        /// </summary>
        [Output("downloadConcurrency")]
        public Output<int?> DownloadConcurrency { get; private set; } = null!;

        /// <summary>
        /// Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        /// </summary>
        [Output("downloadPolicy")]
        public Output<string?> DownloadPolicy { get; private set; } = null!;

        /// <summary>
        /// Identifier of the GPG key.@EXAMPLE
        /// </summary>
        [Output("gpgKeyId")]
        public Output<int?> GpgKeyId { get; private set; } = null!;

        /// <summary>
        /// ID of a HTTP Proxy.@EXAMPLE
        /// </summary>
        [Output("httpProxyId")]
        public Output<int?> HttpProxyId { get; private set; } = null!;

        /// <summary>
        /// Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
        /// "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        /// </summary>
        [Output("httpProxyPolicy")]
        public Output<string?> HttpProxyPolicy { get; private set; } = null!;

        /// <summary>
        /// List of content units to ignore while syncing a yum repository. Must be subset of
        /// rpm,drpm,srpm,distribution,erratum@EXAMPLE
        /// </summary>
        [Output("ignorableContent")]
        public Output<string?> IgnorableContent { get; private set; } = null!;

        /// <summary>
        /// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        /// </summary>
        [Output("ignoreGlobalProxy")]
        public Output<bool?> IgnoreGlobalProxy { get; private set; } = null!;

        /// <summary>
        /// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        /// </summary>
        [Output("label")]
        public Output<string> Label { get; private set; } = null!;

        /// <summary>
        /// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        /// </summary>
        [Output("mirrorOnSync")]
        public Output<bool?> MirrorOnSync { get; private set; } = null!;

        /// <summary>
        /// Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        /// </summary>
        [Output("mirroringPolicy")]
        public Output<string?> MirroringPolicy { get; private set; } = null!;

        /// <summary>
        /// Repository name.@EXAMPLE "My Repository"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Product the repository belongs to.@EXAMPLE
        /// </summary>
        [Output("productId")]
        public Output<int> ProductId { get; private set; } = null!;

        /// <summary>
        /// true if this repository can be published via HTTP.@EXAMPLE true
        /// </summary>
        [Output("unprotected")]
        public Output<bool?> Unprotected { get; private set; } = null!;

        /// <summary>
        /// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        /// </summary>
        [Output("upstreamPassword")]
        public Output<string?> UpstreamPassword { get; private set; } = null!;

        /// <summary>
        /// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        /// </summary>
        [Output("upstreamUsername")]
        public Output<string?> UpstreamUsername { get; private set; } = null!;

        /// <summary>
        /// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        /// </summary>
        [Output("verifySslOnSync")]
        public Output<bool?> VerifySslOnSync { get; private set; } = null!;


        /// <summary>
        /// Create a KatelloRepository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KatelloRepository(string name, KatelloRepositoryArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/katelloRepository:KatelloRepository", name, args ?? new KatelloRepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KatelloRepository(string name, Input<string> id, KatelloRepositoryState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/katelloRepository:KatelloRepository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KatelloRepository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KatelloRepository Get(string name, Input<string> id, KatelloRepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new KatelloRepository(name, id, state, options);
        }
    }

    public sealed class KatelloRepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Contents of requirement yaml file to sync from URL.@EXAMPLE
        /// </summary>
        [Input("ansibleCollectionRequirements")]
        public Input<string>? AnsibleCollectionRequirements { get; set; }

        /// <summary>
        /// Checksum of the repository, currently 'sha1' &amp; 'sha256' are supported@EXAMPLE "sha256"
        /// </summary>
        [Input("checksumType")]
        public Input<string>? ChecksumType { get; set; }

        /// <summary>
        /// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
        /// `"ansible_collection"`.@EXAMPLE "yum"
        /// </summary>
        [Input("contentType", required: true)]
        public Input<string> ContentType { get; set; } = null!;

        /// <summary>
        /// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Input("debArchitectures")]
        public Input<string>? DebArchitectures { get; set; }

        /// <summary>
        /// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Input("debComponents")]
        public Input<string>? DebComponents { get; set; }

        /// <summary>
        /// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Input("debReleases")]
        public Input<string>? DebReleases { get; set; }

        /// <summary>
        /// Repository description.@EXAMPLE "A repository description"
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        /// </summary>
        [Input("dockerTagsWhitelist")]
        public Input<string>? DockerTagsWhitelist { get; set; }

        /// <summary>
        /// Name of the upstream docker repository@EXAMPLE
        /// </summary>
        [Input("dockerUpstreamName")]
        public Input<string>? DockerUpstreamName { get; set; }

        /// <summary>
        /// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
        /// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        /// </summary>
        [Input("downloadConcurrency")]
        public Input<int>? DownloadConcurrency { get; set; }

        /// <summary>
        /// Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        /// </summary>
        [Input("downloadPolicy")]
        public Input<string>? DownloadPolicy { get; set; }

        /// <summary>
        /// Identifier of the GPG key.@EXAMPLE
        /// </summary>
        [Input("gpgKeyId")]
        public Input<int>? GpgKeyId { get; set; }

        /// <summary>
        /// ID of a HTTP Proxy.@EXAMPLE
        /// </summary>
        [Input("httpProxyId")]
        public Input<int>? HttpProxyId { get; set; }

        /// <summary>
        /// Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
        /// "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        /// </summary>
        [Input("httpProxyPolicy")]
        public Input<string>? HttpProxyPolicy { get; set; }

        /// <summary>
        /// List of content units to ignore while syncing a yum repository. Must be subset of
        /// rpm,drpm,srpm,distribution,erratum@EXAMPLE
        /// </summary>
        [Input("ignorableContent")]
        public Input<string>? IgnorableContent { get; set; }

        /// <summary>
        /// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        /// </summary>
        [Input("ignoreGlobalProxy")]
        public Input<bool>? IgnoreGlobalProxy { get; set; }

        /// <summary>
        /// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        /// </summary>
        [Input("mirrorOnSync")]
        public Input<bool>? MirrorOnSync { get; set; }

        /// <summary>
        /// Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        /// </summary>
        [Input("mirroringPolicy")]
        public Input<string>? MirroringPolicy { get; set; }

        /// <summary>
        /// Repository name.@EXAMPLE "My Repository"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Product the repository belongs to.@EXAMPLE
        /// </summary>
        [Input("productId", required: true)]
        public Input<int> ProductId { get; set; } = null!;

        /// <summary>
        /// true if this repository can be published via HTTP.@EXAMPLE true
        /// </summary>
        [Input("unprotected")]
        public Input<bool>? Unprotected { get; set; }

        /// <summary>
        /// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        /// </summary>
        [Input("upstreamPassword")]
        public Input<string>? UpstreamPassword { get; set; }

        /// <summary>
        /// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        /// </summary>
        [Input("upstreamUsername")]
        public Input<string>? UpstreamUsername { get; set; }

        /// <summary>
        /// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        /// </summary>
        [Input("verifySslOnSync")]
        public Input<bool>? VerifySslOnSync { get; set; }

        public KatelloRepositoryArgs()
        {
        }
        public static new KatelloRepositoryArgs Empty => new KatelloRepositoryArgs();
    }

    public sealed class KatelloRepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY Repository
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// Contents of requirement yaml file to sync from URL.@EXAMPLE
        /// </summary>
        [Input("ansibleCollectionRequirements")]
        public Input<string>? AnsibleCollectionRequirements { get; set; }

        /// <summary>
        /// Checksum of the repository, currently 'sha1' &amp; 'sha256' are supported@EXAMPLE "sha256"
        /// </summary>
        [Input("checksumType")]
        public Input<string>? ChecksumType { get; set; }

        /// <summary>
        /// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
        /// `"ansible_collection"`.@EXAMPLE "yum"
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Input("debArchitectures")]
        public Input<string>? DebArchitectures { get; set; }

        /// <summary>
        /// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Input("debComponents")]
        public Input<string>? DebComponents { get; set; }

        /// <summary>
        /// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
        /// </summary>
        [Input("debReleases")]
        public Input<string>? DebReleases { get; set; }

        /// <summary>
        /// Repository description.@EXAMPLE "A repository description"
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
        /// </summary>
        [Input("dockerTagsWhitelist")]
        public Input<string>? DockerTagsWhitelist { get; set; }

        /// <summary>
        /// Name of the upstream docker repository@EXAMPLE
        /// </summary>
        [Input("dockerUpstreamName")]
        public Input<string>? DockerUpstreamName { get; set; }

        /// <summary>
        /// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
        /// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
        /// </summary>
        [Input("downloadConcurrency")]
        public Input<int>? DownloadConcurrency { get; set; }

        /// <summary>
        /// Product the repository belongs to. Valid values include:`"immediate"`, "on_demand"`, "background"`.@EXAMPLE "immediate"
        /// </summary>
        [Input("downloadPolicy")]
        public Input<string>? DownloadPolicy { get; set; }

        /// <summary>
        /// Identifier of the GPG key.@EXAMPLE
        /// </summary>
        [Input("gpgKeyId")]
        public Input<int>? GpgKeyId { get; set; }

        /// <summary>
        /// ID of a HTTP Proxy.@EXAMPLE
        /// </summary>
        [Input("httpProxyId")]
        public Input<int>? HttpProxyId { get; set; }

        /// <summary>
        /// Policies for HTTP proxy for content sync. Valid values include:`"global_default_http_proxy"`, "none"`,
        /// "use_selected_http_proxy"`.@EXAMPLE "global_default_http_proxy"
        /// </summary>
        [Input("httpProxyPolicy")]
        public Input<string>? HttpProxyPolicy { get; set; }

        /// <summary>
        /// List of content units to ignore while syncing a yum repository. Must be subset of
        /// rpm,drpm,srpm,distribution,erratum@EXAMPLE
        /// </summary>
        [Input("ignorableContent")]
        public Input<string>? IgnorableContent { get; set; }

        /// <summary>
        /// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
        /// </summary>
        [Input("ignoreGlobalProxy")]
        public Input<bool>? IgnoreGlobalProxy { get; set; }

        /// <summary>
        /// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
        /// </summary>
        [Input("label")]
        public Input<string>? Label { get; set; }

        /// <summary>
        /// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
        /// </summary>
        [Input("mirrorOnSync")]
        public Input<bool>? MirrorOnSync { get; set; }

        /// <summary>
        /// Mirroring policy for this repo. Values: "mirror_content_only" or "additive". @EXAMPLE "mirror_content_only"
        /// </summary>
        [Input("mirroringPolicy")]
        public Input<string>? MirroringPolicy { get; set; }

        /// <summary>
        /// Repository name.@EXAMPLE "My Repository"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Product the repository belongs to.@EXAMPLE
        /// </summary>
        [Input("productId")]
        public Input<int>? ProductId { get; set; }

        /// <summary>
        /// true if this repository can be published via HTTP.@EXAMPLE true
        /// </summary>
        [Input("unprotected")]
        public Input<bool>? Unprotected { get; set; }

        /// <summary>
        /// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
        /// </summary>
        [Input("upstreamPassword")]
        public Input<string>? UpstreamPassword { get; set; }

        /// <summary>
        /// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
        /// </summary>
        [Input("upstreamUsername")]
        public Input<string>? UpstreamUsername { get; set; }

        /// <summary>
        /// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
        /// </summary>
        [Input("verifySslOnSync")]
        public Input<bool>? VerifySslOnSync { get; set; }

        public KatelloRepositoryState()
        {
        }
        public static new KatelloRepositoryState Empty => new KatelloRepositoryState();
    }
}
