// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY User can be used to allow access to foreman.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// If the user is allow admin privileges
        /// </summary>
        [Output("admin")]
        public Output<bool?> Admin { get; private set; } = null!;

        /// <summary>
        /// Set the authentication source, i.e internal (1,default) or external (2)
        /// </summary>
        [Output("authSourceId")]
        public Output<int?> AuthSourceId { get; private set; } = null!;

        /// <summary>
        /// Default location for the user, if empty takes global default
        /// </summary>
        [Output("defaultLocationId")]
        public Output<int?> DefaultLocationId { get; private set; } = null!;

        /// <summary>
        /// Default organization for the user, if empty takes global default
        /// </summary>
        [Output("defaultOrganizationId")]
        public Output<int?> DefaultOrganizationId { get; private set; } = null!;

        /// <summary>
        /// Description of user
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// First name of the user
        /// </summary>
        [Output("firstname")]
        public Output<string?> Firstname { get; private set; } = null!;

        /// <summary>
        /// Last name of user
        /// </summary>
        [Output("lastname")]
        public Output<string?> Lastname { get; private set; } = null!;

        /// <summary>
        /// Sets the timezone/location of a user
        /// </summary>
        [Output("locale")]
        public Output<string?> Locale { get; private set; } = null!;

        /// <summary>
        /// List of all locations a user has access to
        /// </summary>
        [Output("locationIds")]
        public Output<ImmutableArray<int>> LocationIds { get; private set; } = null!;

        /// <summary>
        /// Username used for logging-in
        /// </summary>
        [Output("login")]
        public Output<string> Login { get; private set; } = null!;

        /// <summary>
        /// Email of user
        /// </summary>
        [Output("mail")]
        public Output<string?> Mail { get; private set; } = null!;

        /// <summary>
        /// List of all organizations a user has access to
        /// </summary>
        [Output("organizationIds")]
        public Output<ImmutableArray<int>> OrganizationIds { get; private set; } = null!;

        /// <summary>
        /// Password of user, required if auth_source_id is 1 (internal)
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If the user is allow admin privileges
        /// </summary>
        [Input("admin")]
        public Input<bool>? Admin { get; set; }

        /// <summary>
        /// Set the authentication source, i.e internal (1,default) or external (2)
        /// </summary>
        [Input("authSourceId")]
        public Input<int>? AuthSourceId { get; set; }

        /// <summary>
        /// Default location for the user, if empty takes global default
        /// </summary>
        [Input("defaultLocationId")]
        public Input<int>? DefaultLocationId { get; set; }

        /// <summary>
        /// Default organization for the user, if empty takes global default
        /// </summary>
        [Input("defaultOrganizationId")]
        public Input<int>? DefaultOrganizationId { get; set; }

        /// <summary>
        /// Description of user
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// First name of the user
        /// </summary>
        [Input("firstname")]
        public Input<string>? Firstname { get; set; }

        /// <summary>
        /// Last name of user
        /// </summary>
        [Input("lastname")]
        public Input<string>? Lastname { get; set; }

        /// <summary>
        /// Sets the timezone/location of a user
        /// </summary>
        [Input("locale")]
        public Input<string>? Locale { get; set; }

        [Input("locationIds")]
        private InputList<int>? _locationIds;

        /// <summary>
        /// List of all locations a user has access to
        /// </summary>
        public InputList<int> LocationIds
        {
            get => _locationIds ?? (_locationIds = new InputList<int>());
            set => _locationIds = value;
        }

        /// <summary>
        /// Username used for logging-in
        /// </summary>
        [Input("login", required: true)]
        public Input<string> Login { get; set; } = null!;

        /// <summary>
        /// Email of user
        /// </summary>
        [Input("mail")]
        public Input<string>? Mail { get; set; }

        [Input("organizationIds")]
        private InputList<int>? _organizationIds;

        /// <summary>
        /// List of all organizations a user has access to
        /// </summary>
        public InputList<int> OrganizationIds
        {
            get => _organizationIds ?? (_organizationIds = new InputList<int>());
            set => _organizationIds = value;
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password of user, required if auth_source_id is 1 (internal)
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY User can be used to allow access to foreman.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// If the user is allow admin privileges
        /// </summary>
        [Input("admin")]
        public Input<bool>? Admin { get; set; }

        /// <summary>
        /// Set the authentication source, i.e internal (1,default) or external (2)
        /// </summary>
        [Input("authSourceId")]
        public Input<int>? AuthSourceId { get; set; }

        /// <summary>
        /// Default location for the user, if empty takes global default
        /// </summary>
        [Input("defaultLocationId")]
        public Input<int>? DefaultLocationId { get; set; }

        /// <summary>
        /// Default organization for the user, if empty takes global default
        /// </summary>
        [Input("defaultOrganizationId")]
        public Input<int>? DefaultOrganizationId { get; set; }

        /// <summary>
        /// Description of user
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// First name of the user
        /// </summary>
        [Input("firstname")]
        public Input<string>? Firstname { get; set; }

        /// <summary>
        /// Last name of user
        /// </summary>
        [Input("lastname")]
        public Input<string>? Lastname { get; set; }

        /// <summary>
        /// Sets the timezone/location of a user
        /// </summary>
        [Input("locale")]
        public Input<string>? Locale { get; set; }

        [Input("locationIds")]
        private InputList<int>? _locationIds;

        /// <summary>
        /// List of all locations a user has access to
        /// </summary>
        public InputList<int> LocationIds
        {
            get => _locationIds ?? (_locationIds = new InputList<int>());
            set => _locationIds = value;
        }

        /// <summary>
        /// Username used for logging-in
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        /// <summary>
        /// Email of user
        /// </summary>
        [Input("mail")]
        public Input<string>? Mail { get; set; }

        [Input("organizationIds")]
        private InputList<int>? _organizationIds;

        /// <summary>
        /// List of all organizations a user has access to
        /// </summary>
        public InputList<int> OrganizationIds
        {
            get => _organizationIds ?? (_organizationIds = new InputList<int>());
            set => _organizationIds = value;
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password of user, required if auth_source_id is 1 (internal)
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
