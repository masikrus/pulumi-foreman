// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/hostgroup:Hostgroup")]
    public partial class Hostgroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
        /// get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
        /// configuration of various hosts based on common attributes.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// ID of the architecture associated with this hostgroup.
        /// </summary>
        [Output("architectureId")]
        public Output<int> ArchitectureId { get; private set; } = null!;

        /// <summary>
        /// ID of the compute profile associated with this hostgroup.
        /// </summary>
        [Output("computeProfileId")]
        public Output<int> ComputeProfileId { get; private set; } = null!;

        /// <summary>
        /// ID of the compute resource associated with this hostgroup.
        /// </summary>
        [Output("computeResourceId")]
        public Output<int> ComputeResourceId { get; private set; } = null!;

        /// <summary>
        /// IDs of the applied config groups.
        /// </summary>
        [Output("configGroupIds")]
        public Output<ImmutableArray<int>> ConfigGroupIds { get; private set; } = null!;

        /// <summary>
        /// ID of the content source associated with this hostgroup.
        /// </summary>
        [Output("contentSourceId")]
        public Output<int> ContentSourceId { get; private set; } = null!;

        /// <summary>
        /// ID of the content view associated with this hostgroup.
        /// </summary>
        [Output("contentViewId")]
        public Output<int> ContentViewId { get; private set; } = null!;

        /// <summary>
        /// ID of the domain associated with this hostgroup.
        /// </summary>
        [Output("domainId")]
        public Output<int> DomainId { get; private set; } = null!;

        /// <summary>
        /// ID of the environment associated with this hostgroup.
        /// </summary>
        [Output("environmentId")]
        public Output<int> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// ID of the lifecycle environment associated with this hostgroup.
        /// </summary>
        [Output("lifecycleEnvironmentId")]
        public Output<int> LifecycleEnvironmentId { get; private set; } = null!;

        /// <summary>
        /// ID of the media associated with this hostgroup.
        /// </summary>
        [Output("mediumId")]
        public Output<int> MediumId { get; private set; } = null!;

        /// <summary>
        /// Hostgroup name. @EXAMPLE "compute"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the operating system associated with this hostgroup.
        /// </summary>
        [Output("operatingsystemId")]
        public Output<int> OperatingsystemId { get; private set; } = null!;

        /// <summary>
        /// A map of parameters that will be saved as hostgroup parameters in the group config.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// ID of the parent hostgroup.
        /// </summary>
        [Output("parentId")]
        public Output<int?> ParentId { get; private set; } = null!;

        /// <summary>
        /// ID of the partition table associated with this hostgroup.
        /// </summary>
        [Output("ptableId")]
        public Output<int> PtableId { get; private set; } = null!;

        /// <summary>
        /// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        /// </summary>
        [Output("puppetCaProxyId")]
        public Output<int?> PuppetCaProxyId { get; private set; } = null!;

        /// <summary>
        /// IDs of the applied puppet classes.
        /// </summary>
        [Output("puppetClassIds")]
        public Output<ImmutableArray<int>> PuppetClassIds { get; private set; } = null!;

        /// <summary>
        /// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        /// </summary>
        [Output("puppetProxyId")]
        public Output<int?> PuppetProxyId { get; private set; } = null!;

        /// <summary>
        /// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
        /// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
        /// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        /// </summary>
        [Output("pxeLoader")]
        public Output<string> PxeLoader { get; private set; } = null!;

        /// <summary>
        /// ID of the realm associated with this hostgroup.
        /// </summary>
        [Output("realmId")]
        public Output<int> RealmId { get; private set; } = null!;

        /// <summary>
        /// Default root password
        /// </summary>
        [Output("rootPassword")]
        public Output<string?> RootPassword { get; private set; } = null!;

        /// <summary>
        /// ID of the subnet associated with the hostgroup.
        /// </summary>
        [Output("subnetId")]
        public Output<int> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
        /// tree down to this hostgroup. The title will be in the form of: "&lt;parent 1&gt;/&lt;parent 2&gt;/.../&lt;name&gt;".
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a Hostgroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Hostgroup(string name, HostgroupArgs? args = null, CustomResourceOptions? options = null)
            : base("foreman:index/hostgroup:Hostgroup", name, args ?? new HostgroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Hostgroup(string name, Input<string> id, HostgroupState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/hostgroup:Hostgroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "rootPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Hostgroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Hostgroup Get(string name, Input<string> id, HostgroupState? state = null, CustomResourceOptions? options = null)
        {
            return new Hostgroup(name, id, state, options);
        }
    }

    public sealed class HostgroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the architecture associated with this hostgroup.
        /// </summary>
        [Input("architectureId")]
        public Input<int>? ArchitectureId { get; set; }

        /// <summary>
        /// ID of the compute profile associated with this hostgroup.
        /// </summary>
        [Input("computeProfileId")]
        public Input<int>? ComputeProfileId { get; set; }

        /// <summary>
        /// ID of the compute resource associated with this hostgroup.
        /// </summary>
        [Input("computeResourceId")]
        public Input<int>? ComputeResourceId { get; set; }

        [Input("configGroupIds")]
        private InputList<int>? _configGroupIds;

        /// <summary>
        /// IDs of the applied config groups.
        /// </summary>
        public InputList<int> ConfigGroupIds
        {
            get => _configGroupIds ?? (_configGroupIds = new InputList<int>());
            set => _configGroupIds = value;
        }

        /// <summary>
        /// ID of the content source associated with this hostgroup.
        /// </summary>
        [Input("contentSourceId")]
        public Input<int>? ContentSourceId { get; set; }

        /// <summary>
        /// ID of the content view associated with this hostgroup.
        /// </summary>
        [Input("contentViewId")]
        public Input<int>? ContentViewId { get; set; }

        /// <summary>
        /// ID of the domain associated with this hostgroup.
        /// </summary>
        [Input("domainId")]
        public Input<int>? DomainId { get; set; }

        /// <summary>
        /// ID of the environment associated with this hostgroup.
        /// </summary>
        [Input("environmentId")]
        public Input<int>? EnvironmentId { get; set; }

        /// <summary>
        /// ID of the lifecycle environment associated with this hostgroup.
        /// </summary>
        [Input("lifecycleEnvironmentId")]
        public Input<int>? LifecycleEnvironmentId { get; set; }

        /// <summary>
        /// ID of the media associated with this hostgroup.
        /// </summary>
        [Input("mediumId")]
        public Input<int>? MediumId { get; set; }

        /// <summary>
        /// Hostgroup name. @EXAMPLE "compute"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the operating system associated with this hostgroup.
        /// </summary>
        [Input("operatingsystemId")]
        public Input<int>? OperatingsystemId { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// A map of parameters that will be saved as hostgroup parameters in the group config.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// ID of the parent hostgroup.
        /// </summary>
        [Input("parentId")]
        public Input<int>? ParentId { get; set; }

        /// <summary>
        /// ID of the partition table associated with this hostgroup.
        /// </summary>
        [Input("ptableId")]
        public Input<int>? PtableId { get; set; }

        /// <summary>
        /// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        /// </summary>
        [Input("puppetCaProxyId")]
        public Input<int>? PuppetCaProxyId { get; set; }

        [Input("puppetClassIds")]
        private InputList<int>? _puppetClassIds;

        /// <summary>
        /// IDs of the applied puppet classes.
        /// </summary>
        public InputList<int> PuppetClassIds
        {
            get => _puppetClassIds ?? (_puppetClassIds = new InputList<int>());
            set => _puppetClassIds = value;
        }

        /// <summary>
        /// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        /// </summary>
        [Input("puppetProxyId")]
        public Input<int>? PuppetProxyId { get; set; }

        /// <summary>
        /// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
        /// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
        /// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        /// </summary>
        [Input("pxeLoader")]
        public Input<string>? PxeLoader { get; set; }

        /// <summary>
        /// ID of the realm associated with this hostgroup.
        /// </summary>
        [Input("realmId")]
        public Input<int>? RealmId { get; set; }

        [Input("rootPassword")]
        private Input<string>? _rootPassword;

        /// <summary>
        /// Default root password
        /// </summary>
        public Input<string>? RootPassword
        {
            get => _rootPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rootPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID of the subnet associated with the hostgroup.
        /// </summary>
        [Input("subnetId")]
        public Input<int>? SubnetId { get; set; }

        public HostgroupArgs()
        {
        }
        public static new HostgroupArgs Empty => new HostgroupArgs();
    }

    public sealed class HostgroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
        /// get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
        /// configuration of various hosts based on common attributes.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// ID of the architecture associated with this hostgroup.
        /// </summary>
        [Input("architectureId")]
        public Input<int>? ArchitectureId { get; set; }

        /// <summary>
        /// ID of the compute profile associated with this hostgroup.
        /// </summary>
        [Input("computeProfileId")]
        public Input<int>? ComputeProfileId { get; set; }

        /// <summary>
        /// ID of the compute resource associated with this hostgroup.
        /// </summary>
        [Input("computeResourceId")]
        public Input<int>? ComputeResourceId { get; set; }

        [Input("configGroupIds")]
        private InputList<int>? _configGroupIds;

        /// <summary>
        /// IDs of the applied config groups.
        /// </summary>
        public InputList<int> ConfigGroupIds
        {
            get => _configGroupIds ?? (_configGroupIds = new InputList<int>());
            set => _configGroupIds = value;
        }

        /// <summary>
        /// ID of the content source associated with this hostgroup.
        /// </summary>
        [Input("contentSourceId")]
        public Input<int>? ContentSourceId { get; set; }

        /// <summary>
        /// ID of the content view associated with this hostgroup.
        /// </summary>
        [Input("contentViewId")]
        public Input<int>? ContentViewId { get; set; }

        /// <summary>
        /// ID of the domain associated with this hostgroup.
        /// </summary>
        [Input("domainId")]
        public Input<int>? DomainId { get; set; }

        /// <summary>
        /// ID of the environment associated with this hostgroup.
        /// </summary>
        [Input("environmentId")]
        public Input<int>? EnvironmentId { get; set; }

        /// <summary>
        /// ID of the lifecycle environment associated with this hostgroup.
        /// </summary>
        [Input("lifecycleEnvironmentId")]
        public Input<int>? LifecycleEnvironmentId { get; set; }

        /// <summary>
        /// ID of the media associated with this hostgroup.
        /// </summary>
        [Input("mediumId")]
        public Input<int>? MediumId { get; set; }

        /// <summary>
        /// Hostgroup name. @EXAMPLE "compute"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the operating system associated with this hostgroup.
        /// </summary>
        [Input("operatingsystemId")]
        public Input<int>? OperatingsystemId { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// A map of parameters that will be saved as hostgroup parameters in the group config.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// ID of the parent hostgroup.
        /// </summary>
        [Input("parentId")]
        public Input<int>? ParentId { get; set; }

        /// <summary>
        /// ID of the partition table associated with this hostgroup.
        /// </summary>
        [Input("ptableId")]
        public Input<int>? PtableId { get; set; }

        /// <summary>
        /// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
        /// </summary>
        [Input("puppetCaProxyId")]
        public Input<int>? PuppetCaProxyId { get; set; }

        [Input("puppetClassIds")]
        private InputList<int>? _puppetClassIds;

        /// <summary>
        /// IDs of the applied puppet classes.
        /// </summary>
        public InputList<int> PuppetClassIds
        {
            get => _puppetClassIds ?? (_puppetClassIds = new InputList<int>());
            set => _puppetClassIds = value;
        }

        /// <summary>
        /// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
        /// </summary>
        [Input("puppetProxyId")]
        public Input<int>? PuppetProxyId { get; set; }

        /// <summary>
        /// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
        /// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
        /// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
        /// </summary>
        [Input("pxeLoader")]
        public Input<string>? PxeLoader { get; set; }

        /// <summary>
        /// ID of the realm associated with this hostgroup.
        /// </summary>
        [Input("realmId")]
        public Input<int>? RealmId { get; set; }

        [Input("rootPassword")]
        private Input<string>? _rootPassword;

        /// <summary>
        /// Default root password
        /// </summary>
        public Input<string>? RootPassword
        {
            get => _rootPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _rootPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// ID of the subnet associated with the hostgroup.
        /// </summary>
        [Input("subnetId")]
        public Input<int>? SubnetId { get; set; }

        /// <summary>
        /// The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
        /// tree down to this hostgroup. The title will be in the form of: "&lt;parent 1&gt;/&lt;parent 2&gt;/.../&lt;name&gt;".
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public HostgroupState()
        {
        }
        public static new HostgroupState Empty => new HostgroupState();
    }
}
