// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY Foreman representation of image.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// ID of the architecture in Foreman
        /// </summary>
        [Output("architectureId")]
        public Output<int> ArchitectureId { get; private set; } = null!;

        /// <summary>
        /// ID of the compute resource in Foreman
        /// </summary>
        [Output("computeResourceId")]
        public Output<int> ComputeResourceId { get; private set; } = null!;

        /// <summary>
        /// Name of the image to be used in Foreman
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the operating system in Foreman
        /// </summary>
        [Output("operatingsystemId")]
        public Output<int> OperatingsystemId { get; private set; } = null!;

        /// <summary>
        /// Does the image support user data (cloud-init etc.)?
        /// </summary>
        [Output("userData")]
        public Output<bool?> UserData { get; private set; } = null!;

        /// <summary>
        /// Username used to log into the newly created machine that is based on this image
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;

        /// <summary>
        /// UUID of the image from the compute resource
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/image:Image", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
        {
            return new Image(name, id, state, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the architecture in Foreman
        /// </summary>
        [Input("architectureId", required: true)]
        public Input<int> ArchitectureId { get; set; } = null!;

        /// <summary>
        /// ID of the compute resource in Foreman
        /// </summary>
        [Input("computeResourceId", required: true)]
        public Input<int> ComputeResourceId { get; set; } = null!;

        /// <summary>
        /// Name of the image to be used in Foreman
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the operating system in Foreman
        /// </summary>
        [Input("operatingsystemId", required: true)]
        public Input<int> OperatingsystemId { get; set; } = null!;

        /// <summary>
        /// Does the image support user data (cloud-init etc.)?
        /// </summary>
        [Input("userData")]
        public Input<bool>? UserData { get; set; }

        /// <summary>
        /// Username used to log into the newly created machine that is based on this image
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        /// <summary>
        /// UUID of the image from the compute resource
        /// </summary>
        [Input("uuid", required: true)]
        public Input<string> Uuid { get; set; } = null!;

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }

    public sealed class ImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY Foreman representation of image.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        /// <summary>
        /// ID of the architecture in Foreman
        /// </summary>
        [Input("architectureId")]
        public Input<int>? ArchitectureId { get; set; }

        /// <summary>
        /// ID of the compute resource in Foreman
        /// </summary>
        [Input("computeResourceId")]
        public Input<int>? ComputeResourceId { get; set; }

        /// <summary>
        /// Name of the image to be used in Foreman
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the operating system in Foreman
        /// </summary>
        [Input("operatingsystemId")]
        public Input<int>? OperatingsystemId { get; set; }

        /// <summary>
        /// Does the image support user data (cloud-init etc.)?
        /// </summary>
        [Input("userData")]
        public Input<bool>? UserData { get; set; }

        /// <summary>
        /// Username used to log into the newly created machine that is based on this image
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// UUID of the image from the compute resource
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public ImageState()
        {
        }
        public static new ImageState Empty => new ImageState();
    }
}
