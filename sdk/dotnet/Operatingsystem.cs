// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Foreman
{
    [ForemanResourceType("foreman:index/operatingsystem:Operatingsystem")]
    public partial class Operatingsystem : global::Pulumi.CustomResource
    {
        /// <summary>
        /// @SUMMARY Foreman representation of an operating system.
        /// </summary>
        [Output("__meta_")]
        public Output<bool> __meta_ { get; private set; } = null!;

        /// <summary>
        /// Identifiers of attached architectures
        /// </summary>
        [Output("architectures")]
        public Output<ImmutableArray<int>> Architectures { get; private set; } = null!;

        /// <summary>
        /// Additional operating system information.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Output("family")]
        public Output<string?> Family { get; private set; } = null!;

        /// <summary>
        /// Major release version. @EXAMPLE "7"
        /// </summary>
        [Output("major")]
        public Output<string> Major { get; private set; } = null!;

        /// <summary>
        /// Identifiers of attached media
        /// </summary>
        [Output("media")]
        public Output<ImmutableArray<int>> Media { get; private set; } = null!;

        /// <summary>
        /// Minor release version. @EXAMPLE "4"
        /// </summary>
        [Output("minor")]
        public Output<string?> Minor { get; private set; } = null!;

        /// <summary>
        /// Operating system name. @EXAMPLE "CentOS"
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A map of parameters that will be saved as operating system parameters in the os config.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;

        /// <summary>
        /// Identifiers of attached partition tables
        /// </summary>
        [Output("partitiontables")]
        public Output<ImmutableArray<int>> Partitiontables { get; private set; } = null!;

        /// <summary>
        /// Root password hash function to use. Valid values include: `"MD5"`, `"SHA256"`, `"SHA512"`, `"Base64"`.
        /// </summary>
        [Output("passwordHash")]
        public Output<string?> PasswordHash { get; private set; } = null!;

        /// <summary>
        /// Identifiers of attached provisioning templates
        /// </summary>
        [Output("provisioningTemplates")]
        public Output<ImmutableArray<int>> ProvisioningTemplates { get; private set; } = null!;

        /// <summary>
        /// Code name or release name for the specific operating system version.
        /// </summary>
        [Output("releaseName")]
        public Output<string?> ReleaseName { get; private set; } = null!;

        /// <summary>
        /// The operating system's title is a concatentation of the OS name, major, and minor versions to get a full operating
        /// system release.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a Operatingsystem resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Operatingsystem(string name, OperatingsystemArgs args, CustomResourceOptions? options = null)
            : base("foreman:index/operatingsystem:Operatingsystem", name, args ?? new OperatingsystemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Operatingsystem(string name, Input<string> id, OperatingsystemState? state = null, CustomResourceOptions? options = null)
            : base("foreman:index/operatingsystem:Operatingsystem", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Operatingsystem resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Operatingsystem Get(string name, Input<string> id, OperatingsystemState? state = null, CustomResourceOptions? options = null)
        {
            return new Operatingsystem(name, id, state, options);
        }
    }

    public sealed class OperatingsystemArgs : global::Pulumi.ResourceArgs
    {
        [Input("architectures")]
        private InputList<int>? _architectures;

        /// <summary>
        /// Identifiers of attached architectures
        /// </summary>
        public InputList<int> Architectures
        {
            get => _architectures ?? (_architectures = new InputList<int>());
            set => _architectures = value;
        }

        /// <summary>
        /// Additional operating system information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Input("family")]
        public Input<string>? Family { get; set; }

        /// <summary>
        /// Major release version. @EXAMPLE "7"
        /// </summary>
        [Input("major", required: true)]
        public Input<string> Major { get; set; } = null!;

        [Input("media")]
        private InputList<int>? _media;

        /// <summary>
        /// Identifiers of attached media
        /// </summary>
        public InputList<int> Media
        {
            get => _media ?? (_media = new InputList<int>());
            set => _media = value;
        }

        /// <summary>
        /// Minor release version. @EXAMPLE "4"
        /// </summary>
        [Input("minor")]
        public Input<string>? Minor { get; set; }

        /// <summary>
        /// Operating system name. @EXAMPLE "CentOS"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// A map of parameters that will be saved as operating system parameters in the os config.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        [Input("partitiontables")]
        private InputList<int>? _partitiontables;

        /// <summary>
        /// Identifiers of attached partition tables
        /// </summary>
        public InputList<int> Partitiontables
        {
            get => _partitiontables ?? (_partitiontables = new InputList<int>());
            set => _partitiontables = value;
        }

        /// <summary>
        /// Root password hash function to use. Valid values include: `"MD5"`, `"SHA256"`, `"SHA512"`, `"Base64"`.
        /// </summary>
        [Input("passwordHash")]
        public Input<string>? PasswordHash { get; set; }

        [Input("provisioningTemplates")]
        private InputList<int>? _provisioningTemplates;

        /// <summary>
        /// Identifiers of attached provisioning templates
        /// </summary>
        public InputList<int> ProvisioningTemplates
        {
            get => _provisioningTemplates ?? (_provisioningTemplates = new InputList<int>());
            set => _provisioningTemplates = value;
        }

        /// <summary>
        /// Code name or release name for the specific operating system version.
        /// </summary>
        [Input("releaseName")]
        public Input<string>? ReleaseName { get; set; }

        public OperatingsystemArgs()
        {
        }
        public static new OperatingsystemArgs Empty => new OperatingsystemArgs();
    }

    public sealed class OperatingsystemState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// @SUMMARY Foreman representation of an operating system.
        /// </summary>
        [Input("__meta_")]
        public Input<bool>? __meta_ { get; set; }

        [Input("architectures")]
        private InputList<int>? _architectures;

        /// <summary>
        /// Identifiers of attached architectures
        /// </summary>
        public InputList<int> Architectures
        {
            get => _architectures ?? (_architectures = new InputList<int>());
            set => _architectures = value;
        }

        /// <summary>
        /// Additional operating system information.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
        /// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
        /// </summary>
        [Input("family")]
        public Input<string>? Family { get; set; }

        /// <summary>
        /// Major release version. @EXAMPLE "7"
        /// </summary>
        [Input("major")]
        public Input<string>? Major { get; set; }

        [Input("media")]
        private InputList<int>? _media;

        /// <summary>
        /// Identifiers of attached media
        /// </summary>
        public InputList<int> Media
        {
            get => _media ?? (_media = new InputList<int>());
            set => _media = value;
        }

        /// <summary>
        /// Minor release version. @EXAMPLE "4"
        /// </summary>
        [Input("minor")]
        public Input<string>? Minor { get; set; }

        /// <summary>
        /// Operating system name. @EXAMPLE "CentOS"
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// A map of parameters that will be saved as operating system parameters in the os config.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        [Input("partitiontables")]
        private InputList<int>? _partitiontables;

        /// <summary>
        /// Identifiers of attached partition tables
        /// </summary>
        public InputList<int> Partitiontables
        {
            get => _partitiontables ?? (_partitiontables = new InputList<int>());
            set => _partitiontables = value;
        }

        /// <summary>
        /// Root password hash function to use. Valid values include: `"MD5"`, `"SHA256"`, `"SHA512"`, `"Base64"`.
        /// </summary>
        [Input("passwordHash")]
        public Input<string>? PasswordHash { get; set; }

        [Input("provisioningTemplates")]
        private InputList<int>? _provisioningTemplates;

        /// <summary>
        /// Identifiers of attached provisioning templates
        /// </summary>
        public InputList<int> ProvisioningTemplates
        {
            get => _provisioningTemplates ?? (_provisioningTemplates = new InputList<int>());
            set => _provisioningTemplates = value;
        }

        /// <summary>
        /// Code name or release name for the specific operating system version.
        /// </summary>
        [Input("releaseName")]
        public Input<string>? ReleaseName { get; set; }

        /// <summary>
        /// The operating system's title is a concatentation of the OS name, major, and minor versions to get a full operating
        /// system release.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public OperatingsystemState()
        {
        }
        public static new OperatingsystemState Empty => new OperatingsystemState();
    }
}
