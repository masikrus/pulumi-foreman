// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KatelloRepository extends pulumi.CustomResource {
    /**
     * Get an existing KatelloRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KatelloRepositoryState, opts?: pulumi.CustomResourceOptions): KatelloRepository {
        return new KatelloRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'foreman:index/katelloRepository:KatelloRepository';

    /**
     * Returns true if the given object is an instance of KatelloRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KatelloRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KatelloRepository.__pulumiType;
    }

    /**
     * @SUMMARY Repository
     */
    public /*out*/ readonly __meta_!: pulumi.Output<boolean>;
    /**
     * Contents of requirement yaml file to sync from URL.@EXAMPLE
     */
    public readonly ansibleCollectionRequirements!: pulumi.Output<string | undefined>;
    /**
     * Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
     */
    public readonly checksumType!: pulumi.Output<string | undefined>;
    /**
     * Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
     * `"ansibleCollection"`.@EXAMPLE "yum"
     */
    public readonly contentType!: pulumi.Output<string>;
    /**
     * Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
     */
    public readonly debArchitectures!: pulumi.Output<string | undefined>;
    /**
     * Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
     */
    public readonly debComponents!: pulumi.Output<string | undefined>;
    /**
     * Comma separated list of releases to be synched from deb-archive.@EXAMPLE
     */
    public readonly debReleases!: pulumi.Output<string | undefined>;
    /**
     * Repository description.@EXAMPLE "A repository description"
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Comma separated list of tags to sync for Container Image repository.@EXAMPLE
     */
    public readonly dockerTagsWhitelist!: pulumi.Output<string | undefined>;
    /**
     * Name of the upstream docker repository@EXAMPLE
     */
    public readonly dockerUpstreamName!: pulumi.Output<string | undefined>;
    /**
     * Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
     * value is not returned from the API and is therefore handled by a DiffSuppressFunc.
     */
    public readonly downloadConcurrency!: pulumi.Output<number | undefined>;
    /**
     * Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
     */
    public readonly downloadPolicy!: pulumi.Output<string | undefined>;
    /**
     * Identifier of the GPG key.@EXAMPLE
     */
    public readonly gpgKeyId!: pulumi.Output<number | undefined>;
    /**
     * ID of a HTTP Proxy.@EXAMPLE
     */
    public readonly httpProxyId!: pulumi.Output<number | undefined>;
    /**
     * Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
     * "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
     */
    public readonly httpProxyPolicy!: pulumi.Output<string | undefined>;
    /**
     * List of content units to ignore while syncing a yum repository. Must be subset of
     * rpm,drpm,srpm,distribution,erratum@EXAMPLE
     */
    public readonly ignorableContent!: pulumi.Output<string | undefined>;
    /**
     * If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
     */
    public readonly ignoreGlobalProxy!: pulumi.Output<boolean | undefined>;
    /**
     * Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
     */
    public readonly label!: pulumi.Output<string>;
    /**
     * 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
     *
     * @deprecated Deprecated and removed in Katello 4.9 in favor of mirroring_policy
     */
    public readonly mirrorOnSync!: pulumi.Output<boolean | undefined>;
    /**
     * Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
     */
    public readonly mirroringPolicy!: pulumi.Output<string | undefined>;
    /**
     * Repository name.@EXAMPLE "My Repository"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Product the repository belongs to.@EXAMPLE
     */
    public readonly productId!: pulumi.Output<number>;
    /**
     * true if this repository can be published via HTTP.@EXAMPLE true
     */
    public readonly unprotected!: pulumi.Output<boolean | undefined>;
    /**
     * Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
     */
    public readonly upstreamPassword!: pulumi.Output<string | undefined>;
    /**
     * Username of the upstream repository user used for authentication.@EXAMPLE "admin"
     */
    public readonly upstreamUsername!: pulumi.Output<string | undefined>;
    /**
     * Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
     */
    public readonly verifySslOnSync!: pulumi.Output<boolean | undefined>;

    /**
     * Create a KatelloRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KatelloRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KatelloRepositoryArgs | KatelloRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KatelloRepositoryState | undefined;
            resourceInputs["__meta_"] = state ? state.__meta_ : undefined;
            resourceInputs["ansibleCollectionRequirements"] = state ? state.ansibleCollectionRequirements : undefined;
            resourceInputs["checksumType"] = state ? state.checksumType : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["debArchitectures"] = state ? state.debArchitectures : undefined;
            resourceInputs["debComponents"] = state ? state.debComponents : undefined;
            resourceInputs["debReleases"] = state ? state.debReleases : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dockerTagsWhitelist"] = state ? state.dockerTagsWhitelist : undefined;
            resourceInputs["dockerUpstreamName"] = state ? state.dockerUpstreamName : undefined;
            resourceInputs["downloadConcurrency"] = state ? state.downloadConcurrency : undefined;
            resourceInputs["downloadPolicy"] = state ? state.downloadPolicy : undefined;
            resourceInputs["gpgKeyId"] = state ? state.gpgKeyId : undefined;
            resourceInputs["httpProxyId"] = state ? state.httpProxyId : undefined;
            resourceInputs["httpProxyPolicy"] = state ? state.httpProxyPolicy : undefined;
            resourceInputs["ignorableContent"] = state ? state.ignorableContent : undefined;
            resourceInputs["ignoreGlobalProxy"] = state ? state.ignoreGlobalProxy : undefined;
            resourceInputs["label"] = state ? state.label : undefined;
            resourceInputs["mirrorOnSync"] = state ? state.mirrorOnSync : undefined;
            resourceInputs["mirroringPolicy"] = state ? state.mirroringPolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["unprotected"] = state ? state.unprotected : undefined;
            resourceInputs["upstreamPassword"] = state ? state.upstreamPassword : undefined;
            resourceInputs["upstreamUsername"] = state ? state.upstreamUsername : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["verifySslOnSync"] = state ? state.verifySslOnSync : undefined;
        } else {
            const args = argsOrState as KatelloRepositoryArgs | undefined;
            if ((!args || args.contentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contentType'");
            }
            if ((!args || args.productId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productId'");
            }
            resourceInputs["ansibleCollectionRequirements"] = args ? args.ansibleCollectionRequirements : undefined;
            resourceInputs["checksumType"] = args ? args.checksumType : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["debArchitectures"] = args ? args.debArchitectures : undefined;
            resourceInputs["debComponents"] = args ? args.debComponents : undefined;
            resourceInputs["debReleases"] = args ? args.debReleases : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dockerTagsWhitelist"] = args ? args.dockerTagsWhitelist : undefined;
            resourceInputs["dockerUpstreamName"] = args ? args.dockerUpstreamName : undefined;
            resourceInputs["downloadConcurrency"] = args ? args.downloadConcurrency : undefined;
            resourceInputs["downloadPolicy"] = args ? args.downloadPolicy : undefined;
            resourceInputs["gpgKeyId"] = args ? args.gpgKeyId : undefined;
            resourceInputs["httpProxyId"] = args ? args.httpProxyId : undefined;
            resourceInputs["httpProxyPolicy"] = args ? args.httpProxyPolicy : undefined;
            resourceInputs["ignorableContent"] = args ? args.ignorableContent : undefined;
            resourceInputs["ignoreGlobalProxy"] = args ? args.ignoreGlobalProxy : undefined;
            resourceInputs["label"] = args ? args.label : undefined;
            resourceInputs["mirrorOnSync"] = args ? args.mirrorOnSync : undefined;
            resourceInputs["mirroringPolicy"] = args ? args.mirroringPolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["unprotected"] = args ? args.unprotected : undefined;
            resourceInputs["upstreamPassword"] = args ? args.upstreamPassword : undefined;
            resourceInputs["upstreamUsername"] = args ? args.upstreamUsername : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["verifySslOnSync"] = args ? args.verifySslOnSync : undefined;
            resourceInputs["__meta_"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KatelloRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KatelloRepository resources.
 */
export interface KatelloRepositoryState {
    /**
     * @SUMMARY Repository
     */
    __meta_?: pulumi.Input<boolean>;
    /**
     * Contents of requirement yaml file to sync from URL.@EXAMPLE
     */
    ansibleCollectionRequirements?: pulumi.Input<string>;
    /**
     * Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
     */
    checksumType?: pulumi.Input<string>;
    /**
     * Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
     * `"ansibleCollection"`.@EXAMPLE "yum"
     */
    contentType?: pulumi.Input<string>;
    /**
     * Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
     */
    debArchitectures?: pulumi.Input<string>;
    /**
     * Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
     */
    debComponents?: pulumi.Input<string>;
    /**
     * Comma separated list of releases to be synched from deb-archive.@EXAMPLE
     */
    debReleases?: pulumi.Input<string>;
    /**
     * Repository description.@EXAMPLE "A repository description"
     */
    description?: pulumi.Input<string>;
    /**
     * Comma separated list of tags to sync for Container Image repository.@EXAMPLE
     */
    dockerTagsWhitelist?: pulumi.Input<string>;
    /**
     * Name of the upstream docker repository@EXAMPLE
     */
    dockerUpstreamName?: pulumi.Input<string>;
    /**
     * Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
     * value is not returned from the API and is therefore handled by a DiffSuppressFunc.
     */
    downloadConcurrency?: pulumi.Input<number>;
    /**
     * Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
     */
    downloadPolicy?: pulumi.Input<string>;
    /**
     * Identifier of the GPG key.@EXAMPLE
     */
    gpgKeyId?: pulumi.Input<number>;
    /**
     * ID of a HTTP Proxy.@EXAMPLE
     */
    httpProxyId?: pulumi.Input<number>;
    /**
     * Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
     * "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
     */
    httpProxyPolicy?: pulumi.Input<string>;
    /**
     * List of content units to ignore while syncing a yum repository. Must be subset of
     * rpm,drpm,srpm,distribution,erratum@EXAMPLE
     */
    ignorableContent?: pulumi.Input<string>;
    /**
     * If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
     */
    ignoreGlobalProxy?: pulumi.Input<boolean>;
    /**
     * Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
     */
    label?: pulumi.Input<string>;
    /**
     * 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
     *
     * @deprecated Deprecated and removed in Katello 4.9 in favor of mirroring_policy
     */
    mirrorOnSync?: pulumi.Input<boolean>;
    /**
     * Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
     */
    mirroringPolicy?: pulumi.Input<string>;
    /**
     * Repository name.@EXAMPLE "My Repository"
     */
    name?: pulumi.Input<string>;
    /**
     * Product the repository belongs to.@EXAMPLE
     */
    productId?: pulumi.Input<number>;
    /**
     * true if this repository can be published via HTTP.@EXAMPLE true
     */
    unprotected?: pulumi.Input<boolean>;
    /**
     * Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
     */
    upstreamPassword?: pulumi.Input<string>;
    /**
     * Username of the upstream repository user used for authentication.@EXAMPLE "admin"
     */
    upstreamUsername?: pulumi.Input<string>;
    /**
     * Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
     */
    url?: pulumi.Input<string>;
    /**
     * If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
     */
    verifySslOnSync?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a KatelloRepository resource.
 */
export interface KatelloRepositoryArgs {
    /**
     * Contents of requirement yaml file to sync from URL.@EXAMPLE
     */
    ansibleCollectionRequirements?: pulumi.Input<string>;
    /**
     * Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
     */
    checksumType?: pulumi.Input<string>;
    /**
     * Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
     * `"ansibleCollection"`.@EXAMPLE "yum"
     */
    contentType: pulumi.Input<string>;
    /**
     * Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
     */
    debArchitectures?: pulumi.Input<string>;
    /**
     * Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
     */
    debComponents?: pulumi.Input<string>;
    /**
     * Comma separated list of releases to be synched from deb-archive.@EXAMPLE
     */
    debReleases?: pulumi.Input<string>;
    /**
     * Repository description.@EXAMPLE "A repository description"
     */
    description?: pulumi.Input<string>;
    /**
     * Comma separated list of tags to sync for Container Image repository.@EXAMPLE
     */
    dockerTagsWhitelist?: pulumi.Input<string>;
    /**
     * Name of the upstream docker repository@EXAMPLE
     */
    dockerUpstreamName?: pulumi.Input<string>;
    /**
     * Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
     * value is not returned from the API and is therefore handled by a DiffSuppressFunc.
     */
    downloadConcurrency?: pulumi.Input<number>;
    /**
     * Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
     */
    downloadPolicy?: pulumi.Input<string>;
    /**
     * Identifier of the GPG key.@EXAMPLE
     */
    gpgKeyId?: pulumi.Input<number>;
    /**
     * ID of a HTTP Proxy.@EXAMPLE
     */
    httpProxyId?: pulumi.Input<number>;
    /**
     * Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
     * "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
     */
    httpProxyPolicy?: pulumi.Input<string>;
    /**
     * List of content units to ignore while syncing a yum repository. Must be subset of
     * rpm,drpm,srpm,distribution,erratum@EXAMPLE
     */
    ignorableContent?: pulumi.Input<string>;
    /**
     * If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
     */
    ignoreGlobalProxy?: pulumi.Input<boolean>;
    /**
     * Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
     */
    label?: pulumi.Input<string>;
    /**
     * 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
     *
     * @deprecated Deprecated and removed in Katello 4.9 in favor of mirroring_policy
     */
    mirrorOnSync?: pulumi.Input<boolean>;
    /**
     * Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
     */
    mirroringPolicy?: pulumi.Input<string>;
    /**
     * Repository name.@EXAMPLE "My Repository"
     */
    name?: pulumi.Input<string>;
    /**
     * Product the repository belongs to.@EXAMPLE
     */
    productId: pulumi.Input<number>;
    /**
     * true if this repository can be published via HTTP.@EXAMPLE true
     */
    unprotected?: pulumi.Input<boolean>;
    /**
     * Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
     */
    upstreamPassword?: pulumi.Input<string>;
    /**
     * Username of the upstream repository user used for authentication.@EXAMPLE "admin"
     */
    upstreamUsername?: pulumi.Input<string>;
    /**
     * Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
     */
    url?: pulumi.Input<string>;
    /**
     * If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
     */
    verifySslOnSync?: pulumi.Input<boolean>;
}
