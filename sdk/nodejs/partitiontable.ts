// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Partitiontable extends pulumi.CustomResource {
    /**
     * Get an existing Partitiontable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PartitiontableState, opts?: pulumi.CustomResourceOptions): Partitiontable {
        return new Partitiontable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'foreman:index/partitiontable:Partitiontable';

    /**
     * Returns true if the given object is an instance of Partitiontable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Partitiontable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Partitiontable.__pulumiType;
    }

    /**
     * @SUMMARY The disk partition layout of the host.
     */
    public /*out*/ readonly __meta_!: pulumi.Output<boolean>;
    /**
     * Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
     * document the template changes.
     */
    public readonly auditComment!: pulumi.Output<string | undefined>;
    /**
     * Description of the partition table
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * IDs of the hosts associated with this partition table.
     */
    public readonly hostIds!: pulumi.Output<number[]>;
    /**
     * IDs of the hostgroups associated with this partition table.
     */
    public readonly hostgroupIds!: pulumi.Output<number[]>;
    /**
     * The script that defines the partition table layout. @EXAMPLE "void"
     */
    public readonly layout!: pulumi.Output<string>;
    /**
     * Whether or not this partition table is locked for editing.
     */
    public readonly locked!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the partition table. @EXAMPLE "AutoYaST LVM"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * IDs of the operating system associated with this partition table.
     */
    public readonly operatingsystemIds!: pulumi.Output<number[]>;
    /**
     * Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
     * `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
     */
    public readonly osFamily!: pulumi.Output<string | undefined>;
    /**
     * Whether or not this partition table is a snippet to be embedded in other partition tables.
     */
    public readonly snippet!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Partitiontable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartitiontableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PartitiontableArgs | PartitiontableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PartitiontableState | undefined;
            resourceInputs["__meta_"] = state ? state.__meta_ : undefined;
            resourceInputs["auditComment"] = state ? state.auditComment : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostIds"] = state ? state.hostIds : undefined;
            resourceInputs["hostgroupIds"] = state ? state.hostgroupIds : undefined;
            resourceInputs["layout"] = state ? state.layout : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatingsystemIds"] = state ? state.operatingsystemIds : undefined;
            resourceInputs["osFamily"] = state ? state.osFamily : undefined;
            resourceInputs["snippet"] = state ? state.snippet : undefined;
        } else {
            const args = argsOrState as PartitiontableArgs | undefined;
            if ((!args || args.layout === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layout'");
            }
            resourceInputs["auditComment"] = args ? args.auditComment : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hostIds"] = args ? args.hostIds : undefined;
            resourceInputs["hostgroupIds"] = args ? args.hostgroupIds : undefined;
            resourceInputs["layout"] = args ? args.layout : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operatingsystemIds"] = args ? args.operatingsystemIds : undefined;
            resourceInputs["osFamily"] = args ? args.osFamily : undefined;
            resourceInputs["snippet"] = args ? args.snippet : undefined;
            resourceInputs["__meta_"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Partitiontable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Partitiontable resources.
 */
export interface PartitiontableState {
    /**
     * @SUMMARY The disk partition layout of the host.
     */
    __meta_?: pulumi.Input<boolean>;
    /**
     * Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
     * document the template changes.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * Description of the partition table
     */
    description?: pulumi.Input<string>;
    /**
     * IDs of the hosts associated with this partition table.
     */
    hostIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IDs of the hostgroups associated with this partition table.
     */
    hostgroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The script that defines the partition table layout. @EXAMPLE "void"
     */
    layout?: pulumi.Input<string>;
    /**
     * Whether or not this partition table is locked for editing.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * The name of the partition table. @EXAMPLE "AutoYaST LVM"
     */
    name?: pulumi.Input<string>;
    /**
     * IDs of the operating system associated with this partition table.
     */
    operatingsystemIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
     * `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
     */
    osFamily?: pulumi.Input<string>;
    /**
     * Whether or not this partition table is a snippet to be embedded in other partition tables.
     */
    snippet?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Partitiontable resource.
 */
export interface PartitiontableArgs {
    /**
     * Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
     * document the template changes.
     */
    auditComment?: pulumi.Input<string>;
    /**
     * Description of the partition table
     */
    description?: pulumi.Input<string>;
    /**
     * IDs of the hosts associated with this partition table.
     */
    hostIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * IDs of the hostgroups associated with this partition table.
     */
    hostgroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The script that defines the partition table layout. @EXAMPLE "void"
     */
    layout: pulumi.Input<string>;
    /**
     * Whether or not this partition table is locked for editing.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * The name of the partition table. @EXAMPLE "AutoYaST LVM"
     */
    name?: pulumi.Input<string>;
    /**
     * IDs of the operating system associated with this partition table.
     */
    operatingsystemIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
     * `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
     */
    osFamily?: pulumi.Input<string>;
    /**
     * Whether or not this partition table is a snippet to be embedded in other partition tables.
     */
    snippet?: pulumi.Input<boolean>;
}
