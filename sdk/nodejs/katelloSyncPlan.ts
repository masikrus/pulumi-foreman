// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class KatelloSyncPlan extends pulumi.CustomResource {
    /**
     * Get an existing KatelloSyncPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KatelloSyncPlanState, opts?: pulumi.CustomResourceOptions): KatelloSyncPlan {
        return new KatelloSyncPlan(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'foreman:index/katelloSyncPlan:KatelloSyncPlan';

    /**
     * Returns true if the given object is an instance of KatelloSyncPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KatelloSyncPlan {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KatelloSyncPlan.__pulumiType;
    }

    /**
     * @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
     */
    public /*out*/ readonly __meta_!: pulumi.Output<boolean>;
    /**
     * Custom cron logic for sync plan.@EXAMPLE "*&#47;5 * * * *"
     */
    public readonly cronExpression!: pulumi.Output<string | undefined>;
    /**
     * Sync plan description.@EXAMPLE "A sync plan description"
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enables or disables synchronization.@EXAMPLE true
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
     * "daily"
     */
    public readonly interval!: pulumi.Output<string>;
    /**
     * Sync plan name.@EXAMPLE "daily"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
     * difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
     */
    public readonly syncDate!: pulumi.Output<string>;

    /**
     * Create a KatelloSyncPlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KatelloSyncPlanArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KatelloSyncPlanArgs | KatelloSyncPlanState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KatelloSyncPlanState | undefined;
            resourceInputs["__meta_"] = state ? state.__meta_ : undefined;
            resourceInputs["cronExpression"] = state ? state.cronExpression : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["syncDate"] = state ? state.syncDate : undefined;
        } else {
            const args = argsOrState as KatelloSyncPlanArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.syncDate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'syncDate'");
            }
            resourceInputs["cronExpression"] = args ? args.cronExpression : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["syncDate"] = args ? args.syncDate : undefined;
            resourceInputs["__meta_"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KatelloSyncPlan.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KatelloSyncPlan resources.
 */
export interface KatelloSyncPlanState {
    /**
     * @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
     */
    __meta_?: pulumi.Input<boolean>;
    /**
     * Custom cron logic for sync plan.@EXAMPLE "*&#47;5 * * * *"
     */
    cronExpression?: pulumi.Input<string>;
    /**
     * Sync plan description.@EXAMPLE "A sync plan description"
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables synchronization.@EXAMPLE true
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
     * "daily"
     */
    interval?: pulumi.Input<string>;
    /**
     * Sync plan name.@EXAMPLE "daily"
     */
    name?: pulumi.Input<string>;
    /**
     * Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
     * difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
     */
    syncDate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KatelloSyncPlan resource.
 */
export interface KatelloSyncPlanArgs {
    /**
     * Custom cron logic for sync plan.@EXAMPLE "*&#47;5 * * * *"
     */
    cronExpression?: pulumi.Input<string>;
    /**
     * Sync plan description.@EXAMPLE "A sync plan description"
     */
    description?: pulumi.Input<string>;
    /**
     * Enables or disables synchronization.@EXAMPLE true
     */
    enabled: pulumi.Input<boolean>;
    /**
     * How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
     * "daily"
     */
    interval: pulumi.Input<string>;
    /**
     * Sync plan name.@EXAMPLE "daily"
     */
    name?: pulumi.Input<string>;
    /**
     * Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
     * difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
     */
    syncDate: pulumi.Input<string>;
}
