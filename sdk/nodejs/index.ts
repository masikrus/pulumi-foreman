// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ArchitectureArgs, ArchitectureState } from "./architecture";
export type Architecture = import("./architecture").Architecture;
export const Architecture: typeof import("./architecture").Architecture = null as any;
utilities.lazyLoad(exports, ["Architecture"], () => require("./architecture"));

export { ComputeprofileArgs, ComputeprofileState } from "./computeprofile";
export type Computeprofile = import("./computeprofile").Computeprofile;
export const Computeprofile: typeof import("./computeprofile").Computeprofile = null as any;
utilities.lazyLoad(exports, ["Computeprofile"], () => require("./computeprofile"));

export { ComputeresourceArgs, ComputeresourceState } from "./computeresource";
export type Computeresource = import("./computeresource").Computeresource;
export const Computeresource: typeof import("./computeresource").Computeresource = null as any;
utilities.lazyLoad(exports, ["Computeresource"], () => require("./computeresource"));

export { DefaulttemplateArgs, DefaulttemplateState } from "./defaulttemplate";
export type Defaulttemplate = import("./defaulttemplate").Defaulttemplate;
export const Defaulttemplate: typeof import("./defaulttemplate").Defaulttemplate = null as any;
utilities.lazyLoad(exports, ["Defaulttemplate"], () => require("./defaulttemplate"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetArchitectureArgs, GetArchitectureResult, GetArchitectureOutputArgs } from "./getArchitecture";
export const getArchitecture: typeof import("./getArchitecture").getArchitecture = null as any;
export const getArchitectureOutput: typeof import("./getArchitecture").getArchitectureOutput = null as any;
utilities.lazyLoad(exports, ["getArchitecture","getArchitectureOutput"], () => require("./getArchitecture"));

export { GetComputeprofileArgs, GetComputeprofileResult, GetComputeprofileOutputArgs } from "./getComputeprofile";
export const getComputeprofile: typeof import("./getComputeprofile").getComputeprofile = null as any;
export const getComputeprofileOutput: typeof import("./getComputeprofile").getComputeprofileOutput = null as any;
utilities.lazyLoad(exports, ["getComputeprofile","getComputeprofileOutput"], () => require("./getComputeprofile"));

export { GetComputeresourceArgs, GetComputeresourceResult, GetComputeresourceOutputArgs } from "./getComputeresource";
export const getComputeresource: typeof import("./getComputeresource").getComputeresource = null as any;
export const getComputeresourceOutput: typeof import("./getComputeresource").getComputeresourceOutput = null as any;
utilities.lazyLoad(exports, ["getComputeresource","getComputeresourceOutput"], () => require("./getComputeresource"));

export { GetDefaulttemplateArgs, GetDefaulttemplateResult, GetDefaulttemplateOutputArgs } from "./getDefaulttemplate";
export const getDefaulttemplate: typeof import("./getDefaulttemplate").getDefaulttemplate = null as any;
export const getDefaulttemplateOutput: typeof import("./getDefaulttemplate").getDefaulttemplateOutput = null as any;
utilities.lazyLoad(exports, ["getDefaulttemplate","getDefaulttemplateOutput"], () => require("./getDefaulttemplate"));

export { GetDomainArgs, GetDomainResult, GetDomainOutputArgs } from "./getDomain";
export const getDomain: typeof import("./getDomain").getDomain = null as any;
export const getDomainOutput: typeof import("./getDomain").getDomainOutput = null as any;
utilities.lazyLoad(exports, ["getDomain","getDomainOutput"], () => require("./getDomain"));

export { GetEnvironmentArgs, GetEnvironmentResult, GetEnvironmentOutputArgs } from "./getEnvironment";
export const getEnvironment: typeof import("./getEnvironment").getEnvironment = null as any;
export const getEnvironmentOutput: typeof import("./getEnvironment").getEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironment","getEnvironmentOutput"], () => require("./getEnvironment"));

export { GetGlobalParameterArgs, GetGlobalParameterResult, GetGlobalParameterOutputArgs } from "./getGlobalParameter";
export const getGlobalParameter: typeof import("./getGlobalParameter").getGlobalParameter = null as any;
export const getGlobalParameterOutput: typeof import("./getGlobalParameter").getGlobalParameterOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalParameter","getGlobalParameterOutput"], () => require("./getGlobalParameter"));

export { GetHostgroupArgs, GetHostgroupResult, GetHostgroupOutputArgs } from "./getHostgroup";
export const getHostgroup: typeof import("./getHostgroup").getHostgroup = null as any;
export const getHostgroupOutput: typeof import("./getHostgroup").getHostgroupOutput = null as any;
utilities.lazyLoad(exports, ["getHostgroup","getHostgroupOutput"], () => require("./getHostgroup"));

export { GetHttpproxyArgs, GetHttpproxyResult, GetHttpproxyOutputArgs } from "./getHttpproxy";
export const getHttpproxy: typeof import("./getHttpproxy").getHttpproxy = null as any;
export const getHttpproxyOutput: typeof import("./getHttpproxy").getHttpproxyOutput = null as any;
utilities.lazyLoad(exports, ["getHttpproxy","getHttpproxyOutput"], () => require("./getHttpproxy"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetJobtemplateArgs, GetJobtemplateResult, GetJobtemplateOutputArgs } from "./getJobtemplate";
export const getJobtemplate: typeof import("./getJobtemplate").getJobtemplate = null as any;
export const getJobtemplateOutput: typeof import("./getJobtemplate").getJobtemplateOutput = null as any;
utilities.lazyLoad(exports, ["getJobtemplate","getJobtemplateOutput"], () => require("./getJobtemplate"));

export { GetKatelloContentCredentialArgs, GetKatelloContentCredentialResult, GetKatelloContentCredentialOutputArgs } from "./getKatelloContentCredential";
export const getKatelloContentCredential: typeof import("./getKatelloContentCredential").getKatelloContentCredential = null as any;
export const getKatelloContentCredentialOutput: typeof import("./getKatelloContentCredential").getKatelloContentCredentialOutput = null as any;
utilities.lazyLoad(exports, ["getKatelloContentCredential","getKatelloContentCredentialOutput"], () => require("./getKatelloContentCredential"));

export { GetKatelloContentViewArgs, GetKatelloContentViewResult, GetKatelloContentViewOutputArgs } from "./getKatelloContentView";
export const getKatelloContentView: typeof import("./getKatelloContentView").getKatelloContentView = null as any;
export const getKatelloContentViewOutput: typeof import("./getKatelloContentView").getKatelloContentViewOutput = null as any;
utilities.lazyLoad(exports, ["getKatelloContentView","getKatelloContentViewOutput"], () => require("./getKatelloContentView"));

export { GetKatelloLifecycleEnvironmentArgs, GetKatelloLifecycleEnvironmentResult, GetKatelloLifecycleEnvironmentOutputArgs } from "./getKatelloLifecycleEnvironment";
export const getKatelloLifecycleEnvironment: typeof import("./getKatelloLifecycleEnvironment").getKatelloLifecycleEnvironment = null as any;
export const getKatelloLifecycleEnvironmentOutput: typeof import("./getKatelloLifecycleEnvironment").getKatelloLifecycleEnvironmentOutput = null as any;
utilities.lazyLoad(exports, ["getKatelloLifecycleEnvironment","getKatelloLifecycleEnvironmentOutput"], () => require("./getKatelloLifecycleEnvironment"));

export { GetKatelloProductArgs, GetKatelloProductResult, GetKatelloProductOutputArgs } from "./getKatelloProduct";
export const getKatelloProduct: typeof import("./getKatelloProduct").getKatelloProduct = null as any;
export const getKatelloProductOutput: typeof import("./getKatelloProduct").getKatelloProductOutput = null as any;
utilities.lazyLoad(exports, ["getKatelloProduct","getKatelloProductOutput"], () => require("./getKatelloProduct"));

export { GetKatelloRepositoryArgs, GetKatelloRepositoryResult, GetKatelloRepositoryOutputArgs } from "./getKatelloRepository";
export const getKatelloRepository: typeof import("./getKatelloRepository").getKatelloRepository = null as any;
export const getKatelloRepositoryOutput: typeof import("./getKatelloRepository").getKatelloRepositoryOutput = null as any;
utilities.lazyLoad(exports, ["getKatelloRepository","getKatelloRepositoryOutput"], () => require("./getKatelloRepository"));

export { GetKatelloSyncPlanArgs, GetKatelloSyncPlanResult, GetKatelloSyncPlanOutputArgs } from "./getKatelloSyncPlan";
export const getKatelloSyncPlan: typeof import("./getKatelloSyncPlan").getKatelloSyncPlan = null as any;
export const getKatelloSyncPlanOutput: typeof import("./getKatelloSyncPlan").getKatelloSyncPlanOutput = null as any;
utilities.lazyLoad(exports, ["getKatelloSyncPlan","getKatelloSyncPlanOutput"], () => require("./getKatelloSyncPlan"));

export { GetMediaArgs, GetMediaResult, GetMediaOutputArgs } from "./getMedia";
export const getMedia: typeof import("./getMedia").getMedia = null as any;
export const getMediaOutput: typeof import("./getMedia").getMediaOutput = null as any;
utilities.lazyLoad(exports, ["getMedia","getMediaOutput"], () => require("./getMedia"));

export { GetModelArgs, GetModelResult, GetModelOutputArgs } from "./getModel";
export const getModel: typeof import("./getModel").getModel = null as any;
export const getModelOutput: typeof import("./getModel").getModelOutput = null as any;
utilities.lazyLoad(exports, ["getModel","getModelOutput"], () => require("./getModel"));

export { GetOperatingsystemArgs, GetOperatingsystemResult, GetOperatingsystemOutputArgs } from "./getOperatingsystem";
export const getOperatingsystem: typeof import("./getOperatingsystem").getOperatingsystem = null as any;
export const getOperatingsystemOutput: typeof import("./getOperatingsystem").getOperatingsystemOutput = null as any;
utilities.lazyLoad(exports, ["getOperatingsystem","getOperatingsystemOutput"], () => require("./getOperatingsystem"));

export { GetParameterArgs, GetParameterResult, GetParameterOutputArgs } from "./getParameter";
export const getParameter: typeof import("./getParameter").getParameter = null as any;
export const getParameterOutput: typeof import("./getParameter").getParameterOutput = null as any;
utilities.lazyLoad(exports, ["getParameter","getParameterOutput"], () => require("./getParameter"));

export { GetPartitiontableArgs, GetPartitiontableResult, GetPartitiontableOutputArgs } from "./getPartitiontable";
export const getPartitiontable: typeof import("./getPartitiontable").getPartitiontable = null as any;
export const getPartitiontableOutput: typeof import("./getPartitiontable").getPartitiontableOutput = null as any;
utilities.lazyLoad(exports, ["getPartitiontable","getPartitiontableOutput"], () => require("./getPartitiontable"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetProvisioningtemplateArgs, GetProvisioningtemplateResult, GetProvisioningtemplateOutputArgs } from "./getProvisioningtemplate";
export const getProvisioningtemplate: typeof import("./getProvisioningtemplate").getProvisioningtemplate = null as any;
export const getProvisioningtemplateOutput: typeof import("./getProvisioningtemplate").getProvisioningtemplateOutput = null as any;
utilities.lazyLoad(exports, ["getProvisioningtemplate","getProvisioningtemplateOutput"], () => require("./getProvisioningtemplate"));

export { GetPuppetclassArgs, GetPuppetclassResult, GetPuppetclassOutputArgs } from "./getPuppetclass";
export const getPuppetclass: typeof import("./getPuppetclass").getPuppetclass = null as any;
export const getPuppetclassOutput: typeof import("./getPuppetclass").getPuppetclassOutput = null as any;
utilities.lazyLoad(exports, ["getPuppetclass","getPuppetclassOutput"], () => require("./getPuppetclass"));

export { GetSettingArgs, GetSettingResult, GetSettingOutputArgs } from "./getSetting";
export const getSetting: typeof import("./getSetting").getSetting = null as any;
export const getSettingOutput: typeof import("./getSetting").getSettingOutput = null as any;
utilities.lazyLoad(exports, ["getSetting","getSettingOutput"], () => require("./getSetting"));

export { GetSmartclassparameterArgs, GetSmartclassparameterResult, GetSmartclassparameterOutputArgs } from "./getSmartclassparameter";
export const getSmartclassparameter: typeof import("./getSmartclassparameter").getSmartclassparameter = null as any;
export const getSmartclassparameterOutput: typeof import("./getSmartclassparameter").getSmartclassparameterOutput = null as any;
utilities.lazyLoad(exports, ["getSmartclassparameter","getSmartclassparameterOutput"], () => require("./getSmartclassparameter"));

export { GetSmartproxyArgs, GetSmartproxyResult, GetSmartproxyOutputArgs } from "./getSmartproxy";
export const getSmartproxy: typeof import("./getSmartproxy").getSmartproxy = null as any;
export const getSmartproxyOutput: typeof import("./getSmartproxy").getSmartproxyOutput = null as any;
utilities.lazyLoad(exports, ["getSmartproxy","getSmartproxyOutput"], () => require("./getSmartproxy"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetTemplateinputResult } from "./getTemplateinput";
export const getTemplateinput: typeof import("./getTemplateinput").getTemplateinput = null as any;
export const getTemplateinputOutput: typeof import("./getTemplateinput").getTemplateinputOutput = null as any;
utilities.lazyLoad(exports, ["getTemplateinput","getTemplateinputOutput"], () => require("./getTemplateinput"));

export { GetTemplatekindArgs, GetTemplatekindResult, GetTemplatekindOutputArgs } from "./getTemplatekind";
export const getTemplatekind: typeof import("./getTemplatekind").getTemplatekind = null as any;
export const getTemplatekindOutput: typeof import("./getTemplatekind").getTemplatekindOutput = null as any;
utilities.lazyLoad(exports, ["getTemplatekind","getTemplatekindOutput"], () => require("./getTemplatekind"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsergroupArgs, GetUsergroupResult, GetUsergroupOutputArgs } from "./getUsergroup";
export const getUsergroup: typeof import("./getUsergroup").getUsergroup = null as any;
export const getUsergroupOutput: typeof import("./getUsergroup").getUsergroupOutput = null as any;
utilities.lazyLoad(exports, ["getUsergroup","getUsergroupOutput"], () => require("./getUsergroup"));

export { GlobalParameterArgs, GlobalParameterState } from "./globalParameter";
export type GlobalParameter = import("./globalParameter").GlobalParameter;
export const GlobalParameter: typeof import("./globalParameter").GlobalParameter = null as any;
utilities.lazyLoad(exports, ["GlobalParameter"], () => require("./globalParameter"));

export { HostArgs, HostState } from "./host";
export type Host = import("./host").Host;
export const Host: typeof import("./host").Host = null as any;
utilities.lazyLoad(exports, ["Host"], () => require("./host"));

export { HostgroupArgs, HostgroupState } from "./hostgroup";
export type Hostgroup = import("./hostgroup").Hostgroup;
export const Hostgroup: typeof import("./hostgroup").Hostgroup = null as any;
utilities.lazyLoad(exports, ["Hostgroup"], () => require("./hostgroup"));

export { HttpproxyArgs, HttpproxyState } from "./httpproxy";
export type Httpproxy = import("./httpproxy").Httpproxy;
export const Httpproxy: typeof import("./httpproxy").Httpproxy = null as any;
utilities.lazyLoad(exports, ["Httpproxy"], () => require("./httpproxy"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { JobtemplateArgs, JobtemplateState } from "./jobtemplate";
export type Jobtemplate = import("./jobtemplate").Jobtemplate;
export const Jobtemplate: typeof import("./jobtemplate").Jobtemplate = null as any;
utilities.lazyLoad(exports, ["Jobtemplate"], () => require("./jobtemplate"));

export { KatelloContentCredentialArgs, KatelloContentCredentialState } from "./katelloContentCredential";
export type KatelloContentCredential = import("./katelloContentCredential").KatelloContentCredential;
export const KatelloContentCredential: typeof import("./katelloContentCredential").KatelloContentCredential = null as any;
utilities.lazyLoad(exports, ["KatelloContentCredential"], () => require("./katelloContentCredential"));

export { KatelloContentViewArgs, KatelloContentViewState } from "./katelloContentView";
export type KatelloContentView = import("./katelloContentView").KatelloContentView;
export const KatelloContentView: typeof import("./katelloContentView").KatelloContentView = null as any;
utilities.lazyLoad(exports, ["KatelloContentView"], () => require("./katelloContentView"));

export { KatelloLifecycleEnvironmentArgs, KatelloLifecycleEnvironmentState } from "./katelloLifecycleEnvironment";
export type KatelloLifecycleEnvironment = import("./katelloLifecycleEnvironment").KatelloLifecycleEnvironment;
export const KatelloLifecycleEnvironment: typeof import("./katelloLifecycleEnvironment").KatelloLifecycleEnvironment = null as any;
utilities.lazyLoad(exports, ["KatelloLifecycleEnvironment"], () => require("./katelloLifecycleEnvironment"));

export { KatelloProductArgs, KatelloProductState } from "./katelloProduct";
export type KatelloProduct = import("./katelloProduct").KatelloProduct;
export const KatelloProduct: typeof import("./katelloProduct").KatelloProduct = null as any;
utilities.lazyLoad(exports, ["KatelloProduct"], () => require("./katelloProduct"));

export { KatelloRepositoryArgs, KatelloRepositoryState } from "./katelloRepository";
export type KatelloRepository = import("./katelloRepository").KatelloRepository;
export const KatelloRepository: typeof import("./katelloRepository").KatelloRepository = null as any;
utilities.lazyLoad(exports, ["KatelloRepository"], () => require("./katelloRepository"));

export { KatelloSyncPlanArgs, KatelloSyncPlanState } from "./katelloSyncPlan";
export type KatelloSyncPlan = import("./katelloSyncPlan").KatelloSyncPlan;
export const KatelloSyncPlan: typeof import("./katelloSyncPlan").KatelloSyncPlan = null as any;
utilities.lazyLoad(exports, ["KatelloSyncPlan"], () => require("./katelloSyncPlan"));

export { MediaArgs, MediaState } from "./media";
export type Media = import("./media").Media;
export const Media: typeof import("./media").Media = null as any;
utilities.lazyLoad(exports, ["Media"], () => require("./media"));

export { ModelArgs, ModelState } from "./model";
export type Model = import("./model").Model;
export const Model: typeof import("./model").Model = null as any;
utilities.lazyLoad(exports, ["Model"], () => require("./model"));

export { OperatingsystemArgs, OperatingsystemState } from "./operatingsystem";
export type Operatingsystem = import("./operatingsystem").Operatingsystem;
export const Operatingsystem: typeof import("./operatingsystem").Operatingsystem = null as any;
utilities.lazyLoad(exports, ["Operatingsystem"], () => require("./operatingsystem"));

export { OverrideValueArgs, OverrideValueState } from "./overrideValue";
export type OverrideValue = import("./overrideValue").OverrideValue;
export const OverrideValue: typeof import("./overrideValue").OverrideValue = null as any;
utilities.lazyLoad(exports, ["OverrideValue"], () => require("./overrideValue"));

export { ParameterArgs, ParameterState } from "./parameter";
export type Parameter = import("./parameter").Parameter;
export const Parameter: typeof import("./parameter").Parameter = null as any;
utilities.lazyLoad(exports, ["Parameter"], () => require("./parameter"));

export { PartitiontableArgs, PartitiontableState } from "./partitiontable";
export type Partitiontable = import("./partitiontable").Partitiontable;
export const Partitiontable: typeof import("./partitiontable").Partitiontable = null as any;
utilities.lazyLoad(exports, ["Partitiontable"], () => require("./partitiontable"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProvisioningtemplateArgs, ProvisioningtemplateState } from "./provisioningtemplate";
export type Provisioningtemplate = import("./provisioningtemplate").Provisioningtemplate;
export const Provisioningtemplate: typeof import("./provisioningtemplate").Provisioningtemplate = null as any;
utilities.lazyLoad(exports, ["Provisioningtemplate"], () => require("./provisioningtemplate"));

export { SmartproxyArgs, SmartproxyState } from "./smartproxy";
export type Smartproxy = import("./smartproxy").Smartproxy;
export const Smartproxy: typeof import("./smartproxy").Smartproxy = null as any;
utilities.lazyLoad(exports, ["Smartproxy"], () => require("./smartproxy"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { TemplateinputArgs, TemplateinputState } from "./templateinput";
export type Templateinput = import("./templateinput").Templateinput;
export const Templateinput: typeof import("./templateinput").Templateinput = null as any;
utilities.lazyLoad(exports, ["Templateinput"], () => require("./templateinput"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UsergroupArgs, UsergroupState } from "./usergroup";
export type Usergroup = import("./usergroup").Usergroup;
export const Usergroup: typeof import("./usergroup").Usergroup = null as any;
utilities.lazyLoad(exports, ["Usergroup"], () => require("./usergroup"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "foreman:index/architecture:Architecture":
                return new Architecture(name, <any>undefined, { urn })
            case "foreman:index/computeprofile:Computeprofile":
                return new Computeprofile(name, <any>undefined, { urn })
            case "foreman:index/computeresource:Computeresource":
                return new Computeresource(name, <any>undefined, { urn })
            case "foreman:index/defaulttemplate:Defaulttemplate":
                return new Defaulttemplate(name, <any>undefined, { urn })
            case "foreman:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "foreman:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "foreman:index/globalParameter:GlobalParameter":
                return new GlobalParameter(name, <any>undefined, { urn })
            case "foreman:index/host:Host":
                return new Host(name, <any>undefined, { urn })
            case "foreman:index/hostgroup:Hostgroup":
                return new Hostgroup(name, <any>undefined, { urn })
            case "foreman:index/httpproxy:Httpproxy":
                return new Httpproxy(name, <any>undefined, { urn })
            case "foreman:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "foreman:index/jobtemplate:Jobtemplate":
                return new Jobtemplate(name, <any>undefined, { urn })
            case "foreman:index/katelloContentCredential:KatelloContentCredential":
                return new KatelloContentCredential(name, <any>undefined, { urn })
            case "foreman:index/katelloContentView:KatelloContentView":
                return new KatelloContentView(name, <any>undefined, { urn })
            case "foreman:index/katelloLifecycleEnvironment:KatelloLifecycleEnvironment":
                return new KatelloLifecycleEnvironment(name, <any>undefined, { urn })
            case "foreman:index/katelloProduct:KatelloProduct":
                return new KatelloProduct(name, <any>undefined, { urn })
            case "foreman:index/katelloRepository:KatelloRepository":
                return new KatelloRepository(name, <any>undefined, { urn })
            case "foreman:index/katelloSyncPlan:KatelloSyncPlan":
                return new KatelloSyncPlan(name, <any>undefined, { urn })
            case "foreman:index/media:Media":
                return new Media(name, <any>undefined, { urn })
            case "foreman:index/model:Model":
                return new Model(name, <any>undefined, { urn })
            case "foreman:index/operatingsystem:Operatingsystem":
                return new Operatingsystem(name, <any>undefined, { urn })
            case "foreman:index/overrideValue:OverrideValue":
                return new OverrideValue(name, <any>undefined, { urn })
            case "foreman:index/parameter:Parameter":
                return new Parameter(name, <any>undefined, { urn })
            case "foreman:index/partitiontable:Partitiontable":
                return new Partitiontable(name, <any>undefined, { urn })
            case "foreman:index/provisioningtemplate:Provisioningtemplate":
                return new Provisioningtemplate(name, <any>undefined, { urn })
            case "foreman:index/smartproxy:Smartproxy":
                return new Smartproxy(name, <any>undefined, { urn })
            case "foreman:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "foreman:index/templateinput:Templateinput":
                return new Templateinput(name, <any>undefined, { urn })
            case "foreman:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "foreman:index/usergroup:Usergroup":
                return new Usergroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("foreman", "index/architecture", _module)
pulumi.runtime.registerResourceModule("foreman", "index/computeprofile", _module)
pulumi.runtime.registerResourceModule("foreman", "index/computeresource", _module)
pulumi.runtime.registerResourceModule("foreman", "index/defaulttemplate", _module)
pulumi.runtime.registerResourceModule("foreman", "index/domain", _module)
pulumi.runtime.registerResourceModule("foreman", "index/environment", _module)
pulumi.runtime.registerResourceModule("foreman", "index/globalParameter", _module)
pulumi.runtime.registerResourceModule("foreman", "index/host", _module)
pulumi.runtime.registerResourceModule("foreman", "index/hostgroup", _module)
pulumi.runtime.registerResourceModule("foreman", "index/httpproxy", _module)
pulumi.runtime.registerResourceModule("foreman", "index/image", _module)
pulumi.runtime.registerResourceModule("foreman", "index/jobtemplate", _module)
pulumi.runtime.registerResourceModule("foreman", "index/katelloContentCredential", _module)
pulumi.runtime.registerResourceModule("foreman", "index/katelloContentView", _module)
pulumi.runtime.registerResourceModule("foreman", "index/katelloLifecycleEnvironment", _module)
pulumi.runtime.registerResourceModule("foreman", "index/katelloProduct", _module)
pulumi.runtime.registerResourceModule("foreman", "index/katelloRepository", _module)
pulumi.runtime.registerResourceModule("foreman", "index/katelloSyncPlan", _module)
pulumi.runtime.registerResourceModule("foreman", "index/media", _module)
pulumi.runtime.registerResourceModule("foreman", "index/model", _module)
pulumi.runtime.registerResourceModule("foreman", "index/operatingsystem", _module)
pulumi.runtime.registerResourceModule("foreman", "index/overrideValue", _module)
pulumi.runtime.registerResourceModule("foreman", "index/parameter", _module)
pulumi.runtime.registerResourceModule("foreman", "index/partitiontable", _module)
pulumi.runtime.registerResourceModule("foreman", "index/provisioningtemplate", _module)
pulumi.runtime.registerResourceModule("foreman", "index/smartproxy", _module)
pulumi.runtime.registerResourceModule("foreman", "index/subnet", _module)
pulumi.runtime.registerResourceModule("foreman", "index/templateinput", _module)
pulumi.runtime.registerResourceModule("foreman", "index/user", _module)
pulumi.runtime.registerResourceModule("foreman", "index/usergroup", _module)
pulumi.runtime.registerResourcePackage("foreman", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:foreman") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
