// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Hostgroup extends pulumi.CustomResource {
    /**
     * Get an existing Hostgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostgroupState, opts?: pulumi.CustomResourceOptions): Hostgroup {
        return new Hostgroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'foreman:index/hostgroup:Hostgroup';

    /**
     * Returns true if the given object is an instance of Hostgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Hostgroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Hostgroup.__pulumiType;
    }

    /**
     * @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
     * get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
     * configuration of various hosts based on common attributes.
     */
    public /*out*/ readonly __meta_!: pulumi.Output<boolean>;
    /**
     * ID of the architecture associated with this hostgroup.
     */
    public readonly architectureId!: pulumi.Output<number>;
    /**
     * ID of the compute profile associated with this hostgroup.
     */
    public readonly computeProfileId!: pulumi.Output<number>;
    /**
     * ID of the compute resource associated with this hostgroup.
     */
    public readonly computeResourceId!: pulumi.Output<number>;
    /**
     * IDs of the applied config groups.
     */
    public readonly configGroupIds!: pulumi.Output<number[]>;
    /**
     * ID of the content source associated with this hostgroup.
     */
    public readonly contentSourceId!: pulumi.Output<number>;
    /**
     * ID of the content view associated with this hostgroup.
     */
    public readonly contentViewId!: pulumi.Output<number>;
    /**
     * ID of the domain associated with this hostgroup.
     */
    public readonly domainId!: pulumi.Output<number>;
    /**
     * ID of the environment associated with this hostgroup.
     */
    public readonly environmentId!: pulumi.Output<number>;
    /**
     * ID of the lifecycle environment associated with this hostgroup.
     */
    public readonly lifecycleEnvironmentId!: pulumi.Output<number>;
    /**
     * ID of the media associated with this hostgroup.
     */
    public readonly mediumId!: pulumi.Output<number>;
    /**
     * Hostgroup name. @EXAMPLE "compute"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the operating system associated with this hostgroup.
     */
    public readonly operatingsystemId!: pulumi.Output<number>;
    /**
     * A map of parameters that will be saved as hostgroup parameters in the group config.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * ID of the parent hostgroup.
     */
    public readonly parentId!: pulumi.Output<number | undefined>;
    /**
     * ID of the partition table associated with this hostgroup.
     */
    public readonly ptableId!: pulumi.Output<number>;
    /**
     * ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
     */
    public readonly puppetCaProxyId!: pulumi.Output<number | undefined>;
    /**
     * IDs of the applied puppet classes.
     */
    public readonly puppetClassIds!: pulumi.Output<number[]>;
    /**
     * ID of the smart proxy acting as the puppet proxy server for this hostgroup.
     */
    public readonly puppetProxyId!: pulumi.Output<number | undefined>;
    /**
     * Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
     * UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
     * HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
     */
    public readonly pxeLoader!: pulumi.Output<string>;
    /**
     * ID of the realm associated with this hostgroup.
     */
    public readonly realmId!: pulumi.Output<number>;
    /**
     * Default root password
     */
    public readonly rootPassword!: pulumi.Output<string | undefined>;
    /**
     * ID of the subnet associated with the hostgroup.
     */
    public readonly subnetId!: pulumi.Output<number>;
    /**
     * The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
     * tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
     */
    public /*out*/ readonly title!: pulumi.Output<string>;

    /**
     * Create a Hostgroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: HostgroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostgroupArgs | HostgroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostgroupState | undefined;
            resourceInputs["__meta_"] = state ? state.__meta_ : undefined;
            resourceInputs["architectureId"] = state ? state.architectureId : undefined;
            resourceInputs["computeProfileId"] = state ? state.computeProfileId : undefined;
            resourceInputs["computeResourceId"] = state ? state.computeResourceId : undefined;
            resourceInputs["configGroupIds"] = state ? state.configGroupIds : undefined;
            resourceInputs["contentSourceId"] = state ? state.contentSourceId : undefined;
            resourceInputs["contentViewId"] = state ? state.contentViewId : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["lifecycleEnvironmentId"] = state ? state.lifecycleEnvironmentId : undefined;
            resourceInputs["mediumId"] = state ? state.mediumId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatingsystemId"] = state ? state.operatingsystemId : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["ptableId"] = state ? state.ptableId : undefined;
            resourceInputs["puppetCaProxyId"] = state ? state.puppetCaProxyId : undefined;
            resourceInputs["puppetClassIds"] = state ? state.puppetClassIds : undefined;
            resourceInputs["puppetProxyId"] = state ? state.puppetProxyId : undefined;
            resourceInputs["pxeLoader"] = state ? state.pxeLoader : undefined;
            resourceInputs["realmId"] = state ? state.realmId : undefined;
            resourceInputs["rootPassword"] = state ? state.rootPassword : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
        } else {
            const args = argsOrState as HostgroupArgs | undefined;
            resourceInputs["architectureId"] = args ? args.architectureId : undefined;
            resourceInputs["computeProfileId"] = args ? args.computeProfileId : undefined;
            resourceInputs["computeResourceId"] = args ? args.computeResourceId : undefined;
            resourceInputs["configGroupIds"] = args ? args.configGroupIds : undefined;
            resourceInputs["contentSourceId"] = args ? args.contentSourceId : undefined;
            resourceInputs["contentViewId"] = args ? args.contentViewId : undefined;
            resourceInputs["domainId"] = args ? args.domainId : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["lifecycleEnvironmentId"] = args ? args.lifecycleEnvironmentId : undefined;
            resourceInputs["mediumId"] = args ? args.mediumId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operatingsystemId"] = args ? args.operatingsystemId : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["ptableId"] = args ? args.ptableId : undefined;
            resourceInputs["puppetCaProxyId"] = args ? args.puppetCaProxyId : undefined;
            resourceInputs["puppetClassIds"] = args ? args.puppetClassIds : undefined;
            resourceInputs["puppetProxyId"] = args ? args.puppetProxyId : undefined;
            resourceInputs["pxeLoader"] = args ? args.pxeLoader : undefined;
            resourceInputs["realmId"] = args ? args.realmId : undefined;
            resourceInputs["rootPassword"] = args?.rootPassword ? pulumi.secret(args.rootPassword) : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["__meta_"] = undefined /*out*/;
            resourceInputs["title"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["rootPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Hostgroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Hostgroup resources.
 */
export interface HostgroupState {
    /**
     * @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
     * get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
     * configuration of various hosts based on common attributes.
     */
    __meta_?: pulumi.Input<boolean>;
    /**
     * ID of the architecture associated with this hostgroup.
     */
    architectureId?: pulumi.Input<number>;
    /**
     * ID of the compute profile associated with this hostgroup.
     */
    computeProfileId?: pulumi.Input<number>;
    /**
     * ID of the compute resource associated with this hostgroup.
     */
    computeResourceId?: pulumi.Input<number>;
    /**
     * IDs of the applied config groups.
     */
    configGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the content source associated with this hostgroup.
     */
    contentSourceId?: pulumi.Input<number>;
    /**
     * ID of the content view associated with this hostgroup.
     */
    contentViewId?: pulumi.Input<number>;
    /**
     * ID of the domain associated with this hostgroup.
     */
    domainId?: pulumi.Input<number>;
    /**
     * ID of the environment associated with this hostgroup.
     */
    environmentId?: pulumi.Input<number>;
    /**
     * ID of the lifecycle environment associated with this hostgroup.
     */
    lifecycleEnvironmentId?: pulumi.Input<number>;
    /**
     * ID of the media associated with this hostgroup.
     */
    mediumId?: pulumi.Input<number>;
    /**
     * Hostgroup name. @EXAMPLE "compute"
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the operating system associated with this hostgroup.
     */
    operatingsystemId?: pulumi.Input<number>;
    /**
     * A map of parameters that will be saved as hostgroup parameters in the group config.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the parent hostgroup.
     */
    parentId?: pulumi.Input<number>;
    /**
     * ID of the partition table associated with this hostgroup.
     */
    ptableId?: pulumi.Input<number>;
    /**
     * ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
     */
    puppetCaProxyId?: pulumi.Input<number>;
    /**
     * IDs of the applied puppet classes.
     */
    puppetClassIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the smart proxy acting as the puppet proxy server for this hostgroup.
     */
    puppetProxyId?: pulumi.Input<number>;
    /**
     * Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
     * UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
     * HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
     */
    pxeLoader?: pulumi.Input<string>;
    /**
     * ID of the realm associated with this hostgroup.
     */
    realmId?: pulumi.Input<number>;
    /**
     * Default root password
     */
    rootPassword?: pulumi.Input<string>;
    /**
     * ID of the subnet associated with the hostgroup.
     */
    subnetId?: pulumi.Input<number>;
    /**
     * The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
     * tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
     */
    title?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Hostgroup resource.
 */
export interface HostgroupArgs {
    /**
     * ID of the architecture associated with this hostgroup.
     */
    architectureId?: pulumi.Input<number>;
    /**
     * ID of the compute profile associated with this hostgroup.
     */
    computeProfileId?: pulumi.Input<number>;
    /**
     * ID of the compute resource associated with this hostgroup.
     */
    computeResourceId?: pulumi.Input<number>;
    /**
     * IDs of the applied config groups.
     */
    configGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the content source associated with this hostgroup.
     */
    contentSourceId?: pulumi.Input<number>;
    /**
     * ID of the content view associated with this hostgroup.
     */
    contentViewId?: pulumi.Input<number>;
    /**
     * ID of the domain associated with this hostgroup.
     */
    domainId?: pulumi.Input<number>;
    /**
     * ID of the environment associated with this hostgroup.
     */
    environmentId?: pulumi.Input<number>;
    /**
     * ID of the lifecycle environment associated with this hostgroup.
     */
    lifecycleEnvironmentId?: pulumi.Input<number>;
    /**
     * ID of the media associated with this hostgroup.
     */
    mediumId?: pulumi.Input<number>;
    /**
     * Hostgroup name. @EXAMPLE "compute"
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the operating system associated with this hostgroup.
     */
    operatingsystemId?: pulumi.Input<number>;
    /**
     * A map of parameters that will be saved as hostgroup parameters in the group config.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * ID of the parent hostgroup.
     */
    parentId?: pulumi.Input<number>;
    /**
     * ID of the partition table associated with this hostgroup.
     */
    ptableId?: pulumi.Input<number>;
    /**
     * ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
     */
    puppetCaProxyId?: pulumi.Input<number>;
    /**
     * IDs of the applied puppet classes.
     */
    puppetClassIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * ID of the smart proxy acting as the puppet proxy server for this hostgroup.
     */
    puppetProxyId?: pulumi.Input<number>;
    /**
     * Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
     * UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
     * HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
     */
    pxeLoader?: pulumi.Input<string>;
    /**
     * ID of the realm associated with this hostgroup.
     */
    realmId?: pulumi.Input<number>;
    /**
     * Default root password
     */
    rootPassword?: pulumi.Input<string>;
    /**
     * ID of the subnet associated with the hostgroup.
     */
    subnetId?: pulumi.Input<number>;
}
