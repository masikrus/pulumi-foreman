// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'foreman:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    /**
     * @SUMMARY Foreman representation of image.
     */
    public /*out*/ readonly __meta_!: pulumi.Output<boolean>;
    /**
     * ID of the architecture in Foreman
     */
    public readonly architectureId!: pulumi.Output<number>;
    /**
     * ID of the compute resource in Foreman
     */
    public readonly computeResourceId!: pulumi.Output<number>;
    /**
     * Name of the image to be used in Foreman
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the operating system in Foreman
     */
    public readonly operatingsystemId!: pulumi.Output<number>;
    /**
     * Does the image support user data (cloud-init etc.)?
     */
    public readonly userData!: pulumi.Output<boolean | undefined>;
    /**
     * Username used to log into the newly created machine that is based on this image
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * UUID of the image from the compute resource
     */
    public readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["__meta_"] = state ? state.__meta_ : undefined;
            resourceInputs["architectureId"] = state ? state.architectureId : undefined;
            resourceInputs["computeResourceId"] = state ? state.computeResourceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operatingsystemId"] = state ? state.operatingsystemId : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            if ((!args || args.architectureId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'architectureId'");
            }
            if ((!args || args.computeResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeResourceId'");
            }
            if ((!args || args.operatingsystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operatingsystemId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            if ((!args || args.uuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'uuid'");
            }
            resourceInputs["architectureId"] = args ? args.architectureId : undefined;
            resourceInputs["computeResourceId"] = args ? args.computeResourceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operatingsystemId"] = args ? args.operatingsystemId : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["uuid"] = args ? args.uuid : undefined;
            resourceInputs["__meta_"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    /**
     * @SUMMARY Foreman representation of image.
     */
    __meta_?: pulumi.Input<boolean>;
    /**
     * ID of the architecture in Foreman
     */
    architectureId?: pulumi.Input<number>;
    /**
     * ID of the compute resource in Foreman
     */
    computeResourceId?: pulumi.Input<number>;
    /**
     * Name of the image to be used in Foreman
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the operating system in Foreman
     */
    operatingsystemId?: pulumi.Input<number>;
    /**
     * Does the image support user data (cloud-init etc.)?
     */
    userData?: pulumi.Input<boolean>;
    /**
     * Username used to log into the newly created machine that is based on this image
     */
    username?: pulumi.Input<string>;
    /**
     * UUID of the image from the compute resource
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    /**
     * ID of the architecture in Foreman
     */
    architectureId: pulumi.Input<number>;
    /**
     * ID of the compute resource in Foreman
     */
    computeResourceId: pulumi.Input<number>;
    /**
     * Name of the image to be used in Foreman
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the operating system in Foreman
     */
    operatingsystemId: pulumi.Input<number>;
    /**
     * Does the image support user data (cloud-init etc.)?
     */
    userData?: pulumi.Input<boolean>;
    /**
     * Username used to log into the newly created machine that is based on this image
     */
    username: pulumi.Input<string>;
    /**
     * UUID of the image from the compute resource
     */
    uuid: pulumi.Input<string>;
}
