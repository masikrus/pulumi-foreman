// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KatelloContentCredential struct {
	pulumi.CustomResourceState

	// @SUMMARY Content Credentials are used to store credentials like GPG Keys and Certificates for the authentication to
	// Products / Repositories.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Public key block in DER encoding or certificate content. @EXAMPLE "-----BEGIN PGP PUBLIC KEY BLOCK----- ... -----END PGP
	// PUBLIC KEY BLOCK-----"
	Content pulumi.StringOutput `pulumi:"content"`
	// Identifier of the content credential.@EXAMPLE "RPM-GPG-KEY-centos7"
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewKatelloContentCredential registers a new resource with the given unique name, arguments, and options.
func NewKatelloContentCredential(ctx *pulumi.Context,
	name string, args *KatelloContentCredentialArgs, opts ...pulumi.ResourceOption) (*KatelloContentCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KatelloContentCredential
	err := ctx.RegisterResource("foreman:index/katelloContentCredential:KatelloContentCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKatelloContentCredential gets an existing KatelloContentCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKatelloContentCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KatelloContentCredentialState, opts ...pulumi.ResourceOption) (*KatelloContentCredential, error) {
	var resource KatelloContentCredential
	err := ctx.ReadResource("foreman:index/katelloContentCredential:KatelloContentCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KatelloContentCredential resources.
type katelloContentCredentialState struct {
	// @SUMMARY Content Credentials are used to store credentials like GPG Keys and Certificates for the authentication to
	// Products / Repositories.
	__meta_ *bool `pulumi:"__meta_"`
	// Public key block in DER encoding or certificate content. @EXAMPLE "-----BEGIN PGP PUBLIC KEY BLOCK----- ... -----END PGP
	// PUBLIC KEY BLOCK-----"
	Content *string `pulumi:"content"`
	// Identifier of the content credential.@EXAMPLE "RPM-GPG-KEY-centos7"
	Name *string `pulumi:"name"`
}

type KatelloContentCredentialState struct {
	// @SUMMARY Content Credentials are used to store credentials like GPG Keys and Certificates for the authentication to
	// Products / Repositories.
	__meta_ pulumi.BoolPtrInput
	// Public key block in DER encoding or certificate content. @EXAMPLE "-----BEGIN PGP PUBLIC KEY BLOCK----- ... -----END PGP
	// PUBLIC KEY BLOCK-----"
	Content pulumi.StringPtrInput
	// Identifier of the content credential.@EXAMPLE "RPM-GPG-KEY-centos7"
	Name pulumi.StringPtrInput
}

func (KatelloContentCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloContentCredentialState)(nil)).Elem()
}

type katelloContentCredentialArgs struct {
	// Public key block in DER encoding or certificate content. @EXAMPLE "-----BEGIN PGP PUBLIC KEY BLOCK----- ... -----END PGP
	// PUBLIC KEY BLOCK-----"
	Content string `pulumi:"content"`
	// Identifier of the content credential.@EXAMPLE "RPM-GPG-KEY-centos7"
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a KatelloContentCredential resource.
type KatelloContentCredentialArgs struct {
	// Public key block in DER encoding or certificate content. @EXAMPLE "-----BEGIN PGP PUBLIC KEY BLOCK----- ... -----END PGP
	// PUBLIC KEY BLOCK-----"
	Content pulumi.StringInput
	// Identifier of the content credential.@EXAMPLE "RPM-GPG-KEY-centos7"
	Name pulumi.StringPtrInput
}

func (KatelloContentCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloContentCredentialArgs)(nil)).Elem()
}

type KatelloContentCredentialInput interface {
	pulumi.Input

	ToKatelloContentCredentialOutput() KatelloContentCredentialOutput
	ToKatelloContentCredentialOutputWithContext(ctx context.Context) KatelloContentCredentialOutput
}

func (*KatelloContentCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloContentCredential)(nil)).Elem()
}

func (i *KatelloContentCredential) ToKatelloContentCredentialOutput() KatelloContentCredentialOutput {
	return i.ToKatelloContentCredentialOutputWithContext(context.Background())
}

func (i *KatelloContentCredential) ToKatelloContentCredentialOutputWithContext(ctx context.Context) KatelloContentCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloContentCredentialOutput)
}

// KatelloContentCredentialArrayInput is an input type that accepts KatelloContentCredentialArray and KatelloContentCredentialArrayOutput values.
// You can construct a concrete instance of `KatelloContentCredentialArrayInput` via:
//
//	KatelloContentCredentialArray{ KatelloContentCredentialArgs{...} }
type KatelloContentCredentialArrayInput interface {
	pulumi.Input

	ToKatelloContentCredentialArrayOutput() KatelloContentCredentialArrayOutput
	ToKatelloContentCredentialArrayOutputWithContext(context.Context) KatelloContentCredentialArrayOutput
}

type KatelloContentCredentialArray []KatelloContentCredentialInput

func (KatelloContentCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloContentCredential)(nil)).Elem()
}

func (i KatelloContentCredentialArray) ToKatelloContentCredentialArrayOutput() KatelloContentCredentialArrayOutput {
	return i.ToKatelloContentCredentialArrayOutputWithContext(context.Background())
}

func (i KatelloContentCredentialArray) ToKatelloContentCredentialArrayOutputWithContext(ctx context.Context) KatelloContentCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloContentCredentialArrayOutput)
}

// KatelloContentCredentialMapInput is an input type that accepts KatelloContentCredentialMap and KatelloContentCredentialMapOutput values.
// You can construct a concrete instance of `KatelloContentCredentialMapInput` via:
//
//	KatelloContentCredentialMap{ "key": KatelloContentCredentialArgs{...} }
type KatelloContentCredentialMapInput interface {
	pulumi.Input

	ToKatelloContentCredentialMapOutput() KatelloContentCredentialMapOutput
	ToKatelloContentCredentialMapOutputWithContext(context.Context) KatelloContentCredentialMapOutput
}

type KatelloContentCredentialMap map[string]KatelloContentCredentialInput

func (KatelloContentCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloContentCredential)(nil)).Elem()
}

func (i KatelloContentCredentialMap) ToKatelloContentCredentialMapOutput() KatelloContentCredentialMapOutput {
	return i.ToKatelloContentCredentialMapOutputWithContext(context.Background())
}

func (i KatelloContentCredentialMap) ToKatelloContentCredentialMapOutputWithContext(ctx context.Context) KatelloContentCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloContentCredentialMapOutput)
}

type KatelloContentCredentialOutput struct{ *pulumi.OutputState }

func (KatelloContentCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloContentCredential)(nil)).Elem()
}

func (o KatelloContentCredentialOutput) ToKatelloContentCredentialOutput() KatelloContentCredentialOutput {
	return o
}

func (o KatelloContentCredentialOutput) ToKatelloContentCredentialOutputWithContext(ctx context.Context) KatelloContentCredentialOutput {
	return o
}

// @SUMMARY Content Credentials are used to store credentials like GPG Keys and Certificates for the authentication to
// Products / Repositories.
func (o KatelloContentCredentialOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *KatelloContentCredential) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Public key block in DER encoding or certificate content. @EXAMPLE "-----BEGIN PGP PUBLIC KEY BLOCK----- ... -----END PGP
// PUBLIC KEY BLOCK-----"
func (o KatelloContentCredentialOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloContentCredential) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Identifier of the content credential.@EXAMPLE "RPM-GPG-KEY-centos7"
func (o KatelloContentCredentialOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloContentCredential) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type KatelloContentCredentialArrayOutput struct{ *pulumi.OutputState }

func (KatelloContentCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloContentCredential)(nil)).Elem()
}

func (o KatelloContentCredentialArrayOutput) ToKatelloContentCredentialArrayOutput() KatelloContentCredentialArrayOutput {
	return o
}

func (o KatelloContentCredentialArrayOutput) ToKatelloContentCredentialArrayOutputWithContext(ctx context.Context) KatelloContentCredentialArrayOutput {
	return o
}

func (o KatelloContentCredentialArrayOutput) Index(i pulumi.IntInput) KatelloContentCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KatelloContentCredential {
		return vs[0].([]*KatelloContentCredential)[vs[1].(int)]
	}).(KatelloContentCredentialOutput)
}

type KatelloContentCredentialMapOutput struct{ *pulumi.OutputState }

func (KatelloContentCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloContentCredential)(nil)).Elem()
}

func (o KatelloContentCredentialMapOutput) ToKatelloContentCredentialMapOutput() KatelloContentCredentialMapOutput {
	return o
}

func (o KatelloContentCredentialMapOutput) ToKatelloContentCredentialMapOutputWithContext(ctx context.Context) KatelloContentCredentialMapOutput {
	return o
}

func (o KatelloContentCredentialMapOutput) MapIndex(k pulumi.StringInput) KatelloContentCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KatelloContentCredential {
		return vs[0].(map[string]*KatelloContentCredential)[vs[1].(string)]
	}).(KatelloContentCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloContentCredentialInput)(nil)).Elem(), &KatelloContentCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloContentCredentialArrayInput)(nil)).Elem(), KatelloContentCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloContentCredentialMapInput)(nil)).Elem(), KatelloContentCredentialMap{})
	pulumi.RegisterOutputType(KatelloContentCredentialOutput{})
	pulumi.RegisterOutputType(KatelloContentCredentialArrayOutput{})
	pulumi.RegisterOutputType(KatelloContentCredentialMapOutput{})
}
