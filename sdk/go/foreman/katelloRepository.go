// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KatelloRepository struct {
	pulumi.CustomResourceState

	// @SUMMARY Repository
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Contents of requirement yaml file to sync from URL.@EXAMPLE
	AnsibleCollectionRequirements pulumi.StringPtrOutput `pulumi:"ansibleCollectionRequirements"`
	// Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
	ChecksumType pulumi.StringPtrOutput `pulumi:"checksumType"`
	// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
	// `"ansibleCollection"`.@EXAMPLE "yum"
	ContentType pulumi.StringOutput `pulumi:"contentType"`
	// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
	DebArchitectures pulumi.StringPtrOutput `pulumi:"debArchitectures"`
	// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
	DebComponents pulumi.StringPtrOutput `pulumi:"debComponents"`
	// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
	DebReleases pulumi.StringPtrOutput `pulumi:"debReleases"`
	// Repository description.@EXAMPLE "A repository description"
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
	DockerTagsWhitelist pulumi.StringPtrOutput `pulumi:"dockerTagsWhitelist"`
	// Name of the upstream docker repository@EXAMPLE
	DockerUpstreamName pulumi.StringPtrOutput `pulumi:"dockerUpstreamName"`
	// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
	// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
	DownloadConcurrency pulumi.IntPtrOutput `pulumi:"downloadConcurrency"`
	// Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
	DownloadPolicy pulumi.StringPtrOutput `pulumi:"downloadPolicy"`
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId pulumi.IntPtrOutput `pulumi:"gpgKeyId"`
	// ID of a HTTP Proxy.@EXAMPLE
	HttpProxyId pulumi.IntPtrOutput `pulumi:"httpProxyId"`
	// Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
	// "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
	HttpProxyPolicy pulumi.StringPtrOutput `pulumi:"httpProxyPolicy"`
	// List of content units to ignore while syncing a yum repository. Must be subset of
	// rpm,drpm,srpm,distribution,erratum@EXAMPLE
	IgnorableContent pulumi.StringPtrOutput `pulumi:"ignorableContent"`
	// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
	IgnoreGlobalProxy pulumi.BoolPtrOutput `pulumi:"ignoreGlobalProxy"`
	// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
	Label pulumi.StringOutput `pulumi:"label"`
	// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
	//
	// Deprecated: Deprecated and removed in Katello 4.9 in favor of mirroring_policy
	MirrorOnSync pulumi.BoolPtrOutput `pulumi:"mirrorOnSync"`
	// Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
	MirroringPolicy pulumi.StringPtrOutput `pulumi:"mirroringPolicy"`
	// Repository name.@EXAMPLE "My Repository"
	Name pulumi.StringOutput `pulumi:"name"`
	// Product the repository belongs to.@EXAMPLE
	ProductId pulumi.IntOutput `pulumi:"productId"`
	// true if this repository can be published via HTTP.@EXAMPLE true
	Unprotected pulumi.BoolPtrOutput `pulumi:"unprotected"`
	// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
	UpstreamPassword pulumi.StringPtrOutput `pulumi:"upstreamPassword"`
	// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
	UpstreamUsername pulumi.StringPtrOutput `pulumi:"upstreamUsername"`
	// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
	Url pulumi.StringPtrOutput `pulumi:"url"`
	// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
	VerifySslOnSync pulumi.BoolPtrOutput `pulumi:"verifySslOnSync"`
}

// NewKatelloRepository registers a new resource with the given unique name, arguments, and options.
func NewKatelloRepository(ctx *pulumi.Context,
	name string, args *KatelloRepositoryArgs, opts ...pulumi.ResourceOption) (*KatelloRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.ProductId == nil {
		return nil, errors.New("invalid value for required argument 'ProductId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KatelloRepository
	err := ctx.RegisterResource("foreman:index/katelloRepository:KatelloRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKatelloRepository gets an existing KatelloRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKatelloRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KatelloRepositoryState, opts ...pulumi.ResourceOption) (*KatelloRepository, error) {
	var resource KatelloRepository
	err := ctx.ReadResource("foreman:index/katelloRepository:KatelloRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KatelloRepository resources.
type katelloRepositoryState struct {
	// @SUMMARY Repository
	__meta_ *bool `pulumi:"__meta_"`
	// Contents of requirement yaml file to sync from URL.@EXAMPLE
	AnsibleCollectionRequirements *string `pulumi:"ansibleCollectionRequirements"`
	// Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
	ChecksumType *string `pulumi:"checksumType"`
	// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
	// `"ansibleCollection"`.@EXAMPLE "yum"
	ContentType *string `pulumi:"contentType"`
	// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
	DebArchitectures *string `pulumi:"debArchitectures"`
	// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
	DebComponents *string `pulumi:"debComponents"`
	// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
	DebReleases *string `pulumi:"debReleases"`
	// Repository description.@EXAMPLE "A repository description"
	Description *string `pulumi:"description"`
	// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
	DockerTagsWhitelist *string `pulumi:"dockerTagsWhitelist"`
	// Name of the upstream docker repository@EXAMPLE
	DockerUpstreamName *string `pulumi:"dockerUpstreamName"`
	// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
	// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
	DownloadConcurrency *int `pulumi:"downloadConcurrency"`
	// Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
	DownloadPolicy *string `pulumi:"downloadPolicy"`
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId *int `pulumi:"gpgKeyId"`
	// ID of a HTTP Proxy.@EXAMPLE
	HttpProxyId *int `pulumi:"httpProxyId"`
	// Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
	// "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
	HttpProxyPolicy *string `pulumi:"httpProxyPolicy"`
	// List of content units to ignore while syncing a yum repository. Must be subset of
	// rpm,drpm,srpm,distribution,erratum@EXAMPLE
	IgnorableContent *string `pulumi:"ignorableContent"`
	// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
	IgnoreGlobalProxy *bool `pulumi:"ignoreGlobalProxy"`
	// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
	Label *string `pulumi:"label"`
	// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
	//
	// Deprecated: Deprecated and removed in Katello 4.9 in favor of mirroring_policy
	MirrorOnSync *bool `pulumi:"mirrorOnSync"`
	// Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
	MirroringPolicy *string `pulumi:"mirroringPolicy"`
	// Repository name.@EXAMPLE "My Repository"
	Name *string `pulumi:"name"`
	// Product the repository belongs to.@EXAMPLE
	ProductId *int `pulumi:"productId"`
	// true if this repository can be published via HTTP.@EXAMPLE true
	Unprotected *bool `pulumi:"unprotected"`
	// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
	UpstreamPassword *string `pulumi:"upstreamPassword"`
	// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
	UpstreamUsername *string `pulumi:"upstreamUsername"`
	// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
	Url *string `pulumi:"url"`
	// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
	VerifySslOnSync *bool `pulumi:"verifySslOnSync"`
}

type KatelloRepositoryState struct {
	// @SUMMARY Repository
	__meta_ pulumi.BoolPtrInput
	// Contents of requirement yaml file to sync from URL.@EXAMPLE
	AnsibleCollectionRequirements pulumi.StringPtrInput
	// Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
	ChecksumType pulumi.StringPtrInput
	// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
	// `"ansibleCollection"`.@EXAMPLE "yum"
	ContentType pulumi.StringPtrInput
	// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
	DebArchitectures pulumi.StringPtrInput
	// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
	DebComponents pulumi.StringPtrInput
	// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
	DebReleases pulumi.StringPtrInput
	// Repository description.@EXAMPLE "A repository description"
	Description pulumi.StringPtrInput
	// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
	DockerTagsWhitelist pulumi.StringPtrInput
	// Name of the upstream docker repository@EXAMPLE
	DockerUpstreamName pulumi.StringPtrInput
	// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
	// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
	DownloadConcurrency pulumi.IntPtrInput
	// Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
	DownloadPolicy pulumi.StringPtrInput
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId pulumi.IntPtrInput
	// ID of a HTTP Proxy.@EXAMPLE
	HttpProxyId pulumi.IntPtrInput
	// Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
	// "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
	HttpProxyPolicy pulumi.StringPtrInput
	// List of content units to ignore while syncing a yum repository. Must be subset of
	// rpm,drpm,srpm,distribution,erratum@EXAMPLE
	IgnorableContent pulumi.StringPtrInput
	// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
	IgnoreGlobalProxy pulumi.BoolPtrInput
	// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
	Label pulumi.StringPtrInput
	// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
	//
	// Deprecated: Deprecated and removed in Katello 4.9 in favor of mirroring_policy
	MirrorOnSync pulumi.BoolPtrInput
	// Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
	MirroringPolicy pulumi.StringPtrInput
	// Repository name.@EXAMPLE "My Repository"
	Name pulumi.StringPtrInput
	// Product the repository belongs to.@EXAMPLE
	ProductId pulumi.IntPtrInput
	// true if this repository can be published via HTTP.@EXAMPLE true
	Unprotected pulumi.BoolPtrInput
	// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
	UpstreamPassword pulumi.StringPtrInput
	// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
	UpstreamUsername pulumi.StringPtrInput
	// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
	Url pulumi.StringPtrInput
	// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
	VerifySslOnSync pulumi.BoolPtrInput
}

func (KatelloRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloRepositoryState)(nil)).Elem()
}

type katelloRepositoryArgs struct {
	// Contents of requirement yaml file to sync from URL.@EXAMPLE
	AnsibleCollectionRequirements *string `pulumi:"ansibleCollectionRequirements"`
	// Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
	ChecksumType *string `pulumi:"checksumType"`
	// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
	// `"ansibleCollection"`.@EXAMPLE "yum"
	ContentType string `pulumi:"contentType"`
	// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
	DebArchitectures *string `pulumi:"debArchitectures"`
	// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
	DebComponents *string `pulumi:"debComponents"`
	// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
	DebReleases *string `pulumi:"debReleases"`
	// Repository description.@EXAMPLE "A repository description"
	Description *string `pulumi:"description"`
	// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
	DockerTagsWhitelist *string `pulumi:"dockerTagsWhitelist"`
	// Name of the upstream docker repository@EXAMPLE
	DockerUpstreamName *string `pulumi:"dockerUpstreamName"`
	// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
	// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
	DownloadConcurrency *int `pulumi:"downloadConcurrency"`
	// Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
	DownloadPolicy *string `pulumi:"downloadPolicy"`
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId *int `pulumi:"gpgKeyId"`
	// ID of a HTTP Proxy.@EXAMPLE
	HttpProxyId *int `pulumi:"httpProxyId"`
	// Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
	// "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
	HttpProxyPolicy *string `pulumi:"httpProxyPolicy"`
	// List of content units to ignore while syncing a yum repository. Must be subset of
	// rpm,drpm,srpm,distribution,erratum@EXAMPLE
	IgnorableContent *string `pulumi:"ignorableContent"`
	// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
	IgnoreGlobalProxy *bool `pulumi:"ignoreGlobalProxy"`
	// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
	Label *string `pulumi:"label"`
	// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
	//
	// Deprecated: Deprecated and removed in Katello 4.9 in favor of mirroring_policy
	MirrorOnSync *bool `pulumi:"mirrorOnSync"`
	// Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
	MirroringPolicy *string `pulumi:"mirroringPolicy"`
	// Repository name.@EXAMPLE "My Repository"
	Name *string `pulumi:"name"`
	// Product the repository belongs to.@EXAMPLE
	ProductId int `pulumi:"productId"`
	// true if this repository can be published via HTTP.@EXAMPLE true
	Unprotected *bool `pulumi:"unprotected"`
	// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
	UpstreamPassword *string `pulumi:"upstreamPassword"`
	// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
	UpstreamUsername *string `pulumi:"upstreamUsername"`
	// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
	Url *string `pulumi:"url"`
	// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
	VerifySslOnSync *bool `pulumi:"verifySslOnSync"`
}

// The set of arguments for constructing a KatelloRepository resource.
type KatelloRepositoryArgs struct {
	// Contents of requirement yaml file to sync from URL.@EXAMPLE
	AnsibleCollectionRequirements pulumi.StringPtrInput
	// Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
	ChecksumType pulumi.StringPtrInput
	// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
	// `"ansibleCollection"`.@EXAMPLE "yum"
	ContentType pulumi.StringInput
	// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
	DebArchitectures pulumi.StringPtrInput
	// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
	DebComponents pulumi.StringPtrInput
	// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
	DebReleases pulumi.StringPtrInput
	// Repository description.@EXAMPLE "A repository description"
	Description pulumi.StringPtrInput
	// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
	DockerTagsWhitelist pulumi.StringPtrInput
	// Name of the upstream docker repository@EXAMPLE
	DockerUpstreamName pulumi.StringPtrInput
	// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
	// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
	DownloadConcurrency pulumi.IntPtrInput
	// Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
	DownloadPolicy pulumi.StringPtrInput
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId pulumi.IntPtrInput
	// ID of a HTTP Proxy.@EXAMPLE
	HttpProxyId pulumi.IntPtrInput
	// Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
	// "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
	HttpProxyPolicy pulumi.StringPtrInput
	// List of content units to ignore while syncing a yum repository. Must be subset of
	// rpm,drpm,srpm,distribution,erratum@EXAMPLE
	IgnorableContent pulumi.StringPtrInput
	// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
	IgnoreGlobalProxy pulumi.BoolPtrInput
	// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
	Label pulumi.StringPtrInput
	// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
	//
	// Deprecated: Deprecated and removed in Katello 4.9 in favor of mirroring_policy
	MirrorOnSync pulumi.BoolPtrInput
	// Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
	MirroringPolicy pulumi.StringPtrInput
	// Repository name.@EXAMPLE "My Repository"
	Name pulumi.StringPtrInput
	// Product the repository belongs to.@EXAMPLE
	ProductId pulumi.IntInput
	// true if this repository can be published via HTTP.@EXAMPLE true
	Unprotected pulumi.BoolPtrInput
	// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
	UpstreamPassword pulumi.StringPtrInput
	// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
	UpstreamUsername pulumi.StringPtrInput
	// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
	Url pulumi.StringPtrInput
	// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
	VerifySslOnSync pulumi.BoolPtrInput
}

func (KatelloRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloRepositoryArgs)(nil)).Elem()
}

type KatelloRepositoryInput interface {
	pulumi.Input

	ToKatelloRepositoryOutput() KatelloRepositoryOutput
	ToKatelloRepositoryOutputWithContext(ctx context.Context) KatelloRepositoryOutput
}

func (*KatelloRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloRepository)(nil)).Elem()
}

func (i *KatelloRepository) ToKatelloRepositoryOutput() KatelloRepositoryOutput {
	return i.ToKatelloRepositoryOutputWithContext(context.Background())
}

func (i *KatelloRepository) ToKatelloRepositoryOutputWithContext(ctx context.Context) KatelloRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloRepositoryOutput)
}

// KatelloRepositoryArrayInput is an input type that accepts KatelloRepositoryArray and KatelloRepositoryArrayOutput values.
// You can construct a concrete instance of `KatelloRepositoryArrayInput` via:
//
//	KatelloRepositoryArray{ KatelloRepositoryArgs{...} }
type KatelloRepositoryArrayInput interface {
	pulumi.Input

	ToKatelloRepositoryArrayOutput() KatelloRepositoryArrayOutput
	ToKatelloRepositoryArrayOutputWithContext(context.Context) KatelloRepositoryArrayOutput
}

type KatelloRepositoryArray []KatelloRepositoryInput

func (KatelloRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloRepository)(nil)).Elem()
}

func (i KatelloRepositoryArray) ToKatelloRepositoryArrayOutput() KatelloRepositoryArrayOutput {
	return i.ToKatelloRepositoryArrayOutputWithContext(context.Background())
}

func (i KatelloRepositoryArray) ToKatelloRepositoryArrayOutputWithContext(ctx context.Context) KatelloRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloRepositoryArrayOutput)
}

// KatelloRepositoryMapInput is an input type that accepts KatelloRepositoryMap and KatelloRepositoryMapOutput values.
// You can construct a concrete instance of `KatelloRepositoryMapInput` via:
//
//	KatelloRepositoryMap{ "key": KatelloRepositoryArgs{...} }
type KatelloRepositoryMapInput interface {
	pulumi.Input

	ToKatelloRepositoryMapOutput() KatelloRepositoryMapOutput
	ToKatelloRepositoryMapOutputWithContext(context.Context) KatelloRepositoryMapOutput
}

type KatelloRepositoryMap map[string]KatelloRepositoryInput

func (KatelloRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloRepository)(nil)).Elem()
}

func (i KatelloRepositoryMap) ToKatelloRepositoryMapOutput() KatelloRepositoryMapOutput {
	return i.ToKatelloRepositoryMapOutputWithContext(context.Background())
}

func (i KatelloRepositoryMap) ToKatelloRepositoryMapOutputWithContext(ctx context.Context) KatelloRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloRepositoryMapOutput)
}

type KatelloRepositoryOutput struct{ *pulumi.OutputState }

func (KatelloRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloRepository)(nil)).Elem()
}

func (o KatelloRepositoryOutput) ToKatelloRepositoryOutput() KatelloRepositoryOutput {
	return o
}

func (o KatelloRepositoryOutput) ToKatelloRepositoryOutputWithContext(ctx context.Context) KatelloRepositoryOutput {
	return o
}

// @SUMMARY Repository
func (o KatelloRepositoryOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Contents of requirement yaml file to sync from URL.@EXAMPLE
func (o KatelloRepositoryOutput) AnsibleCollectionRequirements() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.AnsibleCollectionRequirements }).(pulumi.StringPtrOutput)
}

// Checksum of the repository, currently 'sha1' & 'sha256' are supported@EXAMPLE "sha256"
func (o KatelloRepositoryOutput) ChecksumType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.ChecksumType }).(pulumi.StringPtrOutput)
}

// Content type of the repository. Valid values include:`"deb"`, "docker"`, "file"`, "puppet"`, "yum"`,
// `"ansibleCollection"`.@EXAMPLE "yum"
func (o KatelloRepositoryOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

// Comma separated list of architectures to be synched from deb-archive.@EXAMPLE
func (o KatelloRepositoryOutput) DebArchitectures() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.DebArchitectures }).(pulumi.StringPtrOutput)
}

// Comma separated list of repo components to be synched from deb-archive.@EXAMPLE
func (o KatelloRepositoryOutput) DebComponents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.DebComponents }).(pulumi.StringPtrOutput)
}

// Comma separated list of releases to be synched from deb-archive.@EXAMPLE
func (o KatelloRepositoryOutput) DebReleases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.DebReleases }).(pulumi.StringPtrOutput)
}

// Repository description.@EXAMPLE "A repository description"
func (o KatelloRepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Comma separated list of tags to sync for Container Image repository.@EXAMPLE
func (o KatelloRepositoryOutput) DockerTagsWhitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.DockerTagsWhitelist }).(pulumi.StringPtrOutput)
}

// Name of the upstream docker repository@EXAMPLE
func (o KatelloRepositoryOutput) DockerUpstreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.DockerUpstreamName }).(pulumi.StringPtrOutput)
}

// Used to determine download concurrency of the repository in pulp3. Use value less than 20. Defaults to 10. Warning: the
// value is not returned from the API and is therefore handled by a DiffSuppressFunc.
func (o KatelloRepositoryOutput) DownloadConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.IntPtrOutput { return v.DownloadConcurrency }).(pulumi.IntPtrOutput)
}

// Product the repository belongs to. Valid values include:`"immediate"`, "onDemand"`, "background"`.@EXAMPLE "immediate"
func (o KatelloRepositoryOutput) DownloadPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.DownloadPolicy }).(pulumi.StringPtrOutput)
}

// Identifier of the GPG key.@EXAMPLE
func (o KatelloRepositoryOutput) GpgKeyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.IntPtrOutput { return v.GpgKeyId }).(pulumi.IntPtrOutput)
}

// ID of a HTTP Proxy.@EXAMPLE
func (o KatelloRepositoryOutput) HttpProxyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.IntPtrOutput { return v.HttpProxyId }).(pulumi.IntPtrOutput)
}

// Policies for HTTP proxy for content sync. Valid values include:`"globalDefaultHttpProxy"`, "none"`,
// "useSelectedHttpProxy"`.@EXAMPLE "globalDefaultHttpProxy"
func (o KatelloRepositoryOutput) HttpProxyPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.HttpProxyPolicy }).(pulumi.StringPtrOutput)
}

// List of content units to ignore while syncing a yum repository. Must be subset of
// rpm,drpm,srpm,distribution,erratum@EXAMPLE
func (o KatelloRepositoryOutput) IgnorableContent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.IgnorableContent }).(pulumi.StringPtrOutput)
}

// If true, will ignore the globally configured proxy when syncing.@EXAMPLE true
func (o KatelloRepositoryOutput) IgnoreGlobalProxy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.BoolPtrOutput { return v.IgnoreGlobalProxy }).(pulumi.BoolPtrOutput)
}

// Label of the repository. Cannot be changed after creation. Is auto generated from name if not specified.
func (o KatelloRepositoryOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// 'True' if this repository when synced has to be mirrored from the source and stale rpms removed.
//
// Deprecated: Deprecated and removed in Katello 4.9 in favor of mirroring_policy
func (o KatelloRepositoryOutput) MirrorOnSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.BoolPtrOutput { return v.MirrorOnSync }).(pulumi.BoolPtrOutput)
}

// Mirroring policy for this repo. Values: "mirrorContentOnly" or "additive". @EXAMPLE "mirrorContentOnly"
func (o KatelloRepositoryOutput) MirroringPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.MirroringPolicy }).(pulumi.StringPtrOutput)
}

// Repository name.@EXAMPLE "My Repository"
func (o KatelloRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Product the repository belongs to.@EXAMPLE
func (o KatelloRepositoryOutput) ProductId() pulumi.IntOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.IntOutput { return v.ProductId }).(pulumi.IntOutput)
}

// true if this repository can be published via HTTP.@EXAMPLE true
func (o KatelloRepositoryOutput) Unprotected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.BoolPtrOutput { return v.Unprotected }).(pulumi.BoolPtrOutput)
}

// Password of the upstream repository user used for authentication.@EXAMPLE "S3cr3t123!"
func (o KatelloRepositoryOutput) UpstreamPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.UpstreamPassword }).(pulumi.StringPtrOutput)
}

// Username of the upstream repository user used for authentication.@EXAMPLE "admin"
func (o KatelloRepositoryOutput) UpstreamUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.UpstreamUsername }).(pulumi.StringPtrOutput)
}

// Repository source URL or Docker registry URL@EXAMPLE "http://mirror.centos.org/centos/7/os/x86_64/"
func (o KatelloRepositoryOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.StringPtrOutput { return v.Url }).(pulumi.StringPtrOutput)
}

// If true, Katello will verify the upstream url's SSL certifcates are signed by a trusted CA.@EXAMPLE true
func (o KatelloRepositoryOutput) VerifySslOnSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KatelloRepository) pulumi.BoolPtrOutput { return v.VerifySslOnSync }).(pulumi.BoolPtrOutput)
}

type KatelloRepositoryArrayOutput struct{ *pulumi.OutputState }

func (KatelloRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloRepository)(nil)).Elem()
}

func (o KatelloRepositoryArrayOutput) ToKatelloRepositoryArrayOutput() KatelloRepositoryArrayOutput {
	return o
}

func (o KatelloRepositoryArrayOutput) ToKatelloRepositoryArrayOutputWithContext(ctx context.Context) KatelloRepositoryArrayOutput {
	return o
}

func (o KatelloRepositoryArrayOutput) Index(i pulumi.IntInput) KatelloRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KatelloRepository {
		return vs[0].([]*KatelloRepository)[vs[1].(int)]
	}).(KatelloRepositoryOutput)
}

type KatelloRepositoryMapOutput struct{ *pulumi.OutputState }

func (KatelloRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloRepository)(nil)).Elem()
}

func (o KatelloRepositoryMapOutput) ToKatelloRepositoryMapOutput() KatelloRepositoryMapOutput {
	return o
}

func (o KatelloRepositoryMapOutput) ToKatelloRepositoryMapOutputWithContext(ctx context.Context) KatelloRepositoryMapOutput {
	return o
}

func (o KatelloRepositoryMapOutput) MapIndex(k pulumi.StringInput) KatelloRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KatelloRepository {
		return vs[0].(map[string]*KatelloRepository)[vs[1].(string)]
	}).(KatelloRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloRepositoryInput)(nil)).Elem(), &KatelloRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloRepositoryArrayInput)(nil)).Elem(), KatelloRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloRepositoryMapInput)(nil)).Elem(), KatelloRepositoryMap{})
	pulumi.RegisterOutputType(KatelloRepositoryOutput{})
	pulumi.RegisterOutputType(KatelloRepositoryArrayOutput{})
	pulumi.RegisterOutputType(KatelloRepositoryMapOutput{})
}
