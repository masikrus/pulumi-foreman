// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Architecture struct {
	pulumi.CustomResourceState

	// @SUMMARY Foreman representation of an instruction set architecture (ISA).
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
	Name pulumi.StringOutput `pulumi:"name"`
	// IDs of the operating systems associated with this architecture
	OperatingsystemIds pulumi.IntArrayOutput `pulumi:"operatingsystemIds"`
}

// NewArchitecture registers a new resource with the given unique name, arguments, and options.
func NewArchitecture(ctx *pulumi.Context,
	name string, args *ArchitectureArgs, opts ...pulumi.ResourceOption) (*Architecture, error) {
	if args == nil {
		args = &ArchitectureArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Architecture
	err := ctx.RegisterResource("foreman:index/architecture:Architecture", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArchitecture gets an existing Architecture resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArchitecture(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArchitectureState, opts ...pulumi.ResourceOption) (*Architecture, error) {
	var resource Architecture
	err := ctx.ReadResource("foreman:index/architecture:Architecture", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Architecture resources.
type architectureState struct {
	// @SUMMARY Foreman representation of an instruction set architecture (ISA).
	__meta_ *bool `pulumi:"__meta_"`
	// The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
	Name *string `pulumi:"name"`
	// IDs of the operating systems associated with this architecture
	OperatingsystemIds []int `pulumi:"operatingsystemIds"`
}

type ArchitectureState struct {
	// @SUMMARY Foreman representation of an instruction set architecture (ISA).
	__meta_ pulumi.BoolPtrInput
	// The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
	Name pulumi.StringPtrInput
	// IDs of the operating systems associated with this architecture
	OperatingsystemIds pulumi.IntArrayInput
}

func (ArchitectureState) ElementType() reflect.Type {
	return reflect.TypeOf((*architectureState)(nil)).Elem()
}

type architectureArgs struct {
	// The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
	Name *string `pulumi:"name"`
	// IDs of the operating systems associated with this architecture
	OperatingsystemIds []int `pulumi:"operatingsystemIds"`
}

// The set of arguments for constructing a Architecture resource.
type ArchitectureArgs struct {
	// The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
	Name pulumi.StringPtrInput
	// IDs of the operating systems associated with this architecture
	OperatingsystemIds pulumi.IntArrayInput
}

func (ArchitectureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*architectureArgs)(nil)).Elem()
}

type ArchitectureInput interface {
	pulumi.Input

	ToArchitectureOutput() ArchitectureOutput
	ToArchitectureOutputWithContext(ctx context.Context) ArchitectureOutput
}

func (*Architecture) ElementType() reflect.Type {
	return reflect.TypeOf((**Architecture)(nil)).Elem()
}

func (i *Architecture) ToArchitectureOutput() ArchitectureOutput {
	return i.ToArchitectureOutputWithContext(context.Background())
}

func (i *Architecture) ToArchitectureOutputWithContext(ctx context.Context) ArchitectureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchitectureOutput)
}

// ArchitectureArrayInput is an input type that accepts ArchitectureArray and ArchitectureArrayOutput values.
// You can construct a concrete instance of `ArchitectureArrayInput` via:
//
//	ArchitectureArray{ ArchitectureArgs{...} }
type ArchitectureArrayInput interface {
	pulumi.Input

	ToArchitectureArrayOutput() ArchitectureArrayOutput
	ToArchitectureArrayOutputWithContext(context.Context) ArchitectureArrayOutput
}

type ArchitectureArray []ArchitectureInput

func (ArchitectureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Architecture)(nil)).Elem()
}

func (i ArchitectureArray) ToArchitectureArrayOutput() ArchitectureArrayOutput {
	return i.ToArchitectureArrayOutputWithContext(context.Background())
}

func (i ArchitectureArray) ToArchitectureArrayOutputWithContext(ctx context.Context) ArchitectureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchitectureArrayOutput)
}

// ArchitectureMapInput is an input type that accepts ArchitectureMap and ArchitectureMapOutput values.
// You can construct a concrete instance of `ArchitectureMapInput` via:
//
//	ArchitectureMap{ "key": ArchitectureArgs{...} }
type ArchitectureMapInput interface {
	pulumi.Input

	ToArchitectureMapOutput() ArchitectureMapOutput
	ToArchitectureMapOutputWithContext(context.Context) ArchitectureMapOutput
}

type ArchitectureMap map[string]ArchitectureInput

func (ArchitectureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Architecture)(nil)).Elem()
}

func (i ArchitectureMap) ToArchitectureMapOutput() ArchitectureMapOutput {
	return i.ToArchitectureMapOutputWithContext(context.Background())
}

func (i ArchitectureMap) ToArchitectureMapOutputWithContext(ctx context.Context) ArchitectureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArchitectureMapOutput)
}

type ArchitectureOutput struct{ *pulumi.OutputState }

func (ArchitectureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Architecture)(nil)).Elem()
}

func (o ArchitectureOutput) ToArchitectureOutput() ArchitectureOutput {
	return o
}

func (o ArchitectureOutput) ToArchitectureOutputWithContext(ctx context.Context) ArchitectureOutput {
	return o
}

// @SUMMARY Foreman representation of an instruction set architecture (ISA).
func (o ArchitectureOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Architecture) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// The name of the architecture. Valid characters: ^[A-Za-z0-9-_.]+$. @EXAMPLE "i386"
func (o ArchitectureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Architecture) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IDs of the operating systems associated with this architecture
func (o ArchitectureOutput) OperatingsystemIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Architecture) pulumi.IntArrayOutput { return v.OperatingsystemIds }).(pulumi.IntArrayOutput)
}

type ArchitectureArrayOutput struct{ *pulumi.OutputState }

func (ArchitectureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Architecture)(nil)).Elem()
}

func (o ArchitectureArrayOutput) ToArchitectureArrayOutput() ArchitectureArrayOutput {
	return o
}

func (o ArchitectureArrayOutput) ToArchitectureArrayOutputWithContext(ctx context.Context) ArchitectureArrayOutput {
	return o
}

func (o ArchitectureArrayOutput) Index(i pulumi.IntInput) ArchitectureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Architecture {
		return vs[0].([]*Architecture)[vs[1].(int)]
	}).(ArchitectureOutput)
}

type ArchitectureMapOutput struct{ *pulumi.OutputState }

func (ArchitectureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Architecture)(nil)).Elem()
}

func (o ArchitectureMapOutput) ToArchitectureMapOutput() ArchitectureMapOutput {
	return o
}

func (o ArchitectureMapOutput) ToArchitectureMapOutputWithContext(ctx context.Context) ArchitectureMapOutput {
	return o
}

func (o ArchitectureMapOutput) MapIndex(k pulumi.StringInput) ArchitectureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Architecture {
		return vs[0].(map[string]*Architecture)[vs[1].(string)]
	}).(ArchitectureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ArchitectureInput)(nil)).Elem(), &Architecture{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArchitectureArrayInput)(nil)).Elem(), ArchitectureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArchitectureMapInput)(nil)).Elem(), ArchitectureMap{})
	pulumi.RegisterOutputType(ArchitectureOutput{})
	pulumi.RegisterOutputType(ArchitectureArrayOutput{})
	pulumi.RegisterOutputType(ArchitectureMapOutput{})
}
