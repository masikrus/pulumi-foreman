// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KatelloContentView struct {
	pulumi.CustomResourceState

	// @SUMMARY (Composite) Content Views create an abstract view on a collection of repositories and allow versioning of these
	// views. Additional fine tuning can be done with package filters.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
	// its content views is published. Autopublish will only happen for component views that use the 'Always use latest
	// version' option.'
	AutoPublish pulumi.BoolPtrOutput `pulumi:"autoPublish"`
	// Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
	ComponentIds pulumi.IntArrayOutput `pulumi:"componentIds"`
	// Is this Content View a Composite CV? @EXAMPLE false
	Composite pulumi.BoolPtrOutput `pulumi:"composite"`
	// Description for the (composite) content view
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Filtered    pulumi.BoolOutput      `pulumi:"filtered"`
	// Content view filters and their rules.
	Filters KatelloContentViewFilterArrayOutput `pulumi:"filters"`
	// Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
	// as spaces replacement. @EXAMPLE
	Label pulumi.StringOutput `pulumi:"label"`
	// Holds the ID of the latest published version of a Content View to be used as reference in CCVs
	LatestVersionId pulumi.IntOutput `pulumi:"latestVersionId"`
	// Name of the (composite) content view. @EXAMPLE "My new CV"
	Name           pulumi.StringOutput `pulumi:"name"`
	OrganizationId pulumi.IntOutput    `pulumi:"organizationId"`
	// List of repository IDs. @EXAMPLE [1, 4, 5]
	RepositoryIds pulumi.IntArrayOutput `pulumi:"repositoryIds"`
	// Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
	// Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
	// be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
	// dependency errors.'
	SolveDependencies pulumi.BoolPtrOutput `pulumi:"solveDependencies"`
}

// NewKatelloContentView registers a new resource with the given unique name, arguments, and options.
func NewKatelloContentView(ctx *pulumi.Context,
	name string, args *KatelloContentViewArgs, opts ...pulumi.ResourceOption) (*KatelloContentView, error) {
	if args == nil {
		args = &KatelloContentViewArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KatelloContentView
	err := ctx.RegisterResource("foreman:index/katelloContentView:KatelloContentView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKatelloContentView gets an existing KatelloContentView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKatelloContentView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KatelloContentViewState, opts ...pulumi.ResourceOption) (*KatelloContentView, error) {
	var resource KatelloContentView
	err := ctx.ReadResource("foreman:index/katelloContentView:KatelloContentView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KatelloContentView resources.
type katelloContentViewState struct {
	// @SUMMARY (Composite) Content Views create an abstract view on a collection of repositories and allow versioning of these
	// views. Additional fine tuning can be done with package filters.
	__meta_ *bool `pulumi:"__meta_"`
	// Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
	// its content views is published. Autopublish will only happen for component views that use the 'Always use latest
	// version' option.'
	AutoPublish *bool `pulumi:"autoPublish"`
	// Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
	ComponentIds []int `pulumi:"componentIds"`
	// Is this Content View a Composite CV? @EXAMPLE false
	Composite *bool `pulumi:"composite"`
	// Description for the (composite) content view
	Description *string `pulumi:"description"`
	Filtered    *bool   `pulumi:"filtered"`
	// Content view filters and their rules.
	Filters []KatelloContentViewFilter `pulumi:"filters"`
	// Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
	// as spaces replacement. @EXAMPLE
	Label *string `pulumi:"label"`
	// Holds the ID of the latest published version of a Content View to be used as reference in CCVs
	LatestVersionId *int `pulumi:"latestVersionId"`
	// Name of the (composite) content view. @EXAMPLE "My new CV"
	Name           *string `pulumi:"name"`
	OrganizationId *int    `pulumi:"organizationId"`
	// List of repository IDs. @EXAMPLE [1, 4, 5]
	RepositoryIds []int `pulumi:"repositoryIds"`
	// Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
	// Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
	// be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
	// dependency errors.'
	SolveDependencies *bool `pulumi:"solveDependencies"`
}

type KatelloContentViewState struct {
	// @SUMMARY (Composite) Content Views create an abstract view on a collection of repositories and allow versioning of these
	// views. Additional fine tuning can be done with package filters.
	__meta_ pulumi.BoolPtrInput
	// Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
	// its content views is published. Autopublish will only happen for component views that use the 'Always use latest
	// version' option.'
	AutoPublish pulumi.BoolPtrInput
	// Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
	ComponentIds pulumi.IntArrayInput
	// Is this Content View a Composite CV? @EXAMPLE false
	Composite pulumi.BoolPtrInput
	// Description for the (composite) content view
	Description pulumi.StringPtrInput
	Filtered    pulumi.BoolPtrInput
	// Content view filters and their rules.
	Filters KatelloContentViewFilterArrayInput
	// Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
	// as spaces replacement. @EXAMPLE
	Label pulumi.StringPtrInput
	// Holds the ID of the latest published version of a Content View to be used as reference in CCVs
	LatestVersionId pulumi.IntPtrInput
	// Name of the (composite) content view. @EXAMPLE "My new CV"
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.IntPtrInput
	// List of repository IDs. @EXAMPLE [1, 4, 5]
	RepositoryIds pulumi.IntArrayInput
	// Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
	// Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
	// be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
	// dependency errors.'
	SolveDependencies pulumi.BoolPtrInput
}

func (KatelloContentViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloContentViewState)(nil)).Elem()
}

type katelloContentViewArgs struct {
	// Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
	// its content views is published. Autopublish will only happen for component views that use the 'Always use latest
	// version' option.'
	AutoPublish *bool `pulumi:"autoPublish"`
	// Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
	ComponentIds []int `pulumi:"componentIds"`
	// Is this Content View a Composite CV? @EXAMPLE false
	Composite *bool `pulumi:"composite"`
	// Description for the (composite) content view
	Description *string `pulumi:"description"`
	// Content view filters and their rules.
	Filters []KatelloContentViewFilter `pulumi:"filters"`
	// Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
	// as spaces replacement. @EXAMPLE
	Label *string `pulumi:"label"`
	// Name of the (composite) content view. @EXAMPLE "My new CV"
	Name           *string `pulumi:"name"`
	OrganizationId *int    `pulumi:"organizationId"`
	// List of repository IDs. @EXAMPLE [1, 4, 5]
	RepositoryIds []int `pulumi:"repositoryIds"`
	// Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
	// Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
	// be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
	// dependency errors.'
	SolveDependencies *bool `pulumi:"solveDependencies"`
}

// The set of arguments for constructing a KatelloContentView resource.
type KatelloContentViewArgs struct {
	// Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
	// its content views is published. Autopublish will only happen for component views that use the 'Always use latest
	// version' option.'
	AutoPublish pulumi.BoolPtrInput
	// Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
	ComponentIds pulumi.IntArrayInput
	// Is this Content View a Composite CV? @EXAMPLE false
	Composite pulumi.BoolPtrInput
	// Description for the (composite) content view
	Description pulumi.StringPtrInput
	// Content view filters and their rules.
	Filters KatelloContentViewFilterArrayInput
	// Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
	// as spaces replacement. @EXAMPLE
	Label pulumi.StringPtrInput
	// Name of the (composite) content view. @EXAMPLE "My new CV"
	Name           pulumi.StringPtrInput
	OrganizationId pulumi.IntPtrInput
	// List of repository IDs. @EXAMPLE [1, 4, 5]
	RepositoryIds pulumi.IntArrayInput
	// Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
	// Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
	// be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
	// dependency errors.'
	SolveDependencies pulumi.BoolPtrInput
}

func (KatelloContentViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloContentViewArgs)(nil)).Elem()
}

type KatelloContentViewInput interface {
	pulumi.Input

	ToKatelloContentViewOutput() KatelloContentViewOutput
	ToKatelloContentViewOutputWithContext(ctx context.Context) KatelloContentViewOutput
}

func (*KatelloContentView) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloContentView)(nil)).Elem()
}

func (i *KatelloContentView) ToKatelloContentViewOutput() KatelloContentViewOutput {
	return i.ToKatelloContentViewOutputWithContext(context.Background())
}

func (i *KatelloContentView) ToKatelloContentViewOutputWithContext(ctx context.Context) KatelloContentViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloContentViewOutput)
}

// KatelloContentViewArrayInput is an input type that accepts KatelloContentViewArray and KatelloContentViewArrayOutput values.
// You can construct a concrete instance of `KatelloContentViewArrayInput` via:
//
//	KatelloContentViewArray{ KatelloContentViewArgs{...} }
type KatelloContentViewArrayInput interface {
	pulumi.Input

	ToKatelloContentViewArrayOutput() KatelloContentViewArrayOutput
	ToKatelloContentViewArrayOutputWithContext(context.Context) KatelloContentViewArrayOutput
}

type KatelloContentViewArray []KatelloContentViewInput

func (KatelloContentViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloContentView)(nil)).Elem()
}

func (i KatelloContentViewArray) ToKatelloContentViewArrayOutput() KatelloContentViewArrayOutput {
	return i.ToKatelloContentViewArrayOutputWithContext(context.Background())
}

func (i KatelloContentViewArray) ToKatelloContentViewArrayOutputWithContext(ctx context.Context) KatelloContentViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloContentViewArrayOutput)
}

// KatelloContentViewMapInput is an input type that accepts KatelloContentViewMap and KatelloContentViewMapOutput values.
// You can construct a concrete instance of `KatelloContentViewMapInput` via:
//
//	KatelloContentViewMap{ "key": KatelloContentViewArgs{...} }
type KatelloContentViewMapInput interface {
	pulumi.Input

	ToKatelloContentViewMapOutput() KatelloContentViewMapOutput
	ToKatelloContentViewMapOutputWithContext(context.Context) KatelloContentViewMapOutput
}

type KatelloContentViewMap map[string]KatelloContentViewInput

func (KatelloContentViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloContentView)(nil)).Elem()
}

func (i KatelloContentViewMap) ToKatelloContentViewMapOutput() KatelloContentViewMapOutput {
	return i.ToKatelloContentViewMapOutputWithContext(context.Background())
}

func (i KatelloContentViewMap) ToKatelloContentViewMapOutputWithContext(ctx context.Context) KatelloContentViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloContentViewMapOutput)
}

type KatelloContentViewOutput struct{ *pulumi.OutputState }

func (KatelloContentViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloContentView)(nil)).Elem()
}

func (o KatelloContentViewOutput) ToKatelloContentViewOutput() KatelloContentViewOutput {
	return o
}

func (o KatelloContentViewOutput) ToKatelloContentViewOutputWithContext(ctx context.Context) KatelloContentViewOutput {
	return o
}

// @SUMMARY (Composite) Content Views create an abstract view on a collection of repositories and allow versioning of these
// views. Additional fine tuning can be done with package filters.
func (o KatelloContentViewOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Relevant for Composite Content Views: 'Automatically publish a new version of the composite content view whenever one of
// its content views is published. Autopublish will only happen for component views that use the 'Always use latest
// version' option.'
func (o KatelloContentViewOutput) AutoPublish() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.BoolPtrOutput { return v.AutoPublish }).(pulumi.BoolPtrOutput)
}

// Relevant for CCVs: list of CV version IDs. @EXAMPLE [1, 4]
func (o KatelloContentViewOutput) ComponentIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.IntArrayOutput { return v.ComponentIds }).(pulumi.IntArrayOutput)
}

// Is this Content View a Composite CV? @EXAMPLE false
func (o KatelloContentViewOutput) Composite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.BoolPtrOutput { return v.Composite }).(pulumi.BoolPtrOutput)
}

// Description for the (composite) content view
func (o KatelloContentViewOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o KatelloContentViewOutput) Filtered() pulumi.BoolOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.BoolOutput { return v.Filtered }).(pulumi.BoolOutput)
}

// Content view filters and their rules.
func (o KatelloContentViewOutput) Filters() KatelloContentViewFilterArrayOutput {
	return o.ApplyT(func(v *KatelloContentView) KatelloContentViewFilterArrayOutput { return v.Filters }).(KatelloContentViewFilterArrayOutput)
}

// Label for the (composite) content view. Cannot be changed after creation. By default set to the name, with underscores
// as spaces replacement. @EXAMPLE
func (o KatelloContentViewOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// Holds the ID of the latest published version of a Content View to be used as reference in CCVs
func (o KatelloContentViewOutput) LatestVersionId() pulumi.IntOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.IntOutput { return v.LatestVersionId }).(pulumi.IntOutput)
}

// Name of the (composite) content view. @EXAMPLE "My new CV"
func (o KatelloContentViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KatelloContentViewOutput) OrganizationId() pulumi.IntOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.IntOutput { return v.OrganizationId }).(pulumi.IntOutput)
}

// List of repository IDs. @EXAMPLE [1, 4, 5]
func (o KatelloContentViewOutput) RepositoryIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.IntArrayOutput { return v.RepositoryIds }).(pulumi.IntArrayOutput)
}

// Relevant for Content Views: 'This will solve RPM and module stream dependencies on every publish of this content view.
// Dependency solving significantly increases publish time (publishes can take over three times as long) and filters will
// be ignored when adding packages to solve dependencies. Also, certain scenarios involving errata may still cause
// dependency errors.'
func (o KatelloContentViewOutput) SolveDependencies() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KatelloContentView) pulumi.BoolPtrOutput { return v.SolveDependencies }).(pulumi.BoolPtrOutput)
}

type KatelloContentViewArrayOutput struct{ *pulumi.OutputState }

func (KatelloContentViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloContentView)(nil)).Elem()
}

func (o KatelloContentViewArrayOutput) ToKatelloContentViewArrayOutput() KatelloContentViewArrayOutput {
	return o
}

func (o KatelloContentViewArrayOutput) ToKatelloContentViewArrayOutputWithContext(ctx context.Context) KatelloContentViewArrayOutput {
	return o
}

func (o KatelloContentViewArrayOutput) Index(i pulumi.IntInput) KatelloContentViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KatelloContentView {
		return vs[0].([]*KatelloContentView)[vs[1].(int)]
	}).(KatelloContentViewOutput)
}

type KatelloContentViewMapOutput struct{ *pulumi.OutputState }

func (KatelloContentViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloContentView)(nil)).Elem()
}

func (o KatelloContentViewMapOutput) ToKatelloContentViewMapOutput() KatelloContentViewMapOutput {
	return o
}

func (o KatelloContentViewMapOutput) ToKatelloContentViewMapOutputWithContext(ctx context.Context) KatelloContentViewMapOutput {
	return o
}

func (o KatelloContentViewMapOutput) MapIndex(k pulumi.StringInput) KatelloContentViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KatelloContentView {
		return vs[0].(map[string]*KatelloContentView)[vs[1].(string)]
	}).(KatelloContentViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloContentViewInput)(nil)).Elem(), &KatelloContentView{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloContentViewArrayInput)(nil)).Elem(), KatelloContentViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloContentViewMapInput)(nil)).Elem(), KatelloContentViewMap{})
	pulumi.RegisterOutputType(KatelloContentViewOutput{})
	pulumi.RegisterOutputType(KatelloContentViewArrayOutput{})
	pulumi.RegisterOutputType(KatelloContentViewMapOutput{})
}
