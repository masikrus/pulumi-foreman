// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Provisioningtemplate struct {
	pulumi.CustomResourceState

	// @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
	// host.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Notes and comments for auditing purposes.
	AuditComment pulumi.StringPtrOutput `pulumi:"auditComment"`
	// A description of the provisioning template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether or not the template is locked for editing.
	Locked pulumi.BoolPtrOutput `pulumi:"locked"`
	// Name of the provisioning template. @EXAMPLE "AutoYaST default"
	Name pulumi.StringOutput `pulumi:"name"`
	// IDs of the operating systems associated with this provisioning template.
	OperatingsystemIds pulumi.IntArrayOutput `pulumi:"operatingsystemIds"`
	// Whether or not the provisioning template is a snippet be used by other templates.
	Snippet pulumi.BoolPtrOutput `pulumi:"snippet"`
	// The markup and code of the provisioning template. @EXAMPLE "void"
	Template pulumi.StringOutput `pulumi:"template"`
	// How templates are determined: When editing a template, you must assign a list of operating systems which this template
	// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
	// requests a template, Foreman will select the best match from the available templates of that type in the following
	// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
	// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
	// provisioning template selection described above.
	TemplateCombinationsAttributes ProvisioningtemplateTemplateCombinationsAttributeArrayOutput `pulumi:"templateCombinationsAttributes"`
	// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
	TemplateKindId pulumi.IntPtrOutput `pulumi:"templateKindId"`
}

// NewProvisioningtemplate registers a new resource with the given unique name, arguments, and options.
func NewProvisioningtemplate(ctx *pulumi.Context,
	name string, args *ProvisioningtemplateArgs, opts ...pulumi.ResourceOption) (*Provisioningtemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provisioningtemplate
	err := ctx.RegisterResource("foreman:index/provisioningtemplate:Provisioningtemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvisioningtemplate gets an existing Provisioningtemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvisioningtemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProvisioningtemplateState, opts ...pulumi.ResourceOption) (*Provisioningtemplate, error) {
	var resource Provisioningtemplate
	err := ctx.ReadResource("foreman:index/provisioningtemplate:Provisioningtemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Provisioningtemplate resources.
type provisioningtemplateState struct {
	// @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
	// host.
	__meta_ *bool `pulumi:"__meta_"`
	// Notes and comments for auditing purposes.
	AuditComment *string `pulumi:"auditComment"`
	// A description of the provisioning template.
	Description *string `pulumi:"description"`
	// Whether or not the template is locked for editing.
	Locked *bool `pulumi:"locked"`
	// Name of the provisioning template. @EXAMPLE "AutoYaST default"
	Name *string `pulumi:"name"`
	// IDs of the operating systems associated with this provisioning template.
	OperatingsystemIds []int `pulumi:"operatingsystemIds"`
	// Whether or not the provisioning template is a snippet be used by other templates.
	Snippet *bool `pulumi:"snippet"`
	// The markup and code of the provisioning template. @EXAMPLE "void"
	Template *string `pulumi:"template"`
	// How templates are determined: When editing a template, you must assign a list of operating systems which this template
	// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
	// requests a template, Foreman will select the best match from the available templates of that type in the following
	// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
	// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
	// provisioning template selection described above.
	TemplateCombinationsAttributes []ProvisioningtemplateTemplateCombinationsAttribute `pulumi:"templateCombinationsAttributes"`
	// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
	TemplateKindId *int `pulumi:"templateKindId"`
}

type ProvisioningtemplateState struct {
	// @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
	// host.
	__meta_ pulumi.BoolPtrInput
	// Notes and comments for auditing purposes.
	AuditComment pulumi.StringPtrInput
	// A description of the provisioning template.
	Description pulumi.StringPtrInput
	// Whether or not the template is locked for editing.
	Locked pulumi.BoolPtrInput
	// Name of the provisioning template. @EXAMPLE "AutoYaST default"
	Name pulumi.StringPtrInput
	// IDs of the operating systems associated with this provisioning template.
	OperatingsystemIds pulumi.IntArrayInput
	// Whether or not the provisioning template is a snippet be used by other templates.
	Snippet pulumi.BoolPtrInput
	// The markup and code of the provisioning template. @EXAMPLE "void"
	Template pulumi.StringPtrInput
	// How templates are determined: When editing a template, you must assign a list of operating systems which this template
	// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
	// requests a template, Foreman will select the best match from the available templates of that type in the following
	// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
	// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
	// provisioning template selection described above.
	TemplateCombinationsAttributes ProvisioningtemplateTemplateCombinationsAttributeArrayInput
	// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
	TemplateKindId pulumi.IntPtrInput
}

func (ProvisioningtemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*provisioningtemplateState)(nil)).Elem()
}

type provisioningtemplateArgs struct {
	// Notes and comments for auditing purposes.
	AuditComment *string `pulumi:"auditComment"`
	// A description of the provisioning template.
	Description *string `pulumi:"description"`
	// Whether or not the template is locked for editing.
	Locked *bool `pulumi:"locked"`
	// Name of the provisioning template. @EXAMPLE "AutoYaST default"
	Name *string `pulumi:"name"`
	// IDs of the operating systems associated with this provisioning template.
	OperatingsystemIds []int `pulumi:"operatingsystemIds"`
	// Whether or not the provisioning template is a snippet be used by other templates.
	Snippet *bool `pulumi:"snippet"`
	// The markup and code of the provisioning template. @EXAMPLE "void"
	Template string `pulumi:"template"`
	// How templates are determined: When editing a template, you must assign a list of operating systems which this template
	// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
	// requests a template, Foreman will select the best match from the available templates of that type in the following
	// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
	// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
	// provisioning template selection described above.
	TemplateCombinationsAttributes []ProvisioningtemplateTemplateCombinationsAttribute `pulumi:"templateCombinationsAttributes"`
	// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
	TemplateKindId *int `pulumi:"templateKindId"`
}

// The set of arguments for constructing a Provisioningtemplate resource.
type ProvisioningtemplateArgs struct {
	// Notes and comments for auditing purposes.
	AuditComment pulumi.StringPtrInput
	// A description of the provisioning template.
	Description pulumi.StringPtrInput
	// Whether or not the template is locked for editing.
	Locked pulumi.BoolPtrInput
	// Name of the provisioning template. @EXAMPLE "AutoYaST default"
	Name pulumi.StringPtrInput
	// IDs of the operating systems associated with this provisioning template.
	OperatingsystemIds pulumi.IntArrayInput
	// Whether or not the provisioning template is a snippet be used by other templates.
	Snippet pulumi.BoolPtrInput
	// The markup and code of the provisioning template. @EXAMPLE "void"
	Template pulumi.StringInput
	// How templates are determined: When editing a template, you must assign a list of operating systems which this template
	// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
	// requests a template, Foreman will select the best match from the available templates of that type in the following
	// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
	// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
	// provisioning template selection described above.
	TemplateCombinationsAttributes ProvisioningtemplateTemplateCombinationsAttributeArrayInput
	// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
	TemplateKindId pulumi.IntPtrInput
}

func (ProvisioningtemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*provisioningtemplateArgs)(nil)).Elem()
}

type ProvisioningtemplateInput interface {
	pulumi.Input

	ToProvisioningtemplateOutput() ProvisioningtemplateOutput
	ToProvisioningtemplateOutputWithContext(ctx context.Context) ProvisioningtemplateOutput
}

func (*Provisioningtemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**Provisioningtemplate)(nil)).Elem()
}

func (i *Provisioningtemplate) ToProvisioningtemplateOutput() ProvisioningtemplateOutput {
	return i.ToProvisioningtemplateOutputWithContext(context.Background())
}

func (i *Provisioningtemplate) ToProvisioningtemplateOutputWithContext(ctx context.Context) ProvisioningtemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningtemplateOutput)
}

// ProvisioningtemplateArrayInput is an input type that accepts ProvisioningtemplateArray and ProvisioningtemplateArrayOutput values.
// You can construct a concrete instance of `ProvisioningtemplateArrayInput` via:
//
//	ProvisioningtemplateArray{ ProvisioningtemplateArgs{...} }
type ProvisioningtemplateArrayInput interface {
	pulumi.Input

	ToProvisioningtemplateArrayOutput() ProvisioningtemplateArrayOutput
	ToProvisioningtemplateArrayOutputWithContext(context.Context) ProvisioningtemplateArrayOutput
}

type ProvisioningtemplateArray []ProvisioningtemplateInput

func (ProvisioningtemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Provisioningtemplate)(nil)).Elem()
}

func (i ProvisioningtemplateArray) ToProvisioningtemplateArrayOutput() ProvisioningtemplateArrayOutput {
	return i.ToProvisioningtemplateArrayOutputWithContext(context.Background())
}

func (i ProvisioningtemplateArray) ToProvisioningtemplateArrayOutputWithContext(ctx context.Context) ProvisioningtemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningtemplateArrayOutput)
}

// ProvisioningtemplateMapInput is an input type that accepts ProvisioningtemplateMap and ProvisioningtemplateMapOutput values.
// You can construct a concrete instance of `ProvisioningtemplateMapInput` via:
//
//	ProvisioningtemplateMap{ "key": ProvisioningtemplateArgs{...} }
type ProvisioningtemplateMapInput interface {
	pulumi.Input

	ToProvisioningtemplateMapOutput() ProvisioningtemplateMapOutput
	ToProvisioningtemplateMapOutputWithContext(context.Context) ProvisioningtemplateMapOutput
}

type ProvisioningtemplateMap map[string]ProvisioningtemplateInput

func (ProvisioningtemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Provisioningtemplate)(nil)).Elem()
}

func (i ProvisioningtemplateMap) ToProvisioningtemplateMapOutput() ProvisioningtemplateMapOutput {
	return i.ToProvisioningtemplateMapOutputWithContext(context.Background())
}

func (i ProvisioningtemplateMap) ToProvisioningtemplateMapOutputWithContext(ctx context.Context) ProvisioningtemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProvisioningtemplateMapOutput)
}

type ProvisioningtemplateOutput struct{ *pulumi.OutputState }

func (ProvisioningtemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provisioningtemplate)(nil)).Elem()
}

func (o ProvisioningtemplateOutput) ToProvisioningtemplateOutput() ProvisioningtemplateOutput {
	return o
}

func (o ProvisioningtemplateOutput) ToProvisioningtemplateOutputWithContext(ctx context.Context) ProvisioningtemplateOutput {
	return o
}

// @SUMMARY Provisioning templates are scripts used to describe how to bootstrap and install the operating system on the
// host.
func (o ProvisioningtemplateOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Notes and comments for auditing purposes.
func (o ProvisioningtemplateOutput) AuditComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.StringPtrOutput { return v.AuditComment }).(pulumi.StringPtrOutput)
}

// A description of the provisioning template.
func (o ProvisioningtemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether or not the template is locked for editing.
func (o ProvisioningtemplateOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.BoolPtrOutput { return v.Locked }).(pulumi.BoolPtrOutput)
}

// Name of the provisioning template. @EXAMPLE "AutoYaST default"
func (o ProvisioningtemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IDs of the operating systems associated with this provisioning template.
func (o ProvisioningtemplateOutput) OperatingsystemIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.IntArrayOutput { return v.OperatingsystemIds }).(pulumi.IntArrayOutput)
}

// Whether or not the provisioning template is a snippet be used by other templates.
func (o ProvisioningtemplateOutput) Snippet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.BoolPtrOutput { return v.Snippet }).(pulumi.BoolPtrOutput)
}

// The markup and code of the provisioning template. @EXAMPLE "void"
func (o ProvisioningtemplateOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.StringOutput { return v.Template }).(pulumi.StringOutput)
}

// How templates are determined: When editing a template, you must assign a list of operating systems which this template
// can be used with. Optionally, you can restrict a template to a list of host groups and/or environments. When a host
// requests a template, Foreman will select the best match from the available templates of that type in the following
// order: 1. host group and environment 2. host group only 3. environment only 4. operating system default Template
// combinations attributes contains an array of hostgroup IDs and environment ID combinations so they can be used in the
// provisioning template selection described above.
func (o ProvisioningtemplateOutput) TemplateCombinationsAttributes() ProvisioningtemplateTemplateCombinationsAttributeArrayOutput {
	return o.ApplyT(func(v *Provisioningtemplate) ProvisioningtemplateTemplateCombinationsAttributeArrayOutput {
		return v.TemplateCombinationsAttributes
	}).(ProvisioningtemplateTemplateCombinationsAttributeArrayOutput)
}

// ID of the template kind which categorizes the provisioning template. Optional for snippets, otherwise required.
func (o ProvisioningtemplateOutput) TemplateKindId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Provisioningtemplate) pulumi.IntPtrOutput { return v.TemplateKindId }).(pulumi.IntPtrOutput)
}

type ProvisioningtemplateArrayOutput struct{ *pulumi.OutputState }

func (ProvisioningtemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Provisioningtemplate)(nil)).Elem()
}

func (o ProvisioningtemplateArrayOutput) ToProvisioningtemplateArrayOutput() ProvisioningtemplateArrayOutput {
	return o
}

func (o ProvisioningtemplateArrayOutput) ToProvisioningtemplateArrayOutputWithContext(ctx context.Context) ProvisioningtemplateArrayOutput {
	return o
}

func (o ProvisioningtemplateArrayOutput) Index(i pulumi.IntInput) ProvisioningtemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Provisioningtemplate {
		return vs[0].([]*Provisioningtemplate)[vs[1].(int)]
	}).(ProvisioningtemplateOutput)
}

type ProvisioningtemplateMapOutput struct{ *pulumi.OutputState }

func (ProvisioningtemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Provisioningtemplate)(nil)).Elem()
}

func (o ProvisioningtemplateMapOutput) ToProvisioningtemplateMapOutput() ProvisioningtemplateMapOutput {
	return o
}

func (o ProvisioningtemplateMapOutput) ToProvisioningtemplateMapOutputWithContext(ctx context.Context) ProvisioningtemplateMapOutput {
	return o
}

func (o ProvisioningtemplateMapOutput) MapIndex(k pulumi.StringInput) ProvisioningtemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Provisioningtemplate {
		return vs[0].(map[string]*Provisioningtemplate)[vs[1].(string)]
	}).(ProvisioningtemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisioningtemplateInput)(nil)).Elem(), &Provisioningtemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisioningtemplateArrayInput)(nil)).Elem(), ProvisioningtemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProvisioningtemplateMapInput)(nil)).Elem(), ProvisioningtemplateMap{})
	pulumi.RegisterOutputType(ProvisioningtemplateOutput{})
	pulumi.RegisterOutputType(ProvisioningtemplateArrayOutput{})
	pulumi.RegisterOutputType(ProvisioningtemplateMapOutput{})
}
