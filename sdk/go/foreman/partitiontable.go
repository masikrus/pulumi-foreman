// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Partitiontable struct {
	pulumi.CustomResourceState

	// @SUMMARY The disk partition layout of the host.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
	// document the template changes.
	AuditComment pulumi.StringPtrOutput `pulumi:"auditComment"`
	// Description of the partition table
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// IDs of the hosts associated with this partition table.
	HostIds pulumi.IntArrayOutput `pulumi:"hostIds"`
	// IDs of the hostgroups associated with this partition table.
	HostgroupIds pulumi.IntArrayOutput `pulumi:"hostgroupIds"`
	// The script that defines the partition table layout. @EXAMPLE "void"
	Layout pulumi.StringOutput `pulumi:"layout"`
	// Whether or not this partition table is locked for editing.
	Locked pulumi.BoolPtrOutput `pulumi:"locked"`
	// The name of the partition table. @EXAMPLE "AutoYaST LVM"
	Name pulumi.StringOutput `pulumi:"name"`
	// IDs of the operating system associated with this partition table.
	OperatingsystemIds pulumi.IntArrayOutput `pulumi:"operatingsystemIds"`
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily pulumi.StringPtrOutput `pulumi:"osFamily"`
	// Whether or not this partition table is a snippet to be embedded in other partition tables.
	Snippet pulumi.BoolPtrOutput `pulumi:"snippet"`
}

// NewPartitiontable registers a new resource with the given unique name, arguments, and options.
func NewPartitiontable(ctx *pulumi.Context,
	name string, args *PartitiontableArgs, opts ...pulumi.ResourceOption) (*Partitiontable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Layout == nil {
		return nil, errors.New("invalid value for required argument 'Layout'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Partitiontable
	err := ctx.RegisterResource("foreman:index/partitiontable:Partitiontable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartitiontable gets an existing Partitiontable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartitiontable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartitiontableState, opts ...pulumi.ResourceOption) (*Partitiontable, error) {
	var resource Partitiontable
	err := ctx.ReadResource("foreman:index/partitiontable:Partitiontable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Partitiontable resources.
type partitiontableState struct {
	// @SUMMARY The disk partition layout of the host.
	__meta_ *bool `pulumi:"__meta_"`
	// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
	// document the template changes.
	AuditComment *string `pulumi:"auditComment"`
	// Description of the partition table
	Description *string `pulumi:"description"`
	// IDs of the hosts associated with this partition table.
	HostIds []int `pulumi:"hostIds"`
	// IDs of the hostgroups associated with this partition table.
	HostgroupIds []int `pulumi:"hostgroupIds"`
	// The script that defines the partition table layout. @EXAMPLE "void"
	Layout *string `pulumi:"layout"`
	// Whether or not this partition table is locked for editing.
	Locked *bool `pulumi:"locked"`
	// The name of the partition table. @EXAMPLE "AutoYaST LVM"
	Name *string `pulumi:"name"`
	// IDs of the operating system associated with this partition table.
	OperatingsystemIds []int `pulumi:"operatingsystemIds"`
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily *string `pulumi:"osFamily"`
	// Whether or not this partition table is a snippet to be embedded in other partition tables.
	Snippet *bool `pulumi:"snippet"`
}

type PartitiontableState struct {
	// @SUMMARY The disk partition layout of the host.
	__meta_ pulumi.BoolPtrInput
	// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
	// document the template changes.
	AuditComment pulumi.StringPtrInput
	// Description of the partition table
	Description pulumi.StringPtrInput
	// IDs of the hosts associated with this partition table.
	HostIds pulumi.IntArrayInput
	// IDs of the hostgroups associated with this partition table.
	HostgroupIds pulumi.IntArrayInput
	// The script that defines the partition table layout. @EXAMPLE "void"
	Layout pulumi.StringPtrInput
	// Whether or not this partition table is locked for editing.
	Locked pulumi.BoolPtrInput
	// The name of the partition table. @EXAMPLE "AutoYaST LVM"
	Name pulumi.StringPtrInput
	// IDs of the operating system associated with this partition table.
	OperatingsystemIds pulumi.IntArrayInput
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily pulumi.StringPtrInput
	// Whether or not this partition table is a snippet to be embedded in other partition tables.
	Snippet pulumi.BoolPtrInput
}

func (PartitiontableState) ElementType() reflect.Type {
	return reflect.TypeOf((*partitiontableState)(nil)).Elem()
}

type partitiontableArgs struct {
	// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
	// document the template changes.
	AuditComment *string `pulumi:"auditComment"`
	// Description of the partition table
	Description *string `pulumi:"description"`
	// IDs of the hosts associated with this partition table.
	HostIds []int `pulumi:"hostIds"`
	// IDs of the hostgroups associated with this partition table.
	HostgroupIds []int `pulumi:"hostgroupIds"`
	// The script that defines the partition table layout. @EXAMPLE "void"
	Layout string `pulumi:"layout"`
	// Whether or not this partition table is locked for editing.
	Locked *bool `pulumi:"locked"`
	// The name of the partition table. @EXAMPLE "AutoYaST LVM"
	Name *string `pulumi:"name"`
	// IDs of the operating system associated with this partition table.
	OperatingsystemIds []int `pulumi:"operatingsystemIds"`
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily *string `pulumi:"osFamily"`
	// Whether or not this partition table is a snippet to be embedded in other partition tables.
	Snippet *bool `pulumi:"snippet"`
}

// The set of arguments for constructing a Partitiontable resource.
type PartitiontableArgs struct {
	// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
	// document the template changes.
	AuditComment pulumi.StringPtrInput
	// Description of the partition table
	Description pulumi.StringPtrInput
	// IDs of the hosts associated with this partition table.
	HostIds pulumi.IntArrayInput
	// IDs of the hostgroups associated with this partition table.
	HostgroupIds pulumi.IntArrayInput
	// The script that defines the partition table layout. @EXAMPLE "void"
	Layout pulumi.StringInput
	// Whether or not this partition table is locked for editing.
	Locked pulumi.BoolPtrInput
	// The name of the partition table. @EXAMPLE "AutoYaST LVM"
	Name pulumi.StringPtrInput
	// IDs of the operating system associated with this partition table.
	OperatingsystemIds pulumi.IntArrayInput
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily pulumi.StringPtrInput
	// Whether or not this partition table is a snippet to be embedded in other partition tables.
	Snippet pulumi.BoolPtrInput
}

func (PartitiontableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partitiontableArgs)(nil)).Elem()
}

type PartitiontableInput interface {
	pulumi.Input

	ToPartitiontableOutput() PartitiontableOutput
	ToPartitiontableOutputWithContext(ctx context.Context) PartitiontableOutput
}

func (*Partitiontable) ElementType() reflect.Type {
	return reflect.TypeOf((**Partitiontable)(nil)).Elem()
}

func (i *Partitiontable) ToPartitiontableOutput() PartitiontableOutput {
	return i.ToPartitiontableOutputWithContext(context.Background())
}

func (i *Partitiontable) ToPartitiontableOutputWithContext(ctx context.Context) PartitiontableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitiontableOutput)
}

// PartitiontableArrayInput is an input type that accepts PartitiontableArray and PartitiontableArrayOutput values.
// You can construct a concrete instance of `PartitiontableArrayInput` via:
//
//	PartitiontableArray{ PartitiontableArgs{...} }
type PartitiontableArrayInput interface {
	pulumi.Input

	ToPartitiontableArrayOutput() PartitiontableArrayOutput
	ToPartitiontableArrayOutputWithContext(context.Context) PartitiontableArrayOutput
}

type PartitiontableArray []PartitiontableInput

func (PartitiontableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Partitiontable)(nil)).Elem()
}

func (i PartitiontableArray) ToPartitiontableArrayOutput() PartitiontableArrayOutput {
	return i.ToPartitiontableArrayOutputWithContext(context.Background())
}

func (i PartitiontableArray) ToPartitiontableArrayOutputWithContext(ctx context.Context) PartitiontableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitiontableArrayOutput)
}

// PartitiontableMapInput is an input type that accepts PartitiontableMap and PartitiontableMapOutput values.
// You can construct a concrete instance of `PartitiontableMapInput` via:
//
//	PartitiontableMap{ "key": PartitiontableArgs{...} }
type PartitiontableMapInput interface {
	pulumi.Input

	ToPartitiontableMapOutput() PartitiontableMapOutput
	ToPartitiontableMapOutputWithContext(context.Context) PartitiontableMapOutput
}

type PartitiontableMap map[string]PartitiontableInput

func (PartitiontableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Partitiontable)(nil)).Elem()
}

func (i PartitiontableMap) ToPartitiontableMapOutput() PartitiontableMapOutput {
	return i.ToPartitiontableMapOutputWithContext(context.Background())
}

func (i PartitiontableMap) ToPartitiontableMapOutputWithContext(ctx context.Context) PartitiontableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartitiontableMapOutput)
}

type PartitiontableOutput struct{ *pulumi.OutputState }

func (PartitiontableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Partitiontable)(nil)).Elem()
}

func (o PartitiontableOutput) ToPartitiontableOutput() PartitiontableOutput {
	return o
}

func (o PartitiontableOutput) ToPartitiontableOutputWithContext(ctx context.Context) PartitiontableOutput {
	return o
}

// @SUMMARY The disk partition layout of the host.
func (o PartitiontableOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Any audit comments to associate with the partition table. The audit comment field is saved with the template auditing to
// document the template changes.
func (o PartitiontableOutput) AuditComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.StringPtrOutput { return v.AuditComment }).(pulumi.StringPtrOutput)
}

// Description of the partition table
func (o PartitiontableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// IDs of the hosts associated with this partition table.
func (o PartitiontableOutput) HostIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.IntArrayOutput { return v.HostIds }).(pulumi.IntArrayOutput)
}

// IDs of the hostgroups associated with this partition table.
func (o PartitiontableOutput) HostgroupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.IntArrayOutput { return v.HostgroupIds }).(pulumi.IntArrayOutput)
}

// The script that defines the partition table layout. @EXAMPLE "void"
func (o PartitiontableOutput) Layout() pulumi.StringOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.StringOutput { return v.Layout }).(pulumi.StringOutput)
}

// Whether or not this partition table is locked for editing.
func (o PartitiontableOutput) Locked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.BoolPtrOutput { return v.Locked }).(pulumi.BoolPtrOutput)
}

// The name of the partition table. @EXAMPLE "AutoYaST LVM"
func (o PartitiontableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IDs of the operating system associated with this partition table.
func (o PartitiontableOutput) OperatingsystemIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.IntArrayOutput { return v.OperatingsystemIds }).(pulumi.IntArrayOutput)
}

// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
func (o PartitiontableOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.StringPtrOutput { return v.OsFamily }).(pulumi.StringPtrOutput)
}

// Whether or not this partition table is a snippet to be embedded in other partition tables.
func (o PartitiontableOutput) Snippet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Partitiontable) pulumi.BoolPtrOutput { return v.Snippet }).(pulumi.BoolPtrOutput)
}

type PartitiontableArrayOutput struct{ *pulumi.OutputState }

func (PartitiontableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Partitiontable)(nil)).Elem()
}

func (o PartitiontableArrayOutput) ToPartitiontableArrayOutput() PartitiontableArrayOutput {
	return o
}

func (o PartitiontableArrayOutput) ToPartitiontableArrayOutputWithContext(ctx context.Context) PartitiontableArrayOutput {
	return o
}

func (o PartitiontableArrayOutput) Index(i pulumi.IntInput) PartitiontableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Partitiontable {
		return vs[0].([]*Partitiontable)[vs[1].(int)]
	}).(PartitiontableOutput)
}

type PartitiontableMapOutput struct{ *pulumi.OutputState }

func (PartitiontableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Partitiontable)(nil)).Elem()
}

func (o PartitiontableMapOutput) ToPartitiontableMapOutput() PartitiontableMapOutput {
	return o
}

func (o PartitiontableMapOutput) ToPartitiontableMapOutputWithContext(ctx context.Context) PartitiontableMapOutput {
	return o
}

func (o PartitiontableMapOutput) MapIndex(k pulumi.StringInput) PartitiontableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Partitiontable {
		return vs[0].(map[string]*Partitiontable)[vs[1].(string)]
	}).(PartitiontableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartitiontableInput)(nil)).Elem(), &Partitiontable{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitiontableArrayInput)(nil)).Elem(), PartitiontableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartitiontableMapInput)(nil)).Elem(), PartitiontableMap{})
	pulumi.RegisterOutputType(PartitiontableOutput{})
	pulumi.RegisterOutputType(PartitiontableArrayOutput{})
	pulumi.RegisterOutputType(PartitiontableMapOutput{})
}
