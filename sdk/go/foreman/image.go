// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Image struct {
	pulumi.CustomResourceState

	// @SUMMARY Foreman representation of image.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// ID of the architecture in Foreman
	ArchitectureId pulumi.IntOutput `pulumi:"architectureId"`
	// ID of the compute resource in Foreman
	ComputeResourceId pulumi.IntOutput `pulumi:"computeResourceId"`
	// Name of the image to be used in Foreman
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the operating system in Foreman
	OperatingsystemId pulumi.IntOutput `pulumi:"operatingsystemId"`
	// Does the image support user data (cloud-init etc.)?
	UserData pulumi.BoolPtrOutput `pulumi:"userData"`
	// Username used to log into the newly created machine that is based on this image
	Username pulumi.StringOutput `pulumi:"username"`
	// UUID of the image from the compute resource
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArchitectureId == nil {
		return nil, errors.New("invalid value for required argument 'ArchitectureId'")
	}
	if args.ComputeResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ComputeResourceId'")
	}
	if args.OperatingsystemId == nil {
		return nil, errors.New("invalid value for required argument 'OperatingsystemId'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Uuid == nil {
		return nil, errors.New("invalid value for required argument 'Uuid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("foreman:index/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("foreman:index/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// @SUMMARY Foreman representation of image.
	__meta_ *bool `pulumi:"__meta_"`
	// ID of the architecture in Foreman
	ArchitectureId *int `pulumi:"architectureId"`
	// ID of the compute resource in Foreman
	ComputeResourceId *int `pulumi:"computeResourceId"`
	// Name of the image to be used in Foreman
	Name *string `pulumi:"name"`
	// ID of the operating system in Foreman
	OperatingsystemId *int `pulumi:"operatingsystemId"`
	// Does the image support user data (cloud-init etc.)?
	UserData *bool `pulumi:"userData"`
	// Username used to log into the newly created machine that is based on this image
	Username *string `pulumi:"username"`
	// UUID of the image from the compute resource
	Uuid *string `pulumi:"uuid"`
}

type ImageState struct {
	// @SUMMARY Foreman representation of image.
	__meta_ pulumi.BoolPtrInput
	// ID of the architecture in Foreman
	ArchitectureId pulumi.IntPtrInput
	// ID of the compute resource in Foreman
	ComputeResourceId pulumi.IntPtrInput
	// Name of the image to be used in Foreman
	Name pulumi.StringPtrInput
	// ID of the operating system in Foreman
	OperatingsystemId pulumi.IntPtrInput
	// Does the image support user data (cloud-init etc.)?
	UserData pulumi.BoolPtrInput
	// Username used to log into the newly created machine that is based on this image
	Username pulumi.StringPtrInput
	// UUID of the image from the compute resource
	Uuid pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// ID of the architecture in Foreman
	ArchitectureId int `pulumi:"architectureId"`
	// ID of the compute resource in Foreman
	ComputeResourceId int `pulumi:"computeResourceId"`
	// Name of the image to be used in Foreman
	Name *string `pulumi:"name"`
	// ID of the operating system in Foreman
	OperatingsystemId int `pulumi:"operatingsystemId"`
	// Does the image support user data (cloud-init etc.)?
	UserData *bool `pulumi:"userData"`
	// Username used to log into the newly created machine that is based on this image
	Username string `pulumi:"username"`
	// UUID of the image from the compute resource
	Uuid string `pulumi:"uuid"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// ID of the architecture in Foreman
	ArchitectureId pulumi.IntInput
	// ID of the compute resource in Foreman
	ComputeResourceId pulumi.IntInput
	// Name of the image to be used in Foreman
	Name pulumi.StringPtrInput
	// ID of the operating system in Foreman
	OperatingsystemId pulumi.IntInput
	// Does the image support user data (cloud-init etc.)?
	UserData pulumi.BoolPtrInput
	// Username used to log into the newly created machine that is based on this image
	Username pulumi.StringInput
	// UUID of the image from the compute resource
	Uuid pulumi.StringInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// @SUMMARY Foreman representation of image.
func (o ImageOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// ID of the architecture in Foreman
func (o ImageOutput) ArchitectureId() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.ArchitectureId }).(pulumi.IntOutput)
}

// ID of the compute resource in Foreman
func (o ImageOutput) ComputeResourceId() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.ComputeResourceId }).(pulumi.IntOutput)
}

// Name of the image to be used in Foreman
func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the operating system in Foreman
func (o ImageOutput) OperatingsystemId() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.OperatingsystemId }).(pulumi.IntOutput)
}

// Does the image support user data (cloud-init etc.)?
func (o ImageOutput) UserData() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolPtrOutput { return v.UserData }).(pulumi.BoolPtrOutput)
}

// Username used to log into the newly created machine that is based on this image
func (o ImageOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// UUID of the image from the compute resource
func (o ImageOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
