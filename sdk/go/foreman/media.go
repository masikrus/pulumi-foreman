// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Media struct {
	pulumi.CustomResourceState

	// @SUMMARY Remote installation media.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Name of the media. @EXAMPLE "CentOS mirror"
	Name pulumi.StringOutput `pulumi:"name"`
	// IDs of the operating systems associated with this media.
	OperatingsystemIds pulumi.IntArrayOutput `pulumi:"operatingsystemIds"`
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily pulumi.StringPtrOutput `pulumi:"osFamily"`
	// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
	// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
	// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
	// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
	Path pulumi.StringOutput `pulumi:"path"`
}

// NewMedia registers a new resource with the given unique name, arguments, and options.
func NewMedia(ctx *pulumi.Context,
	name string, args *MediaArgs, opts ...pulumi.ResourceOption) (*Media, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Media
	err := ctx.RegisterResource("foreman:index/media:Media", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMedia gets an existing Media resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMedia(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaState, opts ...pulumi.ResourceOption) (*Media, error) {
	var resource Media
	err := ctx.ReadResource("foreman:index/media:Media", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Media resources.
type mediaState struct {
	// @SUMMARY Remote installation media.
	__meta_ *bool `pulumi:"__meta_"`
	// Name of the media. @EXAMPLE "CentOS mirror"
	Name *string `pulumi:"name"`
	// IDs of the operating systems associated with this media.
	OperatingsystemIds []int `pulumi:"operatingsystemIds"`
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily *string `pulumi:"osFamily"`
	// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
	// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
	// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
	// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
	Path *string `pulumi:"path"`
}

type MediaState struct {
	// @SUMMARY Remote installation media.
	__meta_ pulumi.BoolPtrInput
	// Name of the media. @EXAMPLE "CentOS mirror"
	Name pulumi.StringPtrInput
	// IDs of the operating systems associated with this media.
	OperatingsystemIds pulumi.IntArrayInput
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily pulumi.StringPtrInput
	// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
	// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
	// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
	// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
	Path pulumi.StringPtrInput
}

func (MediaState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaState)(nil)).Elem()
}

type mediaArgs struct {
	// Name of the media. @EXAMPLE "CentOS mirror"
	Name *string `pulumi:"name"`
	// IDs of the operating systems associated with this media.
	OperatingsystemIds []int `pulumi:"operatingsystemIds"`
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily *string `pulumi:"osFamily"`
	// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
	// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
	// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
	// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a Media resource.
type MediaArgs struct {
	// Name of the media. @EXAMPLE "CentOS mirror"
	Name pulumi.StringPtrInput
	// IDs of the operating systems associated with this media.
	OperatingsystemIds pulumi.IntArrayInput
	// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
	// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
	OsFamily pulumi.StringPtrInput
	// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
	// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
	// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
	// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
	Path pulumi.StringInput
}

func (MediaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaArgs)(nil)).Elem()
}

type MediaInput interface {
	pulumi.Input

	ToMediaOutput() MediaOutput
	ToMediaOutputWithContext(ctx context.Context) MediaOutput
}

func (*Media) ElementType() reflect.Type {
	return reflect.TypeOf((**Media)(nil)).Elem()
}

func (i *Media) ToMediaOutput() MediaOutput {
	return i.ToMediaOutputWithContext(context.Background())
}

func (i *Media) ToMediaOutputWithContext(ctx context.Context) MediaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaOutput)
}

// MediaArrayInput is an input type that accepts MediaArray and MediaArrayOutput values.
// You can construct a concrete instance of `MediaArrayInput` via:
//
//	MediaArray{ MediaArgs{...} }
type MediaArrayInput interface {
	pulumi.Input

	ToMediaArrayOutput() MediaArrayOutput
	ToMediaArrayOutputWithContext(context.Context) MediaArrayOutput
}

type MediaArray []MediaInput

func (MediaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Media)(nil)).Elem()
}

func (i MediaArray) ToMediaArrayOutput() MediaArrayOutput {
	return i.ToMediaArrayOutputWithContext(context.Background())
}

func (i MediaArray) ToMediaArrayOutputWithContext(ctx context.Context) MediaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaArrayOutput)
}

// MediaMapInput is an input type that accepts MediaMap and MediaMapOutput values.
// You can construct a concrete instance of `MediaMapInput` via:
//
//	MediaMap{ "key": MediaArgs{...} }
type MediaMapInput interface {
	pulumi.Input

	ToMediaMapOutput() MediaMapOutput
	ToMediaMapOutputWithContext(context.Context) MediaMapOutput
}

type MediaMap map[string]MediaInput

func (MediaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Media)(nil)).Elem()
}

func (i MediaMap) ToMediaMapOutput() MediaMapOutput {
	return i.ToMediaMapOutputWithContext(context.Background())
}

func (i MediaMap) ToMediaMapOutputWithContext(ctx context.Context) MediaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaMapOutput)
}

type MediaOutput struct{ *pulumi.OutputState }

func (MediaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Media)(nil)).Elem()
}

func (o MediaOutput) ToMediaOutput() MediaOutput {
	return o
}

func (o MediaOutput) ToMediaOutputWithContext(ctx context.Context) MediaOutput {
	return o
}

// @SUMMARY Remote installation media.
func (o MediaOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Media) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Name of the media. @EXAMPLE "CentOS mirror"
func (o MediaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Media) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// IDs of the operating systems associated with this media.
func (o MediaOutput) OperatingsystemIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Media) pulumi.IntArrayOutput { return v.OperatingsystemIds }).(pulumi.IntArrayOutput)
}

// Operating system family. Values include: `"AIX"`, `"Altlinux"`, `"Archlinux"`, `"Coreos"`, `"Debian"`, `"Freebsd"`,
// `"Gentoo"`, `"Junos"`, `"NXOS"`, `"Redhat"`, `"Solaris"`, `"Suse"`, `"Windows"`.
func (o MediaOutput) OsFamily() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Media) pulumi.StringPtrOutput { return v.OsFamily }).(pulumi.StringPtrOutput)
}

// The path to the medium, can be a URL or a valid NFS server (exclusive of the architecture). For example:
// http://mirror.centos.org/centos/$version/os/$arch Where $arch will be substituted for the host's actual OS architecture
// and $version, $major, $minor will be substituted for the version of the operating system. Solaris and Debian media may
// also use $release. @EXAMPLE "http://mirror.averse.net/centos/$major.$minor/os/$arch"
func (o MediaOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Media) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

type MediaArrayOutput struct{ *pulumi.OutputState }

func (MediaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Media)(nil)).Elem()
}

func (o MediaArrayOutput) ToMediaArrayOutput() MediaArrayOutput {
	return o
}

func (o MediaArrayOutput) ToMediaArrayOutputWithContext(ctx context.Context) MediaArrayOutput {
	return o
}

func (o MediaArrayOutput) Index(i pulumi.IntInput) MediaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Media {
		return vs[0].([]*Media)[vs[1].(int)]
	}).(MediaOutput)
}

type MediaMapOutput struct{ *pulumi.OutputState }

func (MediaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Media)(nil)).Elem()
}

func (o MediaMapOutput) ToMediaMapOutput() MediaMapOutput {
	return o
}

func (o MediaMapOutput) ToMediaMapOutputWithContext(ctx context.Context) MediaMapOutput {
	return o
}

func (o MediaMapOutput) MapIndex(k pulumi.StringInput) MediaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Media {
		return vs[0].(map[string]*Media)[vs[1].(string)]
	}).(MediaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaInput)(nil)).Elem(), &Media{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaArrayInput)(nil)).Elem(), MediaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaMapInput)(nil)).Elem(), MediaMap{})
	pulumi.RegisterOutputType(MediaOutput{})
	pulumi.RegisterOutputType(MediaArrayOutput{})
	pulumi.RegisterOutputType(MediaMapOutput{})
}
