// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Usergroup struct {
	pulumi.CustomResourceState

	// @SUMMARY Usergroups can be used to organize permissions and ownership of the hosts.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Is an admin user group.@EXAMPLE true
	Admin pulumi.BoolPtrOutput `pulumi:"admin"`
	// Usergroup name. @EXAMPLE "compute"
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewUsergroup registers a new resource with the given unique name, arguments, and options.
func NewUsergroup(ctx *pulumi.Context,
	name string, args *UsergroupArgs, opts ...pulumi.ResourceOption) (*Usergroup, error) {
	if args == nil {
		args = &UsergroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Usergroup
	err := ctx.RegisterResource("foreman:index/usergroup:Usergroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsergroup gets an existing Usergroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsergroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsergroupState, opts ...pulumi.ResourceOption) (*Usergroup, error) {
	var resource Usergroup
	err := ctx.ReadResource("foreman:index/usergroup:Usergroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Usergroup resources.
type usergroupState struct {
	// @SUMMARY Usergroups can be used to organize permissions and ownership of the hosts.
	__meta_ *bool `pulumi:"__meta_"`
	// Is an admin user group.@EXAMPLE true
	Admin *bool `pulumi:"admin"`
	// Usergroup name. @EXAMPLE "compute"
	Name *string `pulumi:"name"`
}

type UsergroupState struct {
	// @SUMMARY Usergroups can be used to organize permissions and ownership of the hosts.
	__meta_ pulumi.BoolPtrInput
	// Is an admin user group.@EXAMPLE true
	Admin pulumi.BoolPtrInput
	// Usergroup name. @EXAMPLE "compute"
	Name pulumi.StringPtrInput
}

func (UsergroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*usergroupState)(nil)).Elem()
}

type usergroupArgs struct {
	// Is an admin user group.@EXAMPLE true
	Admin *bool `pulumi:"admin"`
	// Usergroup name. @EXAMPLE "compute"
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Usergroup resource.
type UsergroupArgs struct {
	// Is an admin user group.@EXAMPLE true
	Admin pulumi.BoolPtrInput
	// Usergroup name. @EXAMPLE "compute"
	Name pulumi.StringPtrInput
}

func (UsergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usergroupArgs)(nil)).Elem()
}

type UsergroupInput interface {
	pulumi.Input

	ToUsergroupOutput() UsergroupOutput
	ToUsergroupOutputWithContext(ctx context.Context) UsergroupOutput
}

func (*Usergroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Usergroup)(nil)).Elem()
}

func (i *Usergroup) ToUsergroupOutput() UsergroupOutput {
	return i.ToUsergroupOutputWithContext(context.Background())
}

func (i *Usergroup) ToUsergroupOutputWithContext(ctx context.Context) UsergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsergroupOutput)
}

// UsergroupArrayInput is an input type that accepts UsergroupArray and UsergroupArrayOutput values.
// You can construct a concrete instance of `UsergroupArrayInput` via:
//
//	UsergroupArray{ UsergroupArgs{...} }
type UsergroupArrayInput interface {
	pulumi.Input

	ToUsergroupArrayOutput() UsergroupArrayOutput
	ToUsergroupArrayOutputWithContext(context.Context) UsergroupArrayOutput
}

type UsergroupArray []UsergroupInput

func (UsergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Usergroup)(nil)).Elem()
}

func (i UsergroupArray) ToUsergroupArrayOutput() UsergroupArrayOutput {
	return i.ToUsergroupArrayOutputWithContext(context.Background())
}

func (i UsergroupArray) ToUsergroupArrayOutputWithContext(ctx context.Context) UsergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsergroupArrayOutput)
}

// UsergroupMapInput is an input type that accepts UsergroupMap and UsergroupMapOutput values.
// You can construct a concrete instance of `UsergroupMapInput` via:
//
//	UsergroupMap{ "key": UsergroupArgs{...} }
type UsergroupMapInput interface {
	pulumi.Input

	ToUsergroupMapOutput() UsergroupMapOutput
	ToUsergroupMapOutputWithContext(context.Context) UsergroupMapOutput
}

type UsergroupMap map[string]UsergroupInput

func (UsergroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Usergroup)(nil)).Elem()
}

func (i UsergroupMap) ToUsergroupMapOutput() UsergroupMapOutput {
	return i.ToUsergroupMapOutputWithContext(context.Background())
}

func (i UsergroupMap) ToUsergroupMapOutputWithContext(ctx context.Context) UsergroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsergroupMapOutput)
}

type UsergroupOutput struct{ *pulumi.OutputState }

func (UsergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Usergroup)(nil)).Elem()
}

func (o UsergroupOutput) ToUsergroupOutput() UsergroupOutput {
	return o
}

func (o UsergroupOutput) ToUsergroupOutputWithContext(ctx context.Context) UsergroupOutput {
	return o
}

// @SUMMARY Usergroups can be used to organize permissions and ownership of the hosts.
func (o UsergroupOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Usergroup) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Is an admin user group.@EXAMPLE true
func (o UsergroupOutput) Admin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Usergroup) pulumi.BoolPtrOutput { return v.Admin }).(pulumi.BoolPtrOutput)
}

// Usergroup name. @EXAMPLE "compute"
func (o UsergroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Usergroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type UsergroupArrayOutput struct{ *pulumi.OutputState }

func (UsergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Usergroup)(nil)).Elem()
}

func (o UsergroupArrayOutput) ToUsergroupArrayOutput() UsergroupArrayOutput {
	return o
}

func (o UsergroupArrayOutput) ToUsergroupArrayOutputWithContext(ctx context.Context) UsergroupArrayOutput {
	return o
}

func (o UsergroupArrayOutput) Index(i pulumi.IntInput) UsergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Usergroup {
		return vs[0].([]*Usergroup)[vs[1].(int)]
	}).(UsergroupOutput)
}

type UsergroupMapOutput struct{ *pulumi.OutputState }

func (UsergroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Usergroup)(nil)).Elem()
}

func (o UsergroupMapOutput) ToUsergroupMapOutput() UsergroupMapOutput {
	return o
}

func (o UsergroupMapOutput) ToUsergroupMapOutputWithContext(ctx context.Context) UsergroupMapOutput {
	return o
}

func (o UsergroupMapOutput) MapIndex(k pulumi.StringInput) UsergroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Usergroup {
		return vs[0].(map[string]*Usergroup)[vs[1].(string)]
	}).(UsergroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsergroupInput)(nil)).Elem(), &Usergroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsergroupArrayInput)(nil)).Elem(), UsergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsergroupMapInput)(nil)).Elem(), UsergroupMap{})
	pulumi.RegisterOutputType(UsergroupOutput{})
	pulumi.RegisterOutputType(UsergroupArrayOutput{})
	pulumi.RegisterOutputType(UsergroupMapOutput{})
}
