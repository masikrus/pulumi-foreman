// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Hostgroup struct {
	pulumi.CustomResourceState

	// @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
	// get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
	// configuration of various hosts based on common attributes.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// ID of the architecture associated with this hostgroup.
	ArchitectureId pulumi.IntOutput `pulumi:"architectureId"`
	// ID of the compute profile associated with this hostgroup.
	ComputeProfileId pulumi.IntOutput `pulumi:"computeProfileId"`
	// ID of the compute resource associated with this hostgroup.
	ComputeResourceId pulumi.IntOutput `pulumi:"computeResourceId"`
	// IDs of the applied config groups.
	ConfigGroupIds pulumi.IntArrayOutput `pulumi:"configGroupIds"`
	// ID of the content source associated with this hostgroup.
	ContentSourceId pulumi.IntOutput `pulumi:"contentSourceId"`
	// ID of the content view associated with this hostgroup.
	ContentViewId pulumi.IntOutput `pulumi:"contentViewId"`
	// ID of the domain associated with this hostgroup.
	DomainId pulumi.IntOutput `pulumi:"domainId"`
	// ID of the environment associated with this hostgroup.
	EnvironmentId pulumi.IntOutput `pulumi:"environmentId"`
	// ID of the lifecycle environment associated with this hostgroup.
	LifecycleEnvironmentId pulumi.IntOutput `pulumi:"lifecycleEnvironmentId"`
	// ID of the media associated with this hostgroup.
	MediumId pulumi.IntOutput `pulumi:"mediumId"`
	// Hostgroup name. @EXAMPLE "compute"
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the operating system associated with this hostgroup.
	OperatingsystemId pulumi.IntOutput `pulumi:"operatingsystemId"`
	// A map of parameters that will be saved as hostgroup parameters in the group config.
	Parameters pulumi.StringMapOutput `pulumi:"parameters"`
	// ID of the parent hostgroup.
	ParentId pulumi.IntPtrOutput `pulumi:"parentId"`
	// ID of the partition table associated with this hostgroup.
	PtableId pulumi.IntOutput `pulumi:"ptableId"`
	// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
	PuppetCaProxyId pulumi.IntPtrOutput `pulumi:"puppetCaProxyId"`
	// IDs of the applied puppet classes.
	PuppetClassIds pulumi.IntArrayOutput `pulumi:"puppetClassIds"`
	// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
	PuppetProxyId pulumi.IntPtrOutput `pulumi:"puppetProxyId"`
	// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
	// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
	// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
	PxeLoader pulumi.StringOutput `pulumi:"pxeLoader"`
	// ID of the realm associated with this hostgroup.
	RealmId pulumi.IntOutput `pulumi:"realmId"`
	// Default root password
	RootPassword pulumi.StringPtrOutput `pulumi:"rootPassword"`
	// ID of the subnet associated with the hostgroup.
	SubnetId pulumi.IntOutput `pulumi:"subnetId"`
	// The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
	// tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewHostgroup registers a new resource with the given unique name, arguments, and options.
func NewHostgroup(ctx *pulumi.Context,
	name string, args *HostgroupArgs, opts ...pulumi.ResourceOption) (*Hostgroup, error) {
	if args == nil {
		args = &HostgroupArgs{}
	}

	if args.RootPassword != nil {
		args.RootPassword = pulumi.ToSecret(args.RootPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"rootPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Hostgroup
	err := ctx.RegisterResource("foreman:index/hostgroup:Hostgroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostgroup gets an existing Hostgroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostgroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostgroupState, opts ...pulumi.ResourceOption) (*Hostgroup, error) {
	var resource Hostgroup
	err := ctx.ReadResource("foreman:index/hostgroup:Hostgroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Hostgroup resources.
type hostgroupState struct {
	// @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
	// get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
	// configuration of various hosts based on common attributes.
	__meta_ *bool `pulumi:"__meta_"`
	// ID of the architecture associated with this hostgroup.
	ArchitectureId *int `pulumi:"architectureId"`
	// ID of the compute profile associated with this hostgroup.
	ComputeProfileId *int `pulumi:"computeProfileId"`
	// ID of the compute resource associated with this hostgroup.
	ComputeResourceId *int `pulumi:"computeResourceId"`
	// IDs of the applied config groups.
	ConfigGroupIds []int `pulumi:"configGroupIds"`
	// ID of the content source associated with this hostgroup.
	ContentSourceId *int `pulumi:"contentSourceId"`
	// ID of the content view associated with this hostgroup.
	ContentViewId *int `pulumi:"contentViewId"`
	// ID of the domain associated with this hostgroup.
	DomainId *int `pulumi:"domainId"`
	// ID of the environment associated with this hostgroup.
	EnvironmentId *int `pulumi:"environmentId"`
	// ID of the lifecycle environment associated with this hostgroup.
	LifecycleEnvironmentId *int `pulumi:"lifecycleEnvironmentId"`
	// ID of the media associated with this hostgroup.
	MediumId *int `pulumi:"mediumId"`
	// Hostgroup name. @EXAMPLE "compute"
	Name *string `pulumi:"name"`
	// ID of the operating system associated with this hostgroup.
	OperatingsystemId *int `pulumi:"operatingsystemId"`
	// A map of parameters that will be saved as hostgroup parameters in the group config.
	Parameters map[string]string `pulumi:"parameters"`
	// ID of the parent hostgroup.
	ParentId *int `pulumi:"parentId"`
	// ID of the partition table associated with this hostgroup.
	PtableId *int `pulumi:"ptableId"`
	// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
	PuppetCaProxyId *int `pulumi:"puppetCaProxyId"`
	// IDs of the applied puppet classes.
	PuppetClassIds []int `pulumi:"puppetClassIds"`
	// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
	PuppetProxyId *int `pulumi:"puppetProxyId"`
	// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
	// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
	// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
	PxeLoader *string `pulumi:"pxeLoader"`
	// ID of the realm associated with this hostgroup.
	RealmId *int `pulumi:"realmId"`
	// Default root password
	RootPassword *string `pulumi:"rootPassword"`
	// ID of the subnet associated with the hostgroup.
	SubnetId *int `pulumi:"subnetId"`
	// The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
	// tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
	Title *string `pulumi:"title"`
}

type HostgroupState struct {
	// @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
	// get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
	// configuration of various hosts based on common attributes.
	__meta_ pulumi.BoolPtrInput
	// ID of the architecture associated with this hostgroup.
	ArchitectureId pulumi.IntPtrInput
	// ID of the compute profile associated with this hostgroup.
	ComputeProfileId pulumi.IntPtrInput
	// ID of the compute resource associated with this hostgroup.
	ComputeResourceId pulumi.IntPtrInput
	// IDs of the applied config groups.
	ConfigGroupIds pulumi.IntArrayInput
	// ID of the content source associated with this hostgroup.
	ContentSourceId pulumi.IntPtrInput
	// ID of the content view associated with this hostgroup.
	ContentViewId pulumi.IntPtrInput
	// ID of the domain associated with this hostgroup.
	DomainId pulumi.IntPtrInput
	// ID of the environment associated with this hostgroup.
	EnvironmentId pulumi.IntPtrInput
	// ID of the lifecycle environment associated with this hostgroup.
	LifecycleEnvironmentId pulumi.IntPtrInput
	// ID of the media associated with this hostgroup.
	MediumId pulumi.IntPtrInput
	// Hostgroup name. @EXAMPLE "compute"
	Name pulumi.StringPtrInput
	// ID of the operating system associated with this hostgroup.
	OperatingsystemId pulumi.IntPtrInput
	// A map of parameters that will be saved as hostgroup parameters in the group config.
	Parameters pulumi.StringMapInput
	// ID of the parent hostgroup.
	ParentId pulumi.IntPtrInput
	// ID of the partition table associated with this hostgroup.
	PtableId pulumi.IntPtrInput
	// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
	PuppetCaProxyId pulumi.IntPtrInput
	// IDs of the applied puppet classes.
	PuppetClassIds pulumi.IntArrayInput
	// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
	PuppetProxyId pulumi.IntPtrInput
	// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
	// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
	// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
	PxeLoader pulumi.StringPtrInput
	// ID of the realm associated with this hostgroup.
	RealmId pulumi.IntPtrInput
	// Default root password
	RootPassword pulumi.StringPtrInput
	// ID of the subnet associated with the hostgroup.
	SubnetId pulumi.IntPtrInput
	// The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
	// tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
	Title pulumi.StringPtrInput
}

func (HostgroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostgroupState)(nil)).Elem()
}

type hostgroupArgs struct {
	// ID of the architecture associated with this hostgroup.
	ArchitectureId *int `pulumi:"architectureId"`
	// ID of the compute profile associated with this hostgroup.
	ComputeProfileId *int `pulumi:"computeProfileId"`
	// ID of the compute resource associated with this hostgroup.
	ComputeResourceId *int `pulumi:"computeResourceId"`
	// IDs of the applied config groups.
	ConfigGroupIds []int `pulumi:"configGroupIds"`
	// ID of the content source associated with this hostgroup.
	ContentSourceId *int `pulumi:"contentSourceId"`
	// ID of the content view associated with this hostgroup.
	ContentViewId *int `pulumi:"contentViewId"`
	// ID of the domain associated with this hostgroup.
	DomainId *int `pulumi:"domainId"`
	// ID of the environment associated with this hostgroup.
	EnvironmentId *int `pulumi:"environmentId"`
	// ID of the lifecycle environment associated with this hostgroup.
	LifecycleEnvironmentId *int `pulumi:"lifecycleEnvironmentId"`
	// ID of the media associated with this hostgroup.
	MediumId *int `pulumi:"mediumId"`
	// Hostgroup name. @EXAMPLE "compute"
	Name *string `pulumi:"name"`
	// ID of the operating system associated with this hostgroup.
	OperatingsystemId *int `pulumi:"operatingsystemId"`
	// A map of parameters that will be saved as hostgroup parameters in the group config.
	Parameters map[string]string `pulumi:"parameters"`
	// ID of the parent hostgroup.
	ParentId *int `pulumi:"parentId"`
	// ID of the partition table associated with this hostgroup.
	PtableId *int `pulumi:"ptableId"`
	// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
	PuppetCaProxyId *int `pulumi:"puppetCaProxyId"`
	// IDs of the applied puppet classes.
	PuppetClassIds []int `pulumi:"puppetClassIds"`
	// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
	PuppetProxyId *int `pulumi:"puppetProxyId"`
	// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
	// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
	// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
	PxeLoader *string `pulumi:"pxeLoader"`
	// ID of the realm associated with this hostgroup.
	RealmId *int `pulumi:"realmId"`
	// Default root password
	RootPassword *string `pulumi:"rootPassword"`
	// ID of the subnet associated with the hostgroup.
	SubnetId *int `pulumi:"subnetId"`
}

// The set of arguments for constructing a Hostgroup resource.
type HostgroupArgs struct {
	// ID of the architecture associated with this hostgroup.
	ArchitectureId pulumi.IntPtrInput
	// ID of the compute profile associated with this hostgroup.
	ComputeProfileId pulumi.IntPtrInput
	// ID of the compute resource associated with this hostgroup.
	ComputeResourceId pulumi.IntPtrInput
	// IDs of the applied config groups.
	ConfigGroupIds pulumi.IntArrayInput
	// ID of the content source associated with this hostgroup.
	ContentSourceId pulumi.IntPtrInput
	// ID of the content view associated with this hostgroup.
	ContentViewId pulumi.IntPtrInput
	// ID of the domain associated with this hostgroup.
	DomainId pulumi.IntPtrInput
	// ID of the environment associated with this hostgroup.
	EnvironmentId pulumi.IntPtrInput
	// ID of the lifecycle environment associated with this hostgroup.
	LifecycleEnvironmentId pulumi.IntPtrInput
	// ID of the media associated with this hostgroup.
	MediumId pulumi.IntPtrInput
	// Hostgroup name. @EXAMPLE "compute"
	Name pulumi.StringPtrInput
	// ID of the operating system associated with this hostgroup.
	OperatingsystemId pulumi.IntPtrInput
	// A map of parameters that will be saved as hostgroup parameters in the group config.
	Parameters pulumi.StringMapInput
	// ID of the parent hostgroup.
	ParentId pulumi.IntPtrInput
	// ID of the partition table associated with this hostgroup.
	PtableId pulumi.IntPtrInput
	// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
	PuppetCaProxyId pulumi.IntPtrInput
	// IDs of the applied puppet classes.
	PuppetClassIds pulumi.IntArrayInput
	// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
	PuppetProxyId pulumi.IntPtrInput
	// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
	// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
	// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
	PxeLoader pulumi.StringPtrInput
	// ID of the realm associated with this hostgroup.
	RealmId pulumi.IntPtrInput
	// Default root password
	RootPassword pulumi.StringPtrInput
	// ID of the subnet associated with the hostgroup.
	SubnetId pulumi.IntPtrInput
}

func (HostgroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostgroupArgs)(nil)).Elem()
}

type HostgroupInput interface {
	pulumi.Input

	ToHostgroupOutput() HostgroupOutput
	ToHostgroupOutputWithContext(ctx context.Context) HostgroupOutput
}

func (*Hostgroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Hostgroup)(nil)).Elem()
}

func (i *Hostgroup) ToHostgroupOutput() HostgroupOutput {
	return i.ToHostgroupOutputWithContext(context.Background())
}

func (i *Hostgroup) ToHostgroupOutputWithContext(ctx context.Context) HostgroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostgroupOutput)
}

// HostgroupArrayInput is an input type that accepts HostgroupArray and HostgroupArrayOutput values.
// You can construct a concrete instance of `HostgroupArrayInput` via:
//
//	HostgroupArray{ HostgroupArgs{...} }
type HostgroupArrayInput interface {
	pulumi.Input

	ToHostgroupArrayOutput() HostgroupArrayOutput
	ToHostgroupArrayOutputWithContext(context.Context) HostgroupArrayOutput
}

type HostgroupArray []HostgroupInput

func (HostgroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hostgroup)(nil)).Elem()
}

func (i HostgroupArray) ToHostgroupArrayOutput() HostgroupArrayOutput {
	return i.ToHostgroupArrayOutputWithContext(context.Background())
}

func (i HostgroupArray) ToHostgroupArrayOutputWithContext(ctx context.Context) HostgroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostgroupArrayOutput)
}

// HostgroupMapInput is an input type that accepts HostgroupMap and HostgroupMapOutput values.
// You can construct a concrete instance of `HostgroupMapInput` via:
//
//	HostgroupMap{ "key": HostgroupArgs{...} }
type HostgroupMapInput interface {
	pulumi.Input

	ToHostgroupMapOutput() HostgroupMapOutput
	ToHostgroupMapOutputWithContext(context.Context) HostgroupMapOutput
}

type HostgroupMap map[string]HostgroupInput

func (HostgroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hostgroup)(nil)).Elem()
}

func (i HostgroupMap) ToHostgroupMapOutput() HostgroupMapOutput {
	return i.ToHostgroupMapOutputWithContext(context.Background())
}

func (i HostgroupMap) ToHostgroupMapOutputWithContext(ctx context.Context) HostgroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostgroupMapOutput)
}

type HostgroupOutput struct{ *pulumi.OutputState }

func (HostgroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Hostgroup)(nil)).Elem()
}

func (o HostgroupOutput) ToHostgroupOutput() HostgroupOutput {
	return o
}

func (o HostgroupOutput) ToHostgroupOutputWithContext(ctx context.Context) HostgroupOutput {
	return o
}

// @SUMMARY Hostgroups are organized in a tree-like structure and inherit values from their parent hostgroup(s). When hosts
// get associated with a hostgroup, it will inherit attributes from the hostgroup. This allows for easy, shared
// configuration of various hosts based on common attributes.
func (o HostgroupOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// ID of the architecture associated with this hostgroup.
func (o HostgroupOutput) ArchitectureId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.ArchitectureId }).(pulumi.IntOutput)
}

// ID of the compute profile associated with this hostgroup.
func (o HostgroupOutput) ComputeProfileId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.ComputeProfileId }).(pulumi.IntOutput)
}

// ID of the compute resource associated with this hostgroup.
func (o HostgroupOutput) ComputeResourceId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.ComputeResourceId }).(pulumi.IntOutput)
}

// IDs of the applied config groups.
func (o HostgroupOutput) ConfigGroupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntArrayOutput { return v.ConfigGroupIds }).(pulumi.IntArrayOutput)
}

// ID of the content source associated with this hostgroup.
func (o HostgroupOutput) ContentSourceId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.ContentSourceId }).(pulumi.IntOutput)
}

// ID of the content view associated with this hostgroup.
func (o HostgroupOutput) ContentViewId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.ContentViewId }).(pulumi.IntOutput)
}

// ID of the domain associated with this hostgroup.
func (o HostgroupOutput) DomainId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.DomainId }).(pulumi.IntOutput)
}

// ID of the environment associated with this hostgroup.
func (o HostgroupOutput) EnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.EnvironmentId }).(pulumi.IntOutput)
}

// ID of the lifecycle environment associated with this hostgroup.
func (o HostgroupOutput) LifecycleEnvironmentId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.LifecycleEnvironmentId }).(pulumi.IntOutput)
}

// ID of the media associated with this hostgroup.
func (o HostgroupOutput) MediumId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.MediumId }).(pulumi.IntOutput)
}

// Hostgroup name. @EXAMPLE "compute"
func (o HostgroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the operating system associated with this hostgroup.
func (o HostgroupOutput) OperatingsystemId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.OperatingsystemId }).(pulumi.IntOutput)
}

// A map of parameters that will be saved as hostgroup parameters in the group config.
func (o HostgroupOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

// ID of the parent hostgroup.
func (o HostgroupOutput) ParentId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntPtrOutput { return v.ParentId }).(pulumi.IntPtrOutput)
}

// ID of the partition table associated with this hostgroup.
func (o HostgroupOutput) PtableId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.PtableId }).(pulumi.IntOutput)
}

// ID of the smart proxy acting as the puppet certificate authority server for this hostgroup.
func (o HostgroupOutput) PuppetCaProxyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntPtrOutput { return v.PuppetCaProxyId }).(pulumi.IntPtrOutput)
}

// IDs of the applied puppet classes.
func (o HostgroupOutput) PuppetClassIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntArrayOutput { return v.PuppetClassIds }).(pulumi.IntArrayOutput)
}

// ID of the smart proxy acting as the puppet proxy server for this hostgroup.
func (o HostgroupOutput) PuppetProxyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntPtrOutput { return v.PuppetProxyId }).(pulumi.IntPtrOutput)
}

// Operating system family. Value examples: "None", "PXELinux BIOS", "PXELinux UEFI", "Grub UEFI", "Grub2 UEFI", "Grub2
// UEFI SecureBoot", "Grub2 UEFI HTTP", "Grub2 UEFI HTTPS", "Grub2 UEFI HTTPS SecureBoot", "iPXE Embedded", "iPXE UEFI
// HTTP", "iPXE Chain BIOS", "iPXE Chain UEFI"
func (o HostgroupOutput) PxeLoader() pulumi.StringOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.StringOutput { return v.PxeLoader }).(pulumi.StringOutput)
}

// ID of the realm associated with this hostgroup.
func (o HostgroupOutput) RealmId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.RealmId }).(pulumi.IntOutput)
}

// Default root password
func (o HostgroupOutput) RootPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.StringPtrOutput { return v.RootPassword }).(pulumi.StringPtrOutput)
}

// ID of the subnet associated with the hostgroup.
func (o HostgroupOutput) SubnetId() pulumi.IntOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.IntOutput { return v.SubnetId }).(pulumi.IntOutput)
}

// The title is the fullname of the hostgroup. A hostgroup's title is a path-like string from the head of the hostgroup
// tree down to this hostgroup. The title will be in the form of: "<parent 1>/<parent 2>/.../<name>".
func (o HostgroupOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Hostgroup) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type HostgroupArrayOutput struct{ *pulumi.OutputState }

func (HostgroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Hostgroup)(nil)).Elem()
}

func (o HostgroupArrayOutput) ToHostgroupArrayOutput() HostgroupArrayOutput {
	return o
}

func (o HostgroupArrayOutput) ToHostgroupArrayOutputWithContext(ctx context.Context) HostgroupArrayOutput {
	return o
}

func (o HostgroupArrayOutput) Index(i pulumi.IntInput) HostgroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Hostgroup {
		return vs[0].([]*Hostgroup)[vs[1].(int)]
	}).(HostgroupOutput)
}

type HostgroupMapOutput struct{ *pulumi.OutputState }

func (HostgroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Hostgroup)(nil)).Elem()
}

func (o HostgroupMapOutput) ToHostgroupMapOutput() HostgroupMapOutput {
	return o
}

func (o HostgroupMapOutput) ToHostgroupMapOutputWithContext(ctx context.Context) HostgroupMapOutput {
	return o
}

func (o HostgroupMapOutput) MapIndex(k pulumi.StringInput) HostgroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Hostgroup {
		return vs[0].(map[string]*Hostgroup)[vs[1].(string)]
	}).(HostgroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostgroupInput)(nil)).Elem(), &Hostgroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostgroupArrayInput)(nil)).Elem(), HostgroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostgroupMapInput)(nil)).Elem(), HostgroupMap{})
	pulumi.RegisterOutputType(HostgroupOutput{})
	pulumi.RegisterOutputType(HostgroupArrayOutput{})
	pulumi.RegisterOutputType(HostgroupMapOutput{})
}
