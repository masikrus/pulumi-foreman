// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type User struct {
	pulumi.CustomResourceState

	// @SUMMARY User can be used to allow access to foreman.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// If the user is allow admin privileges
	Admin pulumi.BoolPtrOutput `pulumi:"admin"`
	// Set the authentication source, i.e internal (1,default) or external (2)
	AuthSourceId pulumi.IntPtrOutput `pulumi:"authSourceId"`
	// Default location for the user, if empty takes global default
	DefaultLocationId pulumi.IntPtrOutput `pulumi:"defaultLocationId"`
	// Default organization for the user, if empty takes global default
	DefaultOrganizationId pulumi.IntPtrOutput `pulumi:"defaultOrganizationId"`
	// Description of user
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// First name of the user
	Firstname pulumi.StringPtrOutput `pulumi:"firstname"`
	// Last name of user
	Lastname pulumi.StringPtrOutput `pulumi:"lastname"`
	// Sets the timezone/location of a user
	Locale pulumi.StringPtrOutput `pulumi:"locale"`
	// List of all locations a user has access to
	LocationIds pulumi.IntArrayOutput `pulumi:"locationIds"`
	// Username used for logging-in
	Login pulumi.StringOutput `pulumi:"login"`
	// Email of user
	Mail pulumi.StringPtrOutput `pulumi:"mail"`
	// List of all organizations a user has access to
	OrganizationIds pulumi.IntArrayOutput `pulumi:"organizationIds"`
	// Password of user, required if authSourceId is 1 (internal)
	Password pulumi.StringPtrOutput `pulumi:"password"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("foreman:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("foreman:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// @SUMMARY User can be used to allow access to foreman.
	__meta_ *bool `pulumi:"__meta_"`
	// If the user is allow admin privileges
	Admin *bool `pulumi:"admin"`
	// Set the authentication source, i.e internal (1,default) or external (2)
	AuthSourceId *int `pulumi:"authSourceId"`
	// Default location for the user, if empty takes global default
	DefaultLocationId *int `pulumi:"defaultLocationId"`
	// Default organization for the user, if empty takes global default
	DefaultOrganizationId *int `pulumi:"defaultOrganizationId"`
	// Description of user
	Description *string `pulumi:"description"`
	// First name of the user
	Firstname *string `pulumi:"firstname"`
	// Last name of user
	Lastname *string `pulumi:"lastname"`
	// Sets the timezone/location of a user
	Locale *string `pulumi:"locale"`
	// List of all locations a user has access to
	LocationIds []int `pulumi:"locationIds"`
	// Username used for logging-in
	Login *string `pulumi:"login"`
	// Email of user
	Mail *string `pulumi:"mail"`
	// List of all organizations a user has access to
	OrganizationIds []int `pulumi:"organizationIds"`
	// Password of user, required if authSourceId is 1 (internal)
	Password *string `pulumi:"password"`
}

type UserState struct {
	// @SUMMARY User can be used to allow access to foreman.
	__meta_ pulumi.BoolPtrInput
	// If the user is allow admin privileges
	Admin pulumi.BoolPtrInput
	// Set the authentication source, i.e internal (1,default) or external (2)
	AuthSourceId pulumi.IntPtrInput
	// Default location for the user, if empty takes global default
	DefaultLocationId pulumi.IntPtrInput
	// Default organization for the user, if empty takes global default
	DefaultOrganizationId pulumi.IntPtrInput
	// Description of user
	Description pulumi.StringPtrInput
	// First name of the user
	Firstname pulumi.StringPtrInput
	// Last name of user
	Lastname pulumi.StringPtrInput
	// Sets the timezone/location of a user
	Locale pulumi.StringPtrInput
	// List of all locations a user has access to
	LocationIds pulumi.IntArrayInput
	// Username used for logging-in
	Login pulumi.StringPtrInput
	// Email of user
	Mail pulumi.StringPtrInput
	// List of all organizations a user has access to
	OrganizationIds pulumi.IntArrayInput
	// Password of user, required if authSourceId is 1 (internal)
	Password pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// If the user is allow admin privileges
	Admin *bool `pulumi:"admin"`
	// Set the authentication source, i.e internal (1,default) or external (2)
	AuthSourceId *int `pulumi:"authSourceId"`
	// Default location for the user, if empty takes global default
	DefaultLocationId *int `pulumi:"defaultLocationId"`
	// Default organization for the user, if empty takes global default
	DefaultOrganizationId *int `pulumi:"defaultOrganizationId"`
	// Description of user
	Description *string `pulumi:"description"`
	// First name of the user
	Firstname *string `pulumi:"firstname"`
	// Last name of user
	Lastname *string `pulumi:"lastname"`
	// Sets the timezone/location of a user
	Locale *string `pulumi:"locale"`
	// List of all locations a user has access to
	LocationIds []int `pulumi:"locationIds"`
	// Username used for logging-in
	Login string `pulumi:"login"`
	// Email of user
	Mail *string `pulumi:"mail"`
	// List of all organizations a user has access to
	OrganizationIds []int `pulumi:"organizationIds"`
	// Password of user, required if authSourceId is 1 (internal)
	Password *string `pulumi:"password"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// If the user is allow admin privileges
	Admin pulumi.BoolPtrInput
	// Set the authentication source, i.e internal (1,default) or external (2)
	AuthSourceId pulumi.IntPtrInput
	// Default location for the user, if empty takes global default
	DefaultLocationId pulumi.IntPtrInput
	// Default organization for the user, if empty takes global default
	DefaultOrganizationId pulumi.IntPtrInput
	// Description of user
	Description pulumi.StringPtrInput
	// First name of the user
	Firstname pulumi.StringPtrInput
	// Last name of user
	Lastname pulumi.StringPtrInput
	// Sets the timezone/location of a user
	Locale pulumi.StringPtrInput
	// List of all locations a user has access to
	LocationIds pulumi.IntArrayInput
	// Username used for logging-in
	Login pulumi.StringInput
	// Email of user
	Mail pulumi.StringPtrInput
	// List of all organizations a user has access to
	OrganizationIds pulumi.IntArrayInput
	// Password of user, required if authSourceId is 1 (internal)
	Password pulumi.StringPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// @SUMMARY User can be used to allow access to foreman.
func (o UserOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *User) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// If the user is allow admin privileges
func (o UserOutput) Admin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Admin }).(pulumi.BoolPtrOutput)
}

// Set the authentication source, i.e internal (1,default) or external (2)
func (o UserOutput) AuthSourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *User) pulumi.IntPtrOutput { return v.AuthSourceId }).(pulumi.IntPtrOutput)
}

// Default location for the user, if empty takes global default
func (o UserOutput) DefaultLocationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *User) pulumi.IntPtrOutput { return v.DefaultLocationId }).(pulumi.IntPtrOutput)
}

// Default organization for the user, if empty takes global default
func (o UserOutput) DefaultOrganizationId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *User) pulumi.IntPtrOutput { return v.DefaultOrganizationId }).(pulumi.IntPtrOutput)
}

// Description of user
func (o UserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// First name of the user
func (o UserOutput) Firstname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Firstname }).(pulumi.StringPtrOutput)
}

// Last name of user
func (o UserOutput) Lastname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Lastname }).(pulumi.StringPtrOutput)
}

// Sets the timezone/location of a user
func (o UserOutput) Locale() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Locale }).(pulumi.StringPtrOutput)
}

// List of all locations a user has access to
func (o UserOutput) LocationIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *User) pulumi.IntArrayOutput { return v.LocationIds }).(pulumi.IntArrayOutput)
}

// Username used for logging-in
func (o UserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// Email of user
func (o UserOutput) Mail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Mail }).(pulumi.StringPtrOutput)
}

// List of all organizations a user has access to
func (o UserOutput) OrganizationIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *User) pulumi.IntArrayOutput { return v.OrganizationIds }).(pulumi.IntArrayOutput)
}

// Password of user, required if authSourceId is 1 (internal)
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
