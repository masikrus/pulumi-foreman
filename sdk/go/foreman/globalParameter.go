// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GlobalParameter struct {
	pulumi.CustomResourceState

	// @SUMMARY Foreman representation of common_parameter. Global parameters are available for all resources
	__meta_ pulumi.BoolOutput   `pulumi:"__meta_"`
	Name    pulumi.StringOutput `pulumi:"name"`
	Value   pulumi.StringOutput `pulumi:"value"`
}

// NewGlobalParameter registers a new resource with the given unique name, arguments, and options.
func NewGlobalParameter(ctx *pulumi.Context,
	name string, args *GlobalParameterArgs, opts ...pulumi.ResourceOption) (*GlobalParameter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GlobalParameter
	err := ctx.RegisterResource("foreman:index/globalParameter:GlobalParameter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalParameter gets an existing GlobalParameter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalParameter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalParameterState, opts ...pulumi.ResourceOption) (*GlobalParameter, error) {
	var resource GlobalParameter
	err := ctx.ReadResource("foreman:index/globalParameter:GlobalParameter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalParameter resources.
type globalParameterState struct {
	// @SUMMARY Foreman representation of common_parameter. Global parameters are available for all resources
	__meta_ *bool   `pulumi:"__meta_"`
	Name    *string `pulumi:"name"`
	Value   *string `pulumi:"value"`
}

type GlobalParameterState struct {
	// @SUMMARY Foreman representation of common_parameter. Global parameters are available for all resources
	__meta_ pulumi.BoolPtrInput
	Name    pulumi.StringPtrInput
	Value   pulumi.StringPtrInput
}

func (GlobalParameterState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalParameterState)(nil)).Elem()
}

type globalParameterArgs struct {
	Name  *string `pulumi:"name"`
	Value string  `pulumi:"value"`
}

// The set of arguments for constructing a GlobalParameter resource.
type GlobalParameterArgs struct {
	Name  pulumi.StringPtrInput
	Value pulumi.StringInput
}

func (GlobalParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalParameterArgs)(nil)).Elem()
}

type GlobalParameterInput interface {
	pulumi.Input

	ToGlobalParameterOutput() GlobalParameterOutput
	ToGlobalParameterOutputWithContext(ctx context.Context) GlobalParameterOutput
}

func (*GlobalParameter) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalParameter)(nil)).Elem()
}

func (i *GlobalParameter) ToGlobalParameterOutput() GlobalParameterOutput {
	return i.ToGlobalParameterOutputWithContext(context.Background())
}

func (i *GlobalParameter) ToGlobalParameterOutputWithContext(ctx context.Context) GlobalParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterOutput)
}

// GlobalParameterArrayInput is an input type that accepts GlobalParameterArray and GlobalParameterArrayOutput values.
// You can construct a concrete instance of `GlobalParameterArrayInput` via:
//
//	GlobalParameterArray{ GlobalParameterArgs{...} }
type GlobalParameterArrayInput interface {
	pulumi.Input

	ToGlobalParameterArrayOutput() GlobalParameterArrayOutput
	ToGlobalParameterArrayOutputWithContext(context.Context) GlobalParameterArrayOutput
}

type GlobalParameterArray []GlobalParameterInput

func (GlobalParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalParameter)(nil)).Elem()
}

func (i GlobalParameterArray) ToGlobalParameterArrayOutput() GlobalParameterArrayOutput {
	return i.ToGlobalParameterArrayOutputWithContext(context.Background())
}

func (i GlobalParameterArray) ToGlobalParameterArrayOutputWithContext(ctx context.Context) GlobalParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterArrayOutput)
}

// GlobalParameterMapInput is an input type that accepts GlobalParameterMap and GlobalParameterMapOutput values.
// You can construct a concrete instance of `GlobalParameterMapInput` via:
//
//	GlobalParameterMap{ "key": GlobalParameterArgs{...} }
type GlobalParameterMapInput interface {
	pulumi.Input

	ToGlobalParameterMapOutput() GlobalParameterMapOutput
	ToGlobalParameterMapOutputWithContext(context.Context) GlobalParameterMapOutput
}

type GlobalParameterMap map[string]GlobalParameterInput

func (GlobalParameterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalParameter)(nil)).Elem()
}

func (i GlobalParameterMap) ToGlobalParameterMapOutput() GlobalParameterMapOutput {
	return i.ToGlobalParameterMapOutputWithContext(context.Background())
}

func (i GlobalParameterMap) ToGlobalParameterMapOutputWithContext(ctx context.Context) GlobalParameterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalParameterMapOutput)
}

type GlobalParameterOutput struct{ *pulumi.OutputState }

func (GlobalParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalParameter)(nil)).Elem()
}

func (o GlobalParameterOutput) ToGlobalParameterOutput() GlobalParameterOutput {
	return o
}

func (o GlobalParameterOutput) ToGlobalParameterOutputWithContext(ctx context.Context) GlobalParameterOutput {
	return o
}

// @SUMMARY Foreman representation of common_parameter. Global parameters are available for all resources
func (o GlobalParameterOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *GlobalParameter) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

func (o GlobalParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalParameter) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o GlobalParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalParameter) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type GlobalParameterArrayOutput struct{ *pulumi.OutputState }

func (GlobalParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalParameter)(nil)).Elem()
}

func (o GlobalParameterArrayOutput) ToGlobalParameterArrayOutput() GlobalParameterArrayOutput {
	return o
}

func (o GlobalParameterArrayOutput) ToGlobalParameterArrayOutputWithContext(ctx context.Context) GlobalParameterArrayOutput {
	return o
}

func (o GlobalParameterArrayOutput) Index(i pulumi.IntInput) GlobalParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlobalParameter {
		return vs[0].([]*GlobalParameter)[vs[1].(int)]
	}).(GlobalParameterOutput)
}

type GlobalParameterMapOutput struct{ *pulumi.OutputState }

func (GlobalParameterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalParameter)(nil)).Elem()
}

func (o GlobalParameterMapOutput) ToGlobalParameterMapOutput() GlobalParameterMapOutput {
	return o
}

func (o GlobalParameterMapOutput) ToGlobalParameterMapOutputWithContext(ctx context.Context) GlobalParameterMapOutput {
	return o
}

func (o GlobalParameterMapOutput) MapIndex(k pulumi.StringInput) GlobalParameterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlobalParameter {
		return vs[0].(map[string]*GlobalParameter)[vs[1].(string)]
	}).(GlobalParameterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalParameterInput)(nil)).Elem(), &GlobalParameter{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalParameterArrayInput)(nil)).Elem(), GlobalParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalParameterMapInput)(nil)).Elem(), GlobalParameterMap{})
	pulumi.RegisterOutputType(GlobalParameterOutput{})
	pulumi.RegisterOutputType(GlobalParameterArrayOutput{})
	pulumi.RegisterOutputType(GlobalParameterMapOutput{})
}
