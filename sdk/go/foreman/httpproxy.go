// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Httpproxy struct {
	pulumi.CustomResourceState

	// @SUMMARY Defining HTTP Proxies that exist on your network allows you to perform various actions through those proxies.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// The name of the http proxy. @EXAMPLE "proxy.company.com"
	Name pulumi.StringOutput `pulumi:"name"`
	// Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewHttpproxy registers a new resource with the given unique name, arguments, and options.
func NewHttpproxy(ctx *pulumi.Context,
	name string, args *HttpproxyArgs, opts ...pulumi.ResourceOption) (*Httpproxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Httpproxy
	err := ctx.RegisterResource("foreman:index/httpproxy:Httpproxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpproxy gets an existing Httpproxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpproxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpproxyState, opts ...pulumi.ResourceOption) (*Httpproxy, error) {
	var resource Httpproxy
	err := ctx.ReadResource("foreman:index/httpproxy:Httpproxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Httpproxy resources.
type httpproxyState struct {
	// @SUMMARY Defining HTTP Proxies that exist on your network allows you to perform various actions through those proxies.
	__meta_ *bool `pulumi:"__meta_"`
	// The name of the http proxy. @EXAMPLE "proxy.company.com"
	Name *string `pulumi:"name"`
	// Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
	Url *string `pulumi:"url"`
}

type HttpproxyState struct {
	// @SUMMARY Defining HTTP Proxies that exist on your network allows you to perform various actions through those proxies.
	__meta_ pulumi.BoolPtrInput
	// The name of the http proxy. @EXAMPLE "proxy.company.com"
	Name pulumi.StringPtrInput
	// Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
	Url pulumi.StringPtrInput
}

func (HttpproxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpproxyState)(nil)).Elem()
}

type httpproxyArgs struct {
	// The name of the http proxy. @EXAMPLE "proxy.company.com"
	Name *string `pulumi:"name"`
	// Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Httpproxy resource.
type HttpproxyArgs struct {
	// The name of the http proxy. @EXAMPLE "proxy.company.com"
	Name pulumi.StringPtrInput
	// Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
	Url pulumi.StringInput
}

func (HttpproxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpproxyArgs)(nil)).Elem()
}

type HttpproxyInput interface {
	pulumi.Input

	ToHttpproxyOutput() HttpproxyOutput
	ToHttpproxyOutputWithContext(ctx context.Context) HttpproxyOutput
}

func (*Httpproxy) ElementType() reflect.Type {
	return reflect.TypeOf((**Httpproxy)(nil)).Elem()
}

func (i *Httpproxy) ToHttpproxyOutput() HttpproxyOutput {
	return i.ToHttpproxyOutputWithContext(context.Background())
}

func (i *Httpproxy) ToHttpproxyOutputWithContext(ctx context.Context) HttpproxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpproxyOutput)
}

// HttpproxyArrayInput is an input type that accepts HttpproxyArray and HttpproxyArrayOutput values.
// You can construct a concrete instance of `HttpproxyArrayInput` via:
//
//	HttpproxyArray{ HttpproxyArgs{...} }
type HttpproxyArrayInput interface {
	pulumi.Input

	ToHttpproxyArrayOutput() HttpproxyArrayOutput
	ToHttpproxyArrayOutputWithContext(context.Context) HttpproxyArrayOutput
}

type HttpproxyArray []HttpproxyInput

func (HttpproxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Httpproxy)(nil)).Elem()
}

func (i HttpproxyArray) ToHttpproxyArrayOutput() HttpproxyArrayOutput {
	return i.ToHttpproxyArrayOutputWithContext(context.Background())
}

func (i HttpproxyArray) ToHttpproxyArrayOutputWithContext(ctx context.Context) HttpproxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpproxyArrayOutput)
}

// HttpproxyMapInput is an input type that accepts HttpproxyMap and HttpproxyMapOutput values.
// You can construct a concrete instance of `HttpproxyMapInput` via:
//
//	HttpproxyMap{ "key": HttpproxyArgs{...} }
type HttpproxyMapInput interface {
	pulumi.Input

	ToHttpproxyMapOutput() HttpproxyMapOutput
	ToHttpproxyMapOutputWithContext(context.Context) HttpproxyMapOutput
}

type HttpproxyMap map[string]HttpproxyInput

func (HttpproxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Httpproxy)(nil)).Elem()
}

func (i HttpproxyMap) ToHttpproxyMapOutput() HttpproxyMapOutput {
	return i.ToHttpproxyMapOutputWithContext(context.Background())
}

func (i HttpproxyMap) ToHttpproxyMapOutputWithContext(ctx context.Context) HttpproxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpproxyMapOutput)
}

type HttpproxyOutput struct{ *pulumi.OutputState }

func (HttpproxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Httpproxy)(nil)).Elem()
}

func (o HttpproxyOutput) ToHttpproxyOutput() HttpproxyOutput {
	return o
}

func (o HttpproxyOutput) ToHttpproxyOutputWithContext(ctx context.Context) HttpproxyOutput {
	return o
}

// @SUMMARY Defining HTTP Proxies that exist on your network allows you to perform various actions through those proxies.
func (o HttpproxyOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Httpproxy) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// The name of the http proxy. @EXAMPLE "proxy.company.com"
func (o HttpproxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Httpproxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Uniform resource locator of the proxy. @EXAMPLE "https://proxy.company.com:8443"
func (o HttpproxyOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Httpproxy) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type HttpproxyArrayOutput struct{ *pulumi.OutputState }

func (HttpproxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Httpproxy)(nil)).Elem()
}

func (o HttpproxyArrayOutput) ToHttpproxyArrayOutput() HttpproxyArrayOutput {
	return o
}

func (o HttpproxyArrayOutput) ToHttpproxyArrayOutputWithContext(ctx context.Context) HttpproxyArrayOutput {
	return o
}

func (o HttpproxyArrayOutput) Index(i pulumi.IntInput) HttpproxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Httpproxy {
		return vs[0].([]*Httpproxy)[vs[1].(int)]
	}).(HttpproxyOutput)
}

type HttpproxyMapOutput struct{ *pulumi.OutputState }

func (HttpproxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Httpproxy)(nil)).Elem()
}

func (o HttpproxyMapOutput) ToHttpproxyMapOutput() HttpproxyMapOutput {
	return o
}

func (o HttpproxyMapOutput) ToHttpproxyMapOutputWithContext(ctx context.Context) HttpproxyMapOutput {
	return o
}

func (o HttpproxyMapOutput) MapIndex(k pulumi.StringInput) HttpproxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Httpproxy {
		return vs[0].(map[string]*Httpproxy)[vs[1].(string)]
	}).(HttpproxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpproxyInput)(nil)).Elem(), &Httpproxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpproxyArrayInput)(nil)).Elem(), HttpproxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpproxyMapInput)(nil)).Elem(), HttpproxyMap{})
	pulumi.RegisterOutputType(HttpproxyOutput{})
	pulumi.RegisterOutputType(HttpproxyArrayOutput{})
	pulumi.RegisterOutputType(HttpproxyMapOutput{})
}
