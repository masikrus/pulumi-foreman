// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Subnet struct {
	pulumi.CustomResourceState

	// @SUMMARY Foreman representation of a subnetwork.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// BMC Proxy ID to use within this subnet
	BmcId pulumi.IntPtrOutput `pulumi:"bmcId"`
	// Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
	BootMode pulumi.StringPtrOutput `pulumi:"bootMode"`
	// Description of the subnet
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DHCP Proxy ID to use within this subnet
	DhcpId pulumi.IntPtrOutput `pulumi:"dhcpId"`
	// Primary DNS server for this subnet.
	DnsPrimary pulumi.StringPtrOutput `pulumi:"dnsPrimary"`
	// Secondary DNS sever for this subnet.
	DnsSecondary pulumi.StringPtrOutput `pulumi:"dnsSecondary"`
	// Domains in which this subnet is part
	DomainIds pulumi.IntArrayOutput `pulumi:"domainIds"`
	// Start IP address for IP auto suggestion.
	From pulumi.StringPtrOutput `pulumi:"from"`
	// Gateway server to use when connecting/communicating to anything not on the same network.
	Gateway pulumi.StringPtrOutput `pulumi:"gateway"`
	// HTTPBoot Proxy ID to use within this subnet
	HttpbootId pulumi.IntPtrOutput `pulumi:"httpbootId"`
	// IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
	Ipam pulumi.StringPtrOutput `pulumi:"ipam"`
	// Netmask for this subnet. @EXAMPLE "255.255.255.0"
	Mask pulumi.StringOutput `pulumi:"mask"`
	// MTU value for the subnet
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// Subnet name. @EXAMPLE "10.228.247.0 BO1"
	Name pulumi.StringOutput `pulumi:"name"`
	// Subnet network. @EXAMPLE "10.228.247.0"
	Network pulumi.StringOutput `pulumi:"network"`
	// The Subnets CIDR in the format 169.254.0.0/16
	NetworkAddress pulumi.StringPtrOutput `pulumi:"networkAddress"`
	// Type or protocol, IPv4 or IPv6, defaults to IPv4.
	NetworkType pulumi.StringPtrOutput `pulumi:"networkType"`
	// Template HTTP(S) Proxy ID to use within this subnet
	TemplateId pulumi.IntPtrOutput `pulumi:"templateId"`
	// TFTP Proxy ID to use within this subnet
	TftpId pulumi.IntPtrOutput `pulumi:"tftpId"`
	// Ending IP address for IP auto suggestion.
	To pulumi.StringPtrOutput `pulumi:"to"`
	// VLAN id that is in use in the subnet
	Vlanid pulumi.IntPtrOutput `pulumi:"vlanid"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Mask == nil {
		return nil, errors.New("invalid value for required argument 'Mask'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("foreman:index/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("foreman:index/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// @SUMMARY Foreman representation of a subnetwork.
	__meta_ *bool `pulumi:"__meta_"`
	// BMC Proxy ID to use within this subnet
	BmcId *int `pulumi:"bmcId"`
	// Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
	BootMode *string `pulumi:"bootMode"`
	// Description of the subnet
	Description *string `pulumi:"description"`
	// DHCP Proxy ID to use within this subnet
	DhcpId *int `pulumi:"dhcpId"`
	// Primary DNS server for this subnet.
	DnsPrimary *string `pulumi:"dnsPrimary"`
	// Secondary DNS sever for this subnet.
	DnsSecondary *string `pulumi:"dnsSecondary"`
	// Domains in which this subnet is part
	DomainIds []int `pulumi:"domainIds"`
	// Start IP address for IP auto suggestion.
	From *string `pulumi:"from"`
	// Gateway server to use when connecting/communicating to anything not on the same network.
	Gateway *string `pulumi:"gateway"`
	// HTTPBoot Proxy ID to use within this subnet
	HttpbootId *int `pulumi:"httpbootId"`
	// IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
	Ipam *string `pulumi:"ipam"`
	// Netmask for this subnet. @EXAMPLE "255.255.255.0"
	Mask *string `pulumi:"mask"`
	// MTU value for the subnet
	Mtu *int `pulumi:"mtu"`
	// Subnet name. @EXAMPLE "10.228.247.0 BO1"
	Name *string `pulumi:"name"`
	// Subnet network. @EXAMPLE "10.228.247.0"
	Network *string `pulumi:"network"`
	// The Subnets CIDR in the format 169.254.0.0/16
	NetworkAddress *string `pulumi:"networkAddress"`
	// Type or protocol, IPv4 or IPv6, defaults to IPv4.
	NetworkType *string `pulumi:"networkType"`
	// Template HTTP(S) Proxy ID to use within this subnet
	TemplateId *int `pulumi:"templateId"`
	// TFTP Proxy ID to use within this subnet
	TftpId *int `pulumi:"tftpId"`
	// Ending IP address for IP auto suggestion.
	To *string `pulumi:"to"`
	// VLAN id that is in use in the subnet
	Vlanid *int `pulumi:"vlanid"`
}

type SubnetState struct {
	// @SUMMARY Foreman representation of a subnetwork.
	__meta_ pulumi.BoolPtrInput
	// BMC Proxy ID to use within this subnet
	BmcId pulumi.IntPtrInput
	// Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
	BootMode pulumi.StringPtrInput
	// Description of the subnet
	Description pulumi.StringPtrInput
	// DHCP Proxy ID to use within this subnet
	DhcpId pulumi.IntPtrInput
	// Primary DNS server for this subnet.
	DnsPrimary pulumi.StringPtrInput
	// Secondary DNS sever for this subnet.
	DnsSecondary pulumi.StringPtrInput
	// Domains in which this subnet is part
	DomainIds pulumi.IntArrayInput
	// Start IP address for IP auto suggestion.
	From pulumi.StringPtrInput
	// Gateway server to use when connecting/communicating to anything not on the same network.
	Gateway pulumi.StringPtrInput
	// HTTPBoot Proxy ID to use within this subnet
	HttpbootId pulumi.IntPtrInput
	// IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
	Ipam pulumi.StringPtrInput
	// Netmask for this subnet. @EXAMPLE "255.255.255.0"
	Mask pulumi.StringPtrInput
	// MTU value for the subnet
	Mtu pulumi.IntPtrInput
	// Subnet name. @EXAMPLE "10.228.247.0 BO1"
	Name pulumi.StringPtrInput
	// Subnet network. @EXAMPLE "10.228.247.0"
	Network pulumi.StringPtrInput
	// The Subnets CIDR in the format 169.254.0.0/16
	NetworkAddress pulumi.StringPtrInput
	// Type or protocol, IPv4 or IPv6, defaults to IPv4.
	NetworkType pulumi.StringPtrInput
	// Template HTTP(S) Proxy ID to use within this subnet
	TemplateId pulumi.IntPtrInput
	// TFTP Proxy ID to use within this subnet
	TftpId pulumi.IntPtrInput
	// Ending IP address for IP auto suggestion.
	To pulumi.StringPtrInput
	// VLAN id that is in use in the subnet
	Vlanid pulumi.IntPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// BMC Proxy ID to use within this subnet
	BmcId *int `pulumi:"bmcId"`
	// Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
	BootMode *string `pulumi:"bootMode"`
	// Description of the subnet
	Description *string `pulumi:"description"`
	// DHCP Proxy ID to use within this subnet
	DhcpId *int `pulumi:"dhcpId"`
	// Primary DNS server for this subnet.
	DnsPrimary *string `pulumi:"dnsPrimary"`
	// Secondary DNS sever for this subnet.
	DnsSecondary *string `pulumi:"dnsSecondary"`
	// Domains in which this subnet is part
	DomainIds []int `pulumi:"domainIds"`
	// Start IP address for IP auto suggestion.
	From *string `pulumi:"from"`
	// Gateway server to use when connecting/communicating to anything not on the same network.
	Gateway *string `pulumi:"gateway"`
	// HTTPBoot Proxy ID to use within this subnet
	HttpbootId *int `pulumi:"httpbootId"`
	// IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
	Ipam *string `pulumi:"ipam"`
	// Netmask for this subnet. @EXAMPLE "255.255.255.0"
	Mask string `pulumi:"mask"`
	// MTU value for the subnet
	Mtu *int `pulumi:"mtu"`
	// Subnet name. @EXAMPLE "10.228.247.0 BO1"
	Name *string `pulumi:"name"`
	// Subnet network. @EXAMPLE "10.228.247.0"
	Network string `pulumi:"network"`
	// The Subnets CIDR in the format 169.254.0.0/16
	NetworkAddress *string `pulumi:"networkAddress"`
	// Type or protocol, IPv4 or IPv6, defaults to IPv4.
	NetworkType *string `pulumi:"networkType"`
	// Template HTTP(S) Proxy ID to use within this subnet
	TemplateId *int `pulumi:"templateId"`
	// TFTP Proxy ID to use within this subnet
	TftpId *int `pulumi:"tftpId"`
	// Ending IP address for IP auto suggestion.
	To *string `pulumi:"to"`
	// VLAN id that is in use in the subnet
	Vlanid *int `pulumi:"vlanid"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// BMC Proxy ID to use within this subnet
	BmcId pulumi.IntPtrInput
	// Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
	BootMode pulumi.StringPtrInput
	// Description of the subnet
	Description pulumi.StringPtrInput
	// DHCP Proxy ID to use within this subnet
	DhcpId pulumi.IntPtrInput
	// Primary DNS server for this subnet.
	DnsPrimary pulumi.StringPtrInput
	// Secondary DNS sever for this subnet.
	DnsSecondary pulumi.StringPtrInput
	// Domains in which this subnet is part
	DomainIds pulumi.IntArrayInput
	// Start IP address for IP auto suggestion.
	From pulumi.StringPtrInput
	// Gateway server to use when connecting/communicating to anything not on the same network.
	Gateway pulumi.StringPtrInput
	// HTTPBoot Proxy ID to use within this subnet
	HttpbootId pulumi.IntPtrInput
	// IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
	Ipam pulumi.StringPtrInput
	// Netmask for this subnet. @EXAMPLE "255.255.255.0"
	Mask pulumi.StringInput
	// MTU value for the subnet
	Mtu pulumi.IntPtrInput
	// Subnet name. @EXAMPLE "10.228.247.0 BO1"
	Name pulumi.StringPtrInput
	// Subnet network. @EXAMPLE "10.228.247.0"
	Network pulumi.StringInput
	// The Subnets CIDR in the format 169.254.0.0/16
	NetworkAddress pulumi.StringPtrInput
	// Type or protocol, IPv4 or IPv6, defaults to IPv4.
	NetworkType pulumi.StringPtrInput
	// Template HTTP(S) Proxy ID to use within this subnet
	TemplateId pulumi.IntPtrInput
	// TFTP Proxy ID to use within this subnet
	TftpId pulumi.IntPtrInput
	// Ending IP address for IP auto suggestion.
	To pulumi.StringPtrInput
	// VLAN id that is in use in the subnet
	Vlanid pulumi.IntPtrInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// @SUMMARY Foreman representation of a subnetwork.
func (o SubnetOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// BMC Proxy ID to use within this subnet
func (o SubnetOutput) BmcId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.BmcId }).(pulumi.IntPtrOutput)
}

// Default boot mode for instances assigned to this subnet. Values include: `"Static"`, `"DHCP"`.
func (o SubnetOutput) BootMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.BootMode }).(pulumi.StringPtrOutput)
}

// Description of the subnet
func (o SubnetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// DHCP Proxy ID to use within this subnet
func (o SubnetOutput) DhcpId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.DhcpId }).(pulumi.IntPtrOutput)
}

// Primary DNS server for this subnet.
func (o SubnetOutput) DnsPrimary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.DnsPrimary }).(pulumi.StringPtrOutput)
}

// Secondary DNS sever for this subnet.
func (o SubnetOutput) DnsSecondary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.DnsSecondary }).(pulumi.StringPtrOutput)
}

// Domains in which this subnet is part
func (o SubnetOutput) DomainIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntArrayOutput { return v.DomainIds }).(pulumi.IntArrayOutput)
}

// Start IP address for IP auto suggestion.
func (o SubnetOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.From }).(pulumi.StringPtrOutput)
}

// Gateway server to use when connecting/communicating to anything not on the same network.
func (o SubnetOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Gateway }).(pulumi.StringPtrOutput)
}

// HTTPBoot Proxy ID to use within this subnet
func (o SubnetOutput) HttpbootId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.HttpbootId }).(pulumi.IntPtrOutput)
}

// IP address auto-suggestion for this subnet. Valid values include: `"DHCP"`, `"Internal DB"`, `"Random DB"`,`"None"`.
func (o SubnetOutput) Ipam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Ipam }).(pulumi.StringPtrOutput)
}

// Netmask for this subnet. @EXAMPLE "255.255.255.0"
func (o SubnetOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Mask }).(pulumi.StringOutput)
}

// MTU value for the subnet
func (o SubnetOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Subnet name. @EXAMPLE "10.228.247.0 BO1"
func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Subnet network. @EXAMPLE "10.228.247.0"
func (o SubnetOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Network }).(pulumi.StringOutput)
}

// The Subnets CIDR in the format 169.254.0.0/16
func (o SubnetOutput) NetworkAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.NetworkAddress }).(pulumi.StringPtrOutput)
}

// Type or protocol, IPv4 or IPv6, defaults to IPv4.
func (o SubnetOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// Template HTTP(S) Proxy ID to use within this subnet
func (o SubnetOutput) TemplateId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.TemplateId }).(pulumi.IntPtrOutput)
}

// TFTP Proxy ID to use within this subnet
func (o SubnetOutput) TftpId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.TftpId }).(pulumi.IntPtrOutput)
}

// Ending IP address for IP auto suggestion.
func (o SubnetOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.To }).(pulumi.StringPtrOutput)
}

// VLAN id that is in use in the subnet
func (o SubnetOutput) Vlanid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntPtrOutput { return v.Vlanid }).(pulumi.IntPtrOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
