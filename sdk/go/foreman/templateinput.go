// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Templateinput struct {
	pulumi.CustomResourceState

	// @SUMMARY Foreman representation of a template input.
	__meta_     pulumi.BoolOutput      `pulumi:"__meta_"`
	Advanced    pulumi.BoolPtrOutput   `pulumi:"advanced"`
	Default     pulumi.StringOutput    `pulumi:"default"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	FactName    pulumi.StringPtrOutput `pulumi:"factName"`
	HiddenValue pulumi.BoolPtrOutput   `pulumi:"hiddenValue"`
	InputType   pulumi.StringPtrOutput `pulumi:"inputType"`
	// The name of the template input
	Name                pulumi.StringOutput    `pulumi:"name"`
	PuppetClassName     pulumi.StringPtrOutput `pulumi:"puppetClassName"`
	PuppetParameterName pulumi.StringPtrOutput `pulumi:"puppetParameterName"`
	Required            pulumi.BoolPtrOutput   `pulumi:"required"`
	ResourceType        pulumi.StringPtrOutput `pulumi:"resourceType"`
	TemplateId          pulumi.IntOutput       `pulumi:"templateId"`
	ValueType           pulumi.StringPtrOutput `pulumi:"valueType"`
	VariableName        pulumi.StringPtrOutput `pulumi:"variableName"`
}

// NewTemplateinput registers a new resource with the given unique name, arguments, and options.
func NewTemplateinput(ctx *pulumi.Context,
	name string, args *TemplateinputArgs, opts ...pulumi.ResourceOption) (*Templateinput, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Default == nil {
		return nil, errors.New("invalid value for required argument 'Default'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Templateinput
	err := ctx.RegisterResource("foreman:index/templateinput:Templateinput", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTemplateinput gets an existing Templateinput resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTemplateinput(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TemplateinputState, opts ...pulumi.ResourceOption) (*Templateinput, error) {
	var resource Templateinput
	err := ctx.ReadResource("foreman:index/templateinput:Templateinput", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Templateinput resources.
type templateinputState struct {
	// @SUMMARY Foreman representation of a template input.
	__meta_     *bool   `pulumi:"__meta_"`
	Advanced    *bool   `pulumi:"advanced"`
	Default     *string `pulumi:"default"`
	Description *string `pulumi:"description"`
	FactName    *string `pulumi:"factName"`
	HiddenValue *bool   `pulumi:"hiddenValue"`
	InputType   *string `pulumi:"inputType"`
	// The name of the template input
	Name                *string `pulumi:"name"`
	PuppetClassName     *string `pulumi:"puppetClassName"`
	PuppetParameterName *string `pulumi:"puppetParameterName"`
	Required            *bool   `pulumi:"required"`
	ResourceType        *string `pulumi:"resourceType"`
	TemplateId          *int    `pulumi:"templateId"`
	ValueType           *string `pulumi:"valueType"`
	VariableName        *string `pulumi:"variableName"`
}

type TemplateinputState struct {
	// @SUMMARY Foreman representation of a template input.
	__meta_     pulumi.BoolPtrInput
	Advanced    pulumi.BoolPtrInput
	Default     pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	FactName    pulumi.StringPtrInput
	HiddenValue pulumi.BoolPtrInput
	InputType   pulumi.StringPtrInput
	// The name of the template input
	Name                pulumi.StringPtrInput
	PuppetClassName     pulumi.StringPtrInput
	PuppetParameterName pulumi.StringPtrInput
	Required            pulumi.BoolPtrInput
	ResourceType        pulumi.StringPtrInput
	TemplateId          pulumi.IntPtrInput
	ValueType           pulumi.StringPtrInput
	VariableName        pulumi.StringPtrInput
}

func (TemplateinputState) ElementType() reflect.Type {
	return reflect.TypeOf((*templateinputState)(nil)).Elem()
}

type templateinputArgs struct {
	Advanced    *bool   `pulumi:"advanced"`
	Default     string  `pulumi:"default"`
	Description *string `pulumi:"description"`
	FactName    *string `pulumi:"factName"`
	HiddenValue *bool   `pulumi:"hiddenValue"`
	InputType   *string `pulumi:"inputType"`
	// The name of the template input
	Name                *string `pulumi:"name"`
	PuppetClassName     *string `pulumi:"puppetClassName"`
	PuppetParameterName *string `pulumi:"puppetParameterName"`
	Required            *bool   `pulumi:"required"`
	ResourceType        *string `pulumi:"resourceType"`
	ValueType           *string `pulumi:"valueType"`
	VariableName        *string `pulumi:"variableName"`
}

// The set of arguments for constructing a Templateinput resource.
type TemplateinputArgs struct {
	Advanced    pulumi.BoolPtrInput
	Default     pulumi.StringInput
	Description pulumi.StringPtrInput
	FactName    pulumi.StringPtrInput
	HiddenValue pulumi.BoolPtrInput
	InputType   pulumi.StringPtrInput
	// The name of the template input
	Name                pulumi.StringPtrInput
	PuppetClassName     pulumi.StringPtrInput
	PuppetParameterName pulumi.StringPtrInput
	Required            pulumi.BoolPtrInput
	ResourceType        pulumi.StringPtrInput
	ValueType           pulumi.StringPtrInput
	VariableName        pulumi.StringPtrInput
}

func (TemplateinputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*templateinputArgs)(nil)).Elem()
}

type TemplateinputInput interface {
	pulumi.Input

	ToTemplateinputOutput() TemplateinputOutput
	ToTemplateinputOutputWithContext(ctx context.Context) TemplateinputOutput
}

func (*Templateinput) ElementType() reflect.Type {
	return reflect.TypeOf((**Templateinput)(nil)).Elem()
}

func (i *Templateinput) ToTemplateinputOutput() TemplateinputOutput {
	return i.ToTemplateinputOutputWithContext(context.Background())
}

func (i *Templateinput) ToTemplateinputOutputWithContext(ctx context.Context) TemplateinputOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateinputOutput)
}

// TemplateinputArrayInput is an input type that accepts TemplateinputArray and TemplateinputArrayOutput values.
// You can construct a concrete instance of `TemplateinputArrayInput` via:
//
//	TemplateinputArray{ TemplateinputArgs{...} }
type TemplateinputArrayInput interface {
	pulumi.Input

	ToTemplateinputArrayOutput() TemplateinputArrayOutput
	ToTemplateinputArrayOutputWithContext(context.Context) TemplateinputArrayOutput
}

type TemplateinputArray []TemplateinputInput

func (TemplateinputArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Templateinput)(nil)).Elem()
}

func (i TemplateinputArray) ToTemplateinputArrayOutput() TemplateinputArrayOutput {
	return i.ToTemplateinputArrayOutputWithContext(context.Background())
}

func (i TemplateinputArray) ToTemplateinputArrayOutputWithContext(ctx context.Context) TemplateinputArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateinputArrayOutput)
}

// TemplateinputMapInput is an input type that accepts TemplateinputMap and TemplateinputMapOutput values.
// You can construct a concrete instance of `TemplateinputMapInput` via:
//
//	TemplateinputMap{ "key": TemplateinputArgs{...} }
type TemplateinputMapInput interface {
	pulumi.Input

	ToTemplateinputMapOutput() TemplateinputMapOutput
	ToTemplateinputMapOutputWithContext(context.Context) TemplateinputMapOutput
}

type TemplateinputMap map[string]TemplateinputInput

func (TemplateinputMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Templateinput)(nil)).Elem()
}

func (i TemplateinputMap) ToTemplateinputMapOutput() TemplateinputMapOutput {
	return i.ToTemplateinputMapOutputWithContext(context.Background())
}

func (i TemplateinputMap) ToTemplateinputMapOutputWithContext(ctx context.Context) TemplateinputMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateinputMapOutput)
}

type TemplateinputOutput struct{ *pulumi.OutputState }

func (TemplateinputOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Templateinput)(nil)).Elem()
}

func (o TemplateinputOutput) ToTemplateinputOutput() TemplateinputOutput {
	return o
}

func (o TemplateinputOutput) ToTemplateinputOutputWithContext(ctx context.Context) TemplateinputOutput {
	return o
}

// @SUMMARY Foreman representation of a template input.
func (o TemplateinputOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

func (o TemplateinputOutput) Advanced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.BoolPtrOutput { return v.Advanced }).(pulumi.BoolPtrOutput)
}

func (o TemplateinputOutput) Default() pulumi.StringOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringOutput { return v.Default }).(pulumi.StringOutput)
}

func (o TemplateinputOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o TemplateinputOutput) FactName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringPtrOutput { return v.FactName }).(pulumi.StringPtrOutput)
}

func (o TemplateinputOutput) HiddenValue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.BoolPtrOutput { return v.HiddenValue }).(pulumi.BoolPtrOutput)
}

func (o TemplateinputOutput) InputType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringPtrOutput { return v.InputType }).(pulumi.StringPtrOutput)
}

// The name of the template input
func (o TemplateinputOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TemplateinputOutput) PuppetClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringPtrOutput { return v.PuppetClassName }).(pulumi.StringPtrOutput)
}

func (o TemplateinputOutput) PuppetParameterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringPtrOutput { return v.PuppetParameterName }).(pulumi.StringPtrOutput)
}

func (o TemplateinputOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.BoolPtrOutput { return v.Required }).(pulumi.BoolPtrOutput)
}

func (o TemplateinputOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringPtrOutput { return v.ResourceType }).(pulumi.StringPtrOutput)
}

func (o TemplateinputOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

func (o TemplateinputOutput) ValueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringPtrOutput { return v.ValueType }).(pulumi.StringPtrOutput)
}

func (o TemplateinputOutput) VariableName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Templateinput) pulumi.StringPtrOutput { return v.VariableName }).(pulumi.StringPtrOutput)
}

type TemplateinputArrayOutput struct{ *pulumi.OutputState }

func (TemplateinputArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Templateinput)(nil)).Elem()
}

func (o TemplateinputArrayOutput) ToTemplateinputArrayOutput() TemplateinputArrayOutput {
	return o
}

func (o TemplateinputArrayOutput) ToTemplateinputArrayOutputWithContext(ctx context.Context) TemplateinputArrayOutput {
	return o
}

func (o TemplateinputArrayOutput) Index(i pulumi.IntInput) TemplateinputOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Templateinput {
		return vs[0].([]*Templateinput)[vs[1].(int)]
	}).(TemplateinputOutput)
}

type TemplateinputMapOutput struct{ *pulumi.OutputState }

func (TemplateinputMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Templateinput)(nil)).Elem()
}

func (o TemplateinputMapOutput) ToTemplateinputMapOutput() TemplateinputMapOutput {
	return o
}

func (o TemplateinputMapOutput) ToTemplateinputMapOutputWithContext(ctx context.Context) TemplateinputMapOutput {
	return o
}

func (o TemplateinputMapOutput) MapIndex(k pulumi.StringInput) TemplateinputOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Templateinput {
		return vs[0].(map[string]*Templateinput)[vs[1].(string)]
	}).(TemplateinputOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateinputInput)(nil)).Elem(), &Templateinput{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateinputArrayInput)(nil)).Elem(), TemplateinputArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateinputMapInput)(nil)).Elem(), TemplateinputMap{})
	pulumi.RegisterOutputType(TemplateinputOutput{})
	pulumi.RegisterOutputType(TemplateinputArrayOutput{})
	pulumi.RegisterOutputType(TemplateinputMapOutput{})
}
