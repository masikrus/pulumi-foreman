// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KatelloProduct struct {
	pulumi.CustomResourceState

	// @SUMMARY Poducts are mostly operating systems to which repositories are assigned.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Product description.@EXAMPLE "A product description"
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId pulumi.IntPtrOutput `pulumi:"gpgKeyId"`
	// Label for the product. Cannot be changed after creation. By default set to the name, with underscores as spaces
	// replacement. @EXAMPLE
	Label pulumi.StringOutput `pulumi:"label"`
	// Product name.@EXAMPLE "Debian 10"
	Name pulumi.StringOutput `pulumi:"name"`
	// Idenifier of the SSL CA Cert.@EXAMPLE
	SslCaCertId pulumi.IntPtrOutput `pulumi:"sslCaCertId"`
	// Identifier of the SSL Client Cert.@EXAMPLE
	SslClientCertId pulumi.IntPtrOutput `pulumi:"sslClientCertId"`
	// Identifier of the SSL Client Key.@EXAMPLE
	SslClientKeyId pulumi.IntPtrOutput `pulumi:"sslClientKeyId"`
	// Plan numeric identifier.@EXAMPLE
	SyncPlanId pulumi.IntPtrOutput `pulumi:"syncPlanId"`
}

// NewKatelloProduct registers a new resource with the given unique name, arguments, and options.
func NewKatelloProduct(ctx *pulumi.Context,
	name string, args *KatelloProductArgs, opts ...pulumi.ResourceOption) (*KatelloProduct, error) {
	if args == nil {
		args = &KatelloProductArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KatelloProduct
	err := ctx.RegisterResource("foreman:index/katelloProduct:KatelloProduct", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKatelloProduct gets an existing KatelloProduct resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKatelloProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KatelloProductState, opts ...pulumi.ResourceOption) (*KatelloProduct, error) {
	var resource KatelloProduct
	err := ctx.ReadResource("foreman:index/katelloProduct:KatelloProduct", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KatelloProduct resources.
type katelloProductState struct {
	// @SUMMARY Poducts are mostly operating systems to which repositories are assigned.
	__meta_ *bool `pulumi:"__meta_"`
	// Product description.@EXAMPLE "A product description"
	Description *string `pulumi:"description"`
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId *int `pulumi:"gpgKeyId"`
	// Label for the product. Cannot be changed after creation. By default set to the name, with underscores as spaces
	// replacement. @EXAMPLE
	Label *string `pulumi:"label"`
	// Product name.@EXAMPLE "Debian 10"
	Name *string `pulumi:"name"`
	// Idenifier of the SSL CA Cert.@EXAMPLE
	SslCaCertId *int `pulumi:"sslCaCertId"`
	// Identifier of the SSL Client Cert.@EXAMPLE
	SslClientCertId *int `pulumi:"sslClientCertId"`
	// Identifier of the SSL Client Key.@EXAMPLE
	SslClientKeyId *int `pulumi:"sslClientKeyId"`
	// Plan numeric identifier.@EXAMPLE
	SyncPlanId *int `pulumi:"syncPlanId"`
}

type KatelloProductState struct {
	// @SUMMARY Poducts are mostly operating systems to which repositories are assigned.
	__meta_ pulumi.BoolPtrInput
	// Product description.@EXAMPLE "A product description"
	Description pulumi.StringPtrInput
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId pulumi.IntPtrInput
	// Label for the product. Cannot be changed after creation. By default set to the name, with underscores as spaces
	// replacement. @EXAMPLE
	Label pulumi.StringPtrInput
	// Product name.@EXAMPLE "Debian 10"
	Name pulumi.StringPtrInput
	// Idenifier of the SSL CA Cert.@EXAMPLE
	SslCaCertId pulumi.IntPtrInput
	// Identifier of the SSL Client Cert.@EXAMPLE
	SslClientCertId pulumi.IntPtrInput
	// Identifier of the SSL Client Key.@EXAMPLE
	SslClientKeyId pulumi.IntPtrInput
	// Plan numeric identifier.@EXAMPLE
	SyncPlanId pulumi.IntPtrInput
}

func (KatelloProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloProductState)(nil)).Elem()
}

type katelloProductArgs struct {
	// Product description.@EXAMPLE "A product description"
	Description *string `pulumi:"description"`
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId *int `pulumi:"gpgKeyId"`
	// Label for the product. Cannot be changed after creation. By default set to the name, with underscores as spaces
	// replacement. @EXAMPLE
	Label *string `pulumi:"label"`
	// Product name.@EXAMPLE "Debian 10"
	Name *string `pulumi:"name"`
	// Idenifier of the SSL CA Cert.@EXAMPLE
	SslCaCertId *int `pulumi:"sslCaCertId"`
	// Identifier of the SSL Client Cert.@EXAMPLE
	SslClientCertId *int `pulumi:"sslClientCertId"`
	// Identifier of the SSL Client Key.@EXAMPLE
	SslClientKeyId *int `pulumi:"sslClientKeyId"`
	// Plan numeric identifier.@EXAMPLE
	SyncPlanId *int `pulumi:"syncPlanId"`
}

// The set of arguments for constructing a KatelloProduct resource.
type KatelloProductArgs struct {
	// Product description.@EXAMPLE "A product description"
	Description pulumi.StringPtrInput
	// Identifier of the GPG key.@EXAMPLE
	GpgKeyId pulumi.IntPtrInput
	// Label for the product. Cannot be changed after creation. By default set to the name, with underscores as spaces
	// replacement. @EXAMPLE
	Label pulumi.StringPtrInput
	// Product name.@EXAMPLE "Debian 10"
	Name pulumi.StringPtrInput
	// Idenifier of the SSL CA Cert.@EXAMPLE
	SslCaCertId pulumi.IntPtrInput
	// Identifier of the SSL Client Cert.@EXAMPLE
	SslClientCertId pulumi.IntPtrInput
	// Identifier of the SSL Client Key.@EXAMPLE
	SslClientKeyId pulumi.IntPtrInput
	// Plan numeric identifier.@EXAMPLE
	SyncPlanId pulumi.IntPtrInput
}

func (KatelloProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloProductArgs)(nil)).Elem()
}

type KatelloProductInput interface {
	pulumi.Input

	ToKatelloProductOutput() KatelloProductOutput
	ToKatelloProductOutputWithContext(ctx context.Context) KatelloProductOutput
}

func (*KatelloProduct) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloProduct)(nil)).Elem()
}

func (i *KatelloProduct) ToKatelloProductOutput() KatelloProductOutput {
	return i.ToKatelloProductOutputWithContext(context.Background())
}

func (i *KatelloProduct) ToKatelloProductOutputWithContext(ctx context.Context) KatelloProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloProductOutput)
}

// KatelloProductArrayInput is an input type that accepts KatelloProductArray and KatelloProductArrayOutput values.
// You can construct a concrete instance of `KatelloProductArrayInput` via:
//
//	KatelloProductArray{ KatelloProductArgs{...} }
type KatelloProductArrayInput interface {
	pulumi.Input

	ToKatelloProductArrayOutput() KatelloProductArrayOutput
	ToKatelloProductArrayOutputWithContext(context.Context) KatelloProductArrayOutput
}

type KatelloProductArray []KatelloProductInput

func (KatelloProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloProduct)(nil)).Elem()
}

func (i KatelloProductArray) ToKatelloProductArrayOutput() KatelloProductArrayOutput {
	return i.ToKatelloProductArrayOutputWithContext(context.Background())
}

func (i KatelloProductArray) ToKatelloProductArrayOutputWithContext(ctx context.Context) KatelloProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloProductArrayOutput)
}

// KatelloProductMapInput is an input type that accepts KatelloProductMap and KatelloProductMapOutput values.
// You can construct a concrete instance of `KatelloProductMapInput` via:
//
//	KatelloProductMap{ "key": KatelloProductArgs{...} }
type KatelloProductMapInput interface {
	pulumi.Input

	ToKatelloProductMapOutput() KatelloProductMapOutput
	ToKatelloProductMapOutputWithContext(context.Context) KatelloProductMapOutput
}

type KatelloProductMap map[string]KatelloProductInput

func (KatelloProductMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloProduct)(nil)).Elem()
}

func (i KatelloProductMap) ToKatelloProductMapOutput() KatelloProductMapOutput {
	return i.ToKatelloProductMapOutputWithContext(context.Background())
}

func (i KatelloProductMap) ToKatelloProductMapOutputWithContext(ctx context.Context) KatelloProductMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloProductMapOutput)
}

type KatelloProductOutput struct{ *pulumi.OutputState }

func (KatelloProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloProduct)(nil)).Elem()
}

func (o KatelloProductOutput) ToKatelloProductOutput() KatelloProductOutput {
	return o
}

func (o KatelloProductOutput) ToKatelloProductOutputWithContext(ctx context.Context) KatelloProductOutput {
	return o
}

// @SUMMARY Poducts are mostly operating systems to which repositories are assigned.
func (o KatelloProductOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Product description.@EXAMPLE "A product description"
func (o KatelloProductOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Identifier of the GPG key.@EXAMPLE
func (o KatelloProductOutput) GpgKeyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.IntPtrOutput { return v.GpgKeyId }).(pulumi.IntPtrOutput)
}

// Label for the product. Cannot be changed after creation. By default set to the name, with underscores as spaces
// replacement. @EXAMPLE
func (o KatelloProductOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.StringOutput { return v.Label }).(pulumi.StringOutput)
}

// Product name.@EXAMPLE "Debian 10"
func (o KatelloProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Idenifier of the SSL CA Cert.@EXAMPLE
func (o KatelloProductOutput) SslCaCertId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.IntPtrOutput { return v.SslCaCertId }).(pulumi.IntPtrOutput)
}

// Identifier of the SSL Client Cert.@EXAMPLE
func (o KatelloProductOutput) SslClientCertId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.IntPtrOutput { return v.SslClientCertId }).(pulumi.IntPtrOutput)
}

// Identifier of the SSL Client Key.@EXAMPLE
func (o KatelloProductOutput) SslClientKeyId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.IntPtrOutput { return v.SslClientKeyId }).(pulumi.IntPtrOutput)
}

// Plan numeric identifier.@EXAMPLE
func (o KatelloProductOutput) SyncPlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KatelloProduct) pulumi.IntPtrOutput { return v.SyncPlanId }).(pulumi.IntPtrOutput)
}

type KatelloProductArrayOutput struct{ *pulumi.OutputState }

func (KatelloProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloProduct)(nil)).Elem()
}

func (o KatelloProductArrayOutput) ToKatelloProductArrayOutput() KatelloProductArrayOutput {
	return o
}

func (o KatelloProductArrayOutput) ToKatelloProductArrayOutputWithContext(ctx context.Context) KatelloProductArrayOutput {
	return o
}

func (o KatelloProductArrayOutput) Index(i pulumi.IntInput) KatelloProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KatelloProduct {
		return vs[0].([]*KatelloProduct)[vs[1].(int)]
	}).(KatelloProductOutput)
}

type KatelloProductMapOutput struct{ *pulumi.OutputState }

func (KatelloProductMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloProduct)(nil)).Elem()
}

func (o KatelloProductMapOutput) ToKatelloProductMapOutput() KatelloProductMapOutput {
	return o
}

func (o KatelloProductMapOutput) ToKatelloProductMapOutputWithContext(ctx context.Context) KatelloProductMapOutput {
	return o
}

func (o KatelloProductMapOutput) MapIndex(k pulumi.StringInput) KatelloProductOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KatelloProduct {
		return vs[0].(map[string]*KatelloProduct)[vs[1].(string)]
	}).(KatelloProductOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloProductInput)(nil)).Elem(), &KatelloProduct{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloProductArrayInput)(nil)).Elem(), KatelloProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloProductMapInput)(nil)).Elem(), KatelloProductMap{})
	pulumi.RegisterOutputType(KatelloProductOutput{})
	pulumi.RegisterOutputType(KatelloProductArrayOutput{})
	pulumi.RegisterOutputType(KatelloProductMapOutput{})
}
