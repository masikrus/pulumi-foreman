// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Smartproxy struct {
	pulumi.CustomResourceState

	// @SUMMARY Smart proxies provide an API for a higher-level orchestration tool. Foreman supports the following smart
	// proxies: DHCP (ISC DHCP & MS DHCP servers), DNS (bind & MS DNS servers), Puppet >= 0.24.x, Puppet CA, Realm (FreeIPA),
	// Templates, TFTP.
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// The name of the smart proxy. @EXAMPLE "dns.dc1.company.com"
	Name pulumi.StringOutput `pulumi:"name"`
	// Uniform resource locator of the proxy. @EXAMPLE "https://dns.dc1.company.com:8443"
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewSmartproxy registers a new resource with the given unique name, arguments, and options.
func NewSmartproxy(ctx *pulumi.Context,
	name string, args *SmartproxyArgs, opts ...pulumi.ResourceOption) (*Smartproxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Smartproxy
	err := ctx.RegisterResource("foreman:index/smartproxy:Smartproxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmartproxy gets an existing Smartproxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmartproxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmartproxyState, opts ...pulumi.ResourceOption) (*Smartproxy, error) {
	var resource Smartproxy
	err := ctx.ReadResource("foreman:index/smartproxy:Smartproxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Smartproxy resources.
type smartproxyState struct {
	// @SUMMARY Smart proxies provide an API for a higher-level orchestration tool. Foreman supports the following smart
	// proxies: DHCP (ISC DHCP & MS DHCP servers), DNS (bind & MS DNS servers), Puppet >= 0.24.x, Puppet CA, Realm (FreeIPA),
	// Templates, TFTP.
	__meta_ *bool `pulumi:"__meta_"`
	// The name of the smart proxy. @EXAMPLE "dns.dc1.company.com"
	Name *string `pulumi:"name"`
	// Uniform resource locator of the proxy. @EXAMPLE "https://dns.dc1.company.com:8443"
	Url *string `pulumi:"url"`
}

type SmartproxyState struct {
	// @SUMMARY Smart proxies provide an API for a higher-level orchestration tool. Foreman supports the following smart
	// proxies: DHCP (ISC DHCP & MS DHCP servers), DNS (bind & MS DNS servers), Puppet >= 0.24.x, Puppet CA, Realm (FreeIPA),
	// Templates, TFTP.
	__meta_ pulumi.BoolPtrInput
	// The name of the smart proxy. @EXAMPLE "dns.dc1.company.com"
	Name pulumi.StringPtrInput
	// Uniform resource locator of the proxy. @EXAMPLE "https://dns.dc1.company.com:8443"
	Url pulumi.StringPtrInput
}

func (SmartproxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*smartproxyState)(nil)).Elem()
}

type smartproxyArgs struct {
	// The name of the smart proxy. @EXAMPLE "dns.dc1.company.com"
	Name *string `pulumi:"name"`
	// Uniform resource locator of the proxy. @EXAMPLE "https://dns.dc1.company.com:8443"
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a Smartproxy resource.
type SmartproxyArgs struct {
	// The name of the smart proxy. @EXAMPLE "dns.dc1.company.com"
	Name pulumi.StringPtrInput
	// Uniform resource locator of the proxy. @EXAMPLE "https://dns.dc1.company.com:8443"
	Url pulumi.StringInput
}

func (SmartproxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smartproxyArgs)(nil)).Elem()
}

type SmartproxyInput interface {
	pulumi.Input

	ToSmartproxyOutput() SmartproxyOutput
	ToSmartproxyOutputWithContext(ctx context.Context) SmartproxyOutput
}

func (*Smartproxy) ElementType() reflect.Type {
	return reflect.TypeOf((**Smartproxy)(nil)).Elem()
}

func (i *Smartproxy) ToSmartproxyOutput() SmartproxyOutput {
	return i.ToSmartproxyOutputWithContext(context.Background())
}

func (i *Smartproxy) ToSmartproxyOutputWithContext(ctx context.Context) SmartproxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartproxyOutput)
}

// SmartproxyArrayInput is an input type that accepts SmartproxyArray and SmartproxyArrayOutput values.
// You can construct a concrete instance of `SmartproxyArrayInput` via:
//
//	SmartproxyArray{ SmartproxyArgs{...} }
type SmartproxyArrayInput interface {
	pulumi.Input

	ToSmartproxyArrayOutput() SmartproxyArrayOutput
	ToSmartproxyArrayOutputWithContext(context.Context) SmartproxyArrayOutput
}

type SmartproxyArray []SmartproxyInput

func (SmartproxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Smartproxy)(nil)).Elem()
}

func (i SmartproxyArray) ToSmartproxyArrayOutput() SmartproxyArrayOutput {
	return i.ToSmartproxyArrayOutputWithContext(context.Background())
}

func (i SmartproxyArray) ToSmartproxyArrayOutputWithContext(ctx context.Context) SmartproxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartproxyArrayOutput)
}

// SmartproxyMapInput is an input type that accepts SmartproxyMap and SmartproxyMapOutput values.
// You can construct a concrete instance of `SmartproxyMapInput` via:
//
//	SmartproxyMap{ "key": SmartproxyArgs{...} }
type SmartproxyMapInput interface {
	pulumi.Input

	ToSmartproxyMapOutput() SmartproxyMapOutput
	ToSmartproxyMapOutputWithContext(context.Context) SmartproxyMapOutput
}

type SmartproxyMap map[string]SmartproxyInput

func (SmartproxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Smartproxy)(nil)).Elem()
}

func (i SmartproxyMap) ToSmartproxyMapOutput() SmartproxyMapOutput {
	return i.ToSmartproxyMapOutputWithContext(context.Background())
}

func (i SmartproxyMap) ToSmartproxyMapOutputWithContext(ctx context.Context) SmartproxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmartproxyMapOutput)
}

type SmartproxyOutput struct{ *pulumi.OutputState }

func (SmartproxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Smartproxy)(nil)).Elem()
}

func (o SmartproxyOutput) ToSmartproxyOutput() SmartproxyOutput {
	return o
}

func (o SmartproxyOutput) ToSmartproxyOutputWithContext(ctx context.Context) SmartproxyOutput {
	return o
}

// @SUMMARY Smart proxies provide an API for a higher-level orchestration tool. Foreman supports the following smart
// proxies: DHCP (ISC DHCP & MS DHCP servers), DNS (bind & MS DNS servers), Puppet >= 0.24.x, Puppet CA, Realm (FreeIPA),
// Templates, TFTP.
func (o SmartproxyOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *Smartproxy) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// The name of the smart proxy. @EXAMPLE "dns.dc1.company.com"
func (o SmartproxyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Smartproxy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Uniform resource locator of the proxy. @EXAMPLE "https://dns.dc1.company.com:8443"
func (o SmartproxyOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Smartproxy) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type SmartproxyArrayOutput struct{ *pulumi.OutputState }

func (SmartproxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Smartproxy)(nil)).Elem()
}

func (o SmartproxyArrayOutput) ToSmartproxyArrayOutput() SmartproxyArrayOutput {
	return o
}

func (o SmartproxyArrayOutput) ToSmartproxyArrayOutputWithContext(ctx context.Context) SmartproxyArrayOutput {
	return o
}

func (o SmartproxyArrayOutput) Index(i pulumi.IntInput) SmartproxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Smartproxy {
		return vs[0].([]*Smartproxy)[vs[1].(int)]
	}).(SmartproxyOutput)
}

type SmartproxyMapOutput struct{ *pulumi.OutputState }

func (SmartproxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Smartproxy)(nil)).Elem()
}

func (o SmartproxyMapOutput) ToSmartproxyMapOutput() SmartproxyMapOutput {
	return o
}

func (o SmartproxyMapOutput) ToSmartproxyMapOutputWithContext(ctx context.Context) SmartproxyMapOutput {
	return o
}

func (o SmartproxyMapOutput) MapIndex(k pulumi.StringInput) SmartproxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Smartproxy {
		return vs[0].(map[string]*Smartproxy)[vs[1].(string)]
	}).(SmartproxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmartproxyInput)(nil)).Elem(), &Smartproxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmartproxyArrayInput)(nil)).Elem(), SmartproxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmartproxyMapInput)(nil)).Elem(), SmartproxyMap{})
	pulumi.RegisterOutputType(SmartproxyOutput{})
	pulumi.RegisterOutputType(SmartproxyArrayOutput{})
	pulumi.RegisterOutputType(SmartproxyMapOutput{})
}
