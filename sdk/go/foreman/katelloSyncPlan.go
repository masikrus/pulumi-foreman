// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foreman

import (
	"context"
	"reflect"

	"errors"
	"github.com/masikrus/pulumi-foreman/sdk/go/foreman/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KatelloSyncPlan struct {
	pulumi.CustomResourceState

	// @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
	__meta_ pulumi.BoolOutput `pulumi:"__meta_"`
	// Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
	CronExpression pulumi.StringPtrOutput `pulumi:"cronExpression"`
	// Sync plan description.@EXAMPLE "A sync plan description"
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enables or disables synchronization.@EXAMPLE true
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
	// "daily"
	Interval pulumi.StringOutput `pulumi:"interval"`
	// Sync plan name.@EXAMPLE "daily"
	Name pulumi.StringOutput `pulumi:"name"`
	// Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
	// difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
	SyncDate pulumi.StringOutput `pulumi:"syncDate"`
}

// NewKatelloSyncPlan registers a new resource with the given unique name, arguments, and options.
func NewKatelloSyncPlan(ctx *pulumi.Context,
	name string, args *KatelloSyncPlanArgs, opts ...pulumi.ResourceOption) (*KatelloSyncPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.SyncDate == nil {
		return nil, errors.New("invalid value for required argument 'SyncDate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KatelloSyncPlan
	err := ctx.RegisterResource("foreman:index/katelloSyncPlan:KatelloSyncPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKatelloSyncPlan gets an existing KatelloSyncPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKatelloSyncPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KatelloSyncPlanState, opts ...pulumi.ResourceOption) (*KatelloSyncPlan, error) {
	var resource KatelloSyncPlan
	err := ctx.ReadResource("foreman:index/katelloSyncPlan:KatelloSyncPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KatelloSyncPlan resources.
type katelloSyncPlanState struct {
	// @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
	__meta_ *bool `pulumi:"__meta_"`
	// Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
	CronExpression *string `pulumi:"cronExpression"`
	// Sync plan description.@EXAMPLE "A sync plan description"
	Description *string `pulumi:"description"`
	// Enables or disables synchronization.@EXAMPLE true
	Enabled *bool `pulumi:"enabled"`
	// How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
	// "daily"
	Interval *string `pulumi:"interval"`
	// Sync plan name.@EXAMPLE "daily"
	Name *string `pulumi:"name"`
	// Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
	// difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
	SyncDate *string `pulumi:"syncDate"`
}

type KatelloSyncPlanState struct {
	// @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
	__meta_ pulumi.BoolPtrInput
	// Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
	CronExpression pulumi.StringPtrInput
	// Sync plan description.@EXAMPLE "A sync plan description"
	Description pulumi.StringPtrInput
	// Enables or disables synchronization.@EXAMPLE true
	Enabled pulumi.BoolPtrInput
	// How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
	// "daily"
	Interval pulumi.StringPtrInput
	// Sync plan name.@EXAMPLE "daily"
	Name pulumi.StringPtrInput
	// Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
	// difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
	SyncDate pulumi.StringPtrInput
}

func (KatelloSyncPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloSyncPlanState)(nil)).Elem()
}

type katelloSyncPlanArgs struct {
	// Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
	CronExpression *string `pulumi:"cronExpression"`
	// Sync plan description.@EXAMPLE "A sync plan description"
	Description *string `pulumi:"description"`
	// Enables or disables synchronization.@EXAMPLE true
	Enabled bool `pulumi:"enabled"`
	// How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
	// "daily"
	Interval string `pulumi:"interval"`
	// Sync plan name.@EXAMPLE "daily"
	Name *string `pulumi:"name"`
	// Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
	// difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
	SyncDate string `pulumi:"syncDate"`
}

// The set of arguments for constructing a KatelloSyncPlan resource.
type KatelloSyncPlanArgs struct {
	// Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
	CronExpression pulumi.StringPtrInput
	// Sync plan description.@EXAMPLE "A sync plan description"
	Description pulumi.StringPtrInput
	// Enables or disables synchronization.@EXAMPLE true
	Enabled pulumi.BoolInput
	// How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
	// "daily"
	Interval pulumi.StringInput
	// Sync plan name.@EXAMPLE "daily"
	Name pulumi.StringPtrInput
	// Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
	// difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
	SyncDate pulumi.StringInput
}

func (KatelloSyncPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*katelloSyncPlanArgs)(nil)).Elem()
}

type KatelloSyncPlanInput interface {
	pulumi.Input

	ToKatelloSyncPlanOutput() KatelloSyncPlanOutput
	ToKatelloSyncPlanOutputWithContext(ctx context.Context) KatelloSyncPlanOutput
}

func (*KatelloSyncPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloSyncPlan)(nil)).Elem()
}

func (i *KatelloSyncPlan) ToKatelloSyncPlanOutput() KatelloSyncPlanOutput {
	return i.ToKatelloSyncPlanOutputWithContext(context.Background())
}

func (i *KatelloSyncPlan) ToKatelloSyncPlanOutputWithContext(ctx context.Context) KatelloSyncPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloSyncPlanOutput)
}

// KatelloSyncPlanArrayInput is an input type that accepts KatelloSyncPlanArray and KatelloSyncPlanArrayOutput values.
// You can construct a concrete instance of `KatelloSyncPlanArrayInput` via:
//
//	KatelloSyncPlanArray{ KatelloSyncPlanArgs{...} }
type KatelloSyncPlanArrayInput interface {
	pulumi.Input

	ToKatelloSyncPlanArrayOutput() KatelloSyncPlanArrayOutput
	ToKatelloSyncPlanArrayOutputWithContext(context.Context) KatelloSyncPlanArrayOutput
}

type KatelloSyncPlanArray []KatelloSyncPlanInput

func (KatelloSyncPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloSyncPlan)(nil)).Elem()
}

func (i KatelloSyncPlanArray) ToKatelloSyncPlanArrayOutput() KatelloSyncPlanArrayOutput {
	return i.ToKatelloSyncPlanArrayOutputWithContext(context.Background())
}

func (i KatelloSyncPlanArray) ToKatelloSyncPlanArrayOutputWithContext(ctx context.Context) KatelloSyncPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloSyncPlanArrayOutput)
}

// KatelloSyncPlanMapInput is an input type that accepts KatelloSyncPlanMap and KatelloSyncPlanMapOutput values.
// You can construct a concrete instance of `KatelloSyncPlanMapInput` via:
//
//	KatelloSyncPlanMap{ "key": KatelloSyncPlanArgs{...} }
type KatelloSyncPlanMapInput interface {
	pulumi.Input

	ToKatelloSyncPlanMapOutput() KatelloSyncPlanMapOutput
	ToKatelloSyncPlanMapOutputWithContext(context.Context) KatelloSyncPlanMapOutput
}

type KatelloSyncPlanMap map[string]KatelloSyncPlanInput

func (KatelloSyncPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloSyncPlan)(nil)).Elem()
}

func (i KatelloSyncPlanMap) ToKatelloSyncPlanMapOutput() KatelloSyncPlanMapOutput {
	return i.ToKatelloSyncPlanMapOutputWithContext(context.Background())
}

func (i KatelloSyncPlanMap) ToKatelloSyncPlanMapOutputWithContext(ctx context.Context) KatelloSyncPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KatelloSyncPlanMapOutput)
}

type KatelloSyncPlanOutput struct{ *pulumi.OutputState }

func (KatelloSyncPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KatelloSyncPlan)(nil)).Elem()
}

func (o KatelloSyncPlanOutput) ToKatelloSyncPlanOutput() KatelloSyncPlanOutput {
	return o
}

func (o KatelloSyncPlanOutput) ToKatelloSyncPlanOutputWithContext(ctx context.Context) KatelloSyncPlanOutput {
	return o
}

// @SUMMARY A sync plan is used to schedule a synchronization of a product in katello
func (o KatelloSyncPlanOutput) __meta_() pulumi.BoolOutput {
	return o.ApplyT(func(v *KatelloSyncPlan) pulumi.BoolOutput { return v.__meta_ }).(pulumi.BoolOutput)
}

// Custom cron logic for sync plan.@EXAMPLE "*/5 * * * *"
func (o KatelloSyncPlanOutput) CronExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloSyncPlan) pulumi.StringPtrOutput { return v.CronExpression }).(pulumi.StringPtrOutput)
}

// Sync plan description.@EXAMPLE "A sync plan description"
func (o KatelloSyncPlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KatelloSyncPlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enables or disables synchronization.@EXAMPLE true
func (o KatelloSyncPlanOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *KatelloSyncPlan) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// How often synchronization should run. Valid values include: `"hourly"`, `"daily"`, `"weekly"`,`"custom cron"`.@EXAMPLE
// "daily"
func (o KatelloSyncPlanOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloSyncPlan) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

// Sync plan name.@EXAMPLE "daily"
func (o KatelloSyncPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloSyncPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Start datetime of synchronization. Use the specified format: YYYY-MM-DD HH:MM:SS +0000, where '+0000' is the timezone
// difference. A value of '+0000' means UTC. @EXAMPLE "1970-01-01 00:00:00 +0000"
func (o KatelloSyncPlanOutput) SyncDate() pulumi.StringOutput {
	return o.ApplyT(func(v *KatelloSyncPlan) pulumi.StringOutput { return v.SyncDate }).(pulumi.StringOutput)
}

type KatelloSyncPlanArrayOutput struct{ *pulumi.OutputState }

func (KatelloSyncPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KatelloSyncPlan)(nil)).Elem()
}

func (o KatelloSyncPlanArrayOutput) ToKatelloSyncPlanArrayOutput() KatelloSyncPlanArrayOutput {
	return o
}

func (o KatelloSyncPlanArrayOutput) ToKatelloSyncPlanArrayOutputWithContext(ctx context.Context) KatelloSyncPlanArrayOutput {
	return o
}

func (o KatelloSyncPlanArrayOutput) Index(i pulumi.IntInput) KatelloSyncPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KatelloSyncPlan {
		return vs[0].([]*KatelloSyncPlan)[vs[1].(int)]
	}).(KatelloSyncPlanOutput)
}

type KatelloSyncPlanMapOutput struct{ *pulumi.OutputState }

func (KatelloSyncPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KatelloSyncPlan)(nil)).Elem()
}

func (o KatelloSyncPlanMapOutput) ToKatelloSyncPlanMapOutput() KatelloSyncPlanMapOutput {
	return o
}

func (o KatelloSyncPlanMapOutput) ToKatelloSyncPlanMapOutputWithContext(ctx context.Context) KatelloSyncPlanMapOutput {
	return o
}

func (o KatelloSyncPlanMapOutput) MapIndex(k pulumi.StringInput) KatelloSyncPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KatelloSyncPlan {
		return vs[0].(map[string]*KatelloSyncPlan)[vs[1].(string)]
	}).(KatelloSyncPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloSyncPlanInput)(nil)).Elem(), &KatelloSyncPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloSyncPlanArrayInput)(nil)).Elem(), KatelloSyncPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KatelloSyncPlanMapInput)(nil)).Elem(), KatelloSyncPlanMap{})
	pulumi.RegisterOutputType(KatelloSyncPlanOutput{})
	pulumi.RegisterOutputType(KatelloSyncPlanArrayOutput{})
	pulumi.RegisterOutputType(KatelloSyncPlanMapOutput{})
}
